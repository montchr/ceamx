# -*- eval: (load-file "./ceamx-dev-loader.el") -*-
#+title: Ceamx: An Emacs Configuration
#+author: Chris Montgomery
#+email: chmont@protonmail.com
#+language: en
#+property: header-args:emacs-lisp+ :results silent :comments org
#+property: header-args:shell+      :results replace
#+property: header-args             :mkdirp yes :tangle no :exports code :noweb yes

* Overview
:PROPERTIES:
:VISIBILITY: folded
:END:

This is a user configuration for GNU Emacs.

The target operating system is GNU/Linux, though the configuration
will usually also work on macOS.

** Styleguide
:PROPERTIES:
:VISIBILITY: folded
:END:

*** Boolean Variables vs. Predicate Functions
:PROPERTIES:
:CUSTOM_ID: boolean-variables-vs.-predicate-functions
:END:
The naming for booleans and predicates is different.

**** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src elisp
(defvar ceamx-foo-flag t)
(defvar ceamx-is-foo-enabled t)
(defun ceamx-foo-p ()
  ;; sketchy logic (don't do this)
  (or ceamx-foo-flag ceamx-is-foo-enabled))
#+end_src

**** Explanation
:PROPERTIES:
:CUSTOM_ID: explanation
:END:
From
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][Coding
Conventions (GNU Emacs Lisp Reference Manual)]]:

#+begin_quote
If the purpose of a function is to tell you whether a certain condition
is true or false, give the function a name that ends in 'p' (which
stands for "predicate".  If the name is one word, add just 'p'; if the
name is multiple words, add '-p'.  Examples are =framep= and
=frame-live-p=.  We recommend to avoid using this =-p= suffix in boolean
variable names, unless the variable is bound to a predicate function;
instead, use a =-flag= suffix or names like =is-foo=.

#+end_quote

**** Org-Mode: When to wrap inline text in ~tildes~ vs. =equals=

[[info:(org) Emphasis and Monospace][info (org) Emphasis and Monospace]]

[[https://emacs.stackexchange.com/a/21870][What's the relationship between ~foo~ and =foo= in org-mode? - Emacs Stack Exchange]]

** Anatomy
:PROPERTIES:
:VISIBILITY: folded
:END:

*** Partials
:PROPERTIES:
:header-args: :results replace
:END:

**** CANCELLED ~file-header~ cannot accept passthrough noweb args?
CLOSED: [2024-05-18 Sat 15:50]

- State "CANCELLED"  from "TODO"       [2024-05-18 Sat 15:50] \\
  There are many limitations to Noweb, and E expects to move away from the current approach.
**** ~file-header~

#+name: file-header-default-authors-table
| Chris Montgomery | chmont@protonmail.com | 2024 |   | GPL-3.0-or-later |
| Someone Else?    |                  |      |   |                  |

#+name: file-header
#+begin_src emacs-lisp :noweb yes :var feature="file-header-example" :var desc="" :var table=file-header-default-authors-table
  <<file-prop-line(feature,desc)>>

  ;; <<file-authors(table=table)>>
  <<file-extra-meta>>

  <<file-license>>

  ;;; Commentary:
  ;;; Code:
#+end_src

**** ~file-prop-line~

- Note taken on [2024-03-27 Wed 01:47] \\
  Added the ~extraprops~ =noweb= variable for additional propline values and file-local
  variables.

#+name: file-prop-line
#+header: :var feature="" :var desc="" :var extraprops=""
#+begin_src emacs-lisp :comments no
(format ";;; %s.el --- %s  -*- lexical-binding: t; %s -*-" feature desc extraprops)
#+end_src

**** ~file-extra-meta~

#+name: file-extra-meta
#+begin_src emacs-lisp
;; URL: https://codeberg.org/montchr/ceamx
;; Version: 0.1.0
#+end_src

**** TODO ~file-footer~

Emacs calls this the "file trailer" in ~generate-lisp-file-trailer~.

- [ ] Adds significantly to tangle time

#+name: file-footer
#+begin_src emacs-lisp :var feature="" :comments no
(format "(provide '%1$s)\n;;; %1$s.el ends here\n" feature)
#+end_src

**** ~file-authors~

Example table:

#+name: file-authors-example-table
| Name           | Email               | Start Year | End Year | License          |
|----------------+---------------------+------------+----------+------------------|
| Gilles Deleuze | notrees@rhizome.net |       1925 |     1995 | GPL-3.0-or-later |
| Félix Guattari | poop@dada.net       |            |          | WTFPL            |

#+name: file-authors
#+header: :var table=file-authors-example-table
#+begin_src emacs-lisp
(defun ceamx--authors-table-sanitize-year (year)
  "TODO"
  (pcase year
    ((pred numberp)
     (number-to-string year))
    ((and (pred stringp)
          (pred string-empty-p))
     nil)
    (_ year)))

(defun ceamx--authors-table-sanitize-years (start end)
  "TODO"
  (let ((years (list start end)))
    (seq-keep #'ceamx--authors-table-sanitize-year years)))

(defun ceamx-authors-format-attribution (name email)
""
  (concat name (and (not (string-empty-p email))
                    (format " <%s>" email))))

(defun ceamx-authors-format-copyright-line (author years)
  (format "Copyright (C) %s  %s" years author))

(defun ceamx--authors-table-process-row (row)
  "TODO"
  (seq-let (name email start end license) row
    (let* ((attribution (ceamx-authors-format-attribution name email))
           (years (ceamx--authors-table-sanitize-years start end))
           (year-range (string-join years "-")))
      (list
        :attribution attribution
        :email email
        :license license
        :name name
        :year-initial start
        :year-latest end
        :years year-range))))

(defun ceamx-authors-from-table (table)
  ""
  (mapcar #'ceamx--authors-table-process-row table))

(require 'subr-x)

(defun ceamx-authors-format-author-lines (authors)
  ""
  (let* ((prefix "Author: "))
                ;; FIXME: omit padding from first entry
    (concat prefix

            (mapconcat (lambda (author)
                         (concat (make-string (length prefix) (string-to-char " "))
                                 (plist-get author :attribution)))
                       authors "\n"))))

(let ((authors (ceamx-authors-from-table table)))
  (format "%s\n\n%s"
          (mapconcat (lambda (author)
                       (ceamx-authors-format-copyright-line
                        (plist-get author :attribution)
                        (plist-get author :years)))
                     authors "\n")
          (ceamx-authors-format-author-lines authors)))
#+end_src

#+RESULTS: file-authors
: Copyright (C) 1925-1995  Gilles Deleuze <notrees@rhizome.net>
: Copyright (C)   Félix Guattari <poop@dada.net>

*** License Headers
**** GNU General Public License 3.0 or later (=GPL-3.0-or-later=)

#+name: file-license
#+begin_src emacs-lisp
;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.
#+end_src

**** MIT License (=MIT=)

#+name: file-license-mit
#+begin_src emacs-lisp
;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
#+end_src

**** BSD 2-Clause License (=BSD-2-Clause=)

#+name: file-license-bsd-2-clause
#+begin_src emacs-lisp
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+end_src

** Resources

- [[info:elisp#Tips][(elisp) Tips]]
- [[info:elisp#Minor Mode Conventions][(elisp) Minor Mode Conventions]]


*** [[https://github.com/james-stoup/emacs-org-mode-tutorial][GitHub - james-stoup/emacs-org-mode-tutorial: A primer for users trying to make sense of Org Mode]]
* Maintenance

** Functions to clean and re-tangle Elisp files

#+begin_src emacs-lisp :noweb yes :results silent
<<ceamx-tangle-src>>
(ceamx/tangle-fresh)
#+end_src

#+name: ceamx-tangle-src
#+begin_src emacs-lisp
(require 'f)
(require 'llama)

(require 'ob-tangle)

(defun ceamx-list-tangled-init-files ()
  "List all tangled files in `user-emacs-directory'.
Note that this is a crude approximation reflective of our
expectations but not necessarily files that were truly tangled.

The assumptions are as follows:

-- All Emacs Lisp files within the \"lisp\" subdirectory
-- early-init.el
-- init.el

If there are any Emacs Lisp files within the \"lisp\"
subdirectory that have not been created as a result of tangling,
they will also be included in the result."
  (let ((dir user-emacs-directory))
    (append
     (mapcar (##f-join dir %) '("early-init.el" "init.el"))
     (f-files (f-join dir "lisp") (##f-ext-p % "el") t))))

(defun ceamx/purge-tangled-init-files ()
  "Delete all tangled init files according to `ceamx-list-tangled-init-files'."
  (interactive)
  (dolist (file (ceamx-list-tangled-init-files))
    (f-delete file)))

(defconst ceamx-literate-config-file (locate-user-emacs-file "config.org"))

(defun ceamx/tangle-fresh (&optional src-file)
  "Purge all existing tangled init files and re-tangle.
When SRC-FILE is non-nil, it will be used as the source file to
be tangled by `org-babel-tangle-file'.  Otherwise, if SRC-FILE is
nil, the value of `ceamx-literate-config-file' will be the
default source file."
  (interactive)
  (ceamx/purge-tangled-init-files)
  (org-babel-tangle-file
   (or src-file ceamx-literate-config-file)))
#+end_src


** Debugging

- Source :: [[https://github.com/progfolio/.emacs.d/blob/master/init.org?plain=1][.emacs.d/init.org at master · progfolio/.emacs.d]]
- Retrieved :: [2024-06-04 Tue 22:20]

Running this form will launch the debugger after loading a package.

This is useful for finding out when a dependency is requiring a package (perhaps
earlier than you want).

Use by tangling this block and launching Emacs with =emacs --debug-init=.

#+begin_src emacs-lisp :var file="" :results silent :tangle no
(unless (string-empty-p file)
  (eval-after-load file
    '(debug)))
#+end_src

Similarly, this variable will hit the debugger when a message matches its
regexp.

#+begin_src emacs-lisp :tangle no
(setq debug-on-message "")
#+end_src

Adding a variable watcher can be a useful way to track down initialization and
mutation of a variable.

#+begin_src emacs-lisp :tangle no
(add-variable-watcher 'org-capture-after-finalize-hook
                      (lambda (symbol newval operation where)
                        (debug)
                        (message "%s set to %s" symbol newval)))
#+end_src

#+begin_src emacs-lisp :tangle no
(setq debug-on-error t)
#+end_src

* Agenda
** TODO Promising alternative to =org-roam= or =denote= <https://github.com/meedstrom/org-node>
** CANCELLED <https://github.com/tarsius/org-elisp-help/blob/main/org-elisp-help.el>
CLOSED: [2024-07-14 Sun 21:34]
- State "CANCELLED"  from "TODO"       [2024-07-14 Sun 21:34]
** DONE <https://orgmode.org/worg/org-contrib/org-choose.html>
CLOSED: [2024-07-16 Tue 00:17]


- State "DONE"       from "INPRG"      [2024-07-16 Tue 00:17]
- State "INPRG"      from "TODO"       [2024-07-14 Sun 21:41] \\
  See section on ~org-contrib~

* Target Files
:PROPERTIES:
:VISIBILITY: folded
:END:

** =lisp/lib-editor.el=

#+name: lib-editor-file
#+begin_src emacs-lisp  :tangle lisp/lib-editor.el :comments no :noweb yes
<<file-prop-line(feature="lib-editor",desc="Editor support library")>>

;; Copyright (C) 2023-2024  Chris Montgomery
;; Copyright (C) 2016–2022  Radian LLC and contributors

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; Author: Chris Montgomery <chmont@protonmail.com>
;;         Radon Rosborough <radon@intuitiveexplanations.com>
;; Keywords: local


<<file-license>>

;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to deal
;; in the Software without restriction, including without limitation the rights
;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:

;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.

;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;; SOFTWARE.


;;; Commentary:
;;; Code:

<<lib-editor>>

<<file-footer(feature="lib-editor")>>
#+end_src

** =lisp/lib-prog.el=

#+name: lib-prog-file
#+begin_src emacs-lisp :tangle lisp/lib-prog.el :comments no :noweb yes
<<file-prop-line(feature="lib-prog",desc="Assorted helper callables for programming modes")>>

;; Copyright (c) 2024-2025 Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

<<file-license>>

;;; Commentary:
;;; Code:

<<lib-prog>>

<<file-footer(feature="lib-prog")>>
#+end_src

** =lisp/init-notes.el=

#+name: init-notes-file
#+begin_src emacs-lisp :tangle lisp/init-notes.el :comments no :noweb yes
<<file-prop-line(feature="init-notes",desc="Notetaking features")>>

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

<<file-license>>

;;; Commentary:
;;; Code:

<<init-notes>>

<<file-footer(feature="init-notes")>>
#+end_src

** =lisp/init-outline.el=

#+name: init-outline-file
#+begin_src emacs-lisp  :tangle lisp/init-outline.el :comments no :noweb yes
<<file-prop-line(feature="init-outline",desc="Customizations for outline structures")>>

;; Copyright (c) 2024-2025 Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

<<file-license>>

;;; Commentary:
;;; Code:

<<init-outline>>

<<file-footer(feature="init-outline")>>
#+end_src

** =lisp/init-workspace.el=

#+name: init-workspace-file
#+begin_src emacs-lisp :tangle lisp/init-workspace.el :comments no :noweb yes
<<file-prop-line(feature="init-workspace",desc="Workspaces, activities, scopes, and other organizational closures")>>

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

<<file-license>>

;;; Commentary:
;;; Code:

<<init-workspace>>

<<file-footer(feature="init-workspace")>>
#+end_src

* =early-init.el=
:PROPERTIES:
:header-args: :tangle early-init.el :comments both
:VISIBILITY: folded
:END:

** File Header

#+begin_src emacs-lisp :tangle early-init.el :startup folded :noweb yes :comments no
;;; early-init.el --- Early initialization file  -*- lexical-binding: t; no-byte-compile: t; -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

<<file-license>>

;;; Commentary:
;;; Code:
#+end_src

** Prevent package.el from enabling all packages before init

- [[https://old.reddit.com/r/emacs/comments/np6ey4/how_packageel_works_with_use_package/][How package.el Works with Use Package : emacs]]


When nil and using the builtin package manager, ~package-initialize~ must be
invoked in the init process prior to ~require~ing any packages installed with
~package-install~.

When non-nil, there is no need to invoke ~package-initialize~.

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Define proxy hooks for ~after-init-hook~ and ~emacs-startup-hook~

#+begin_src emacs-lisp
(defvar ceamx-after-init-hook '())
(defun ceamx-after-init-hook ()
  (run-hooks 'ceamx-after-init-hook))

(defvar ceamx-emacs-startup-hook '())
(defun ceamx-emacs-startup-hook ()
  (run-hooks 'ceamx-emacs-startup-hook))
#+end_src

** Performance
*** Minimize garbage collection during startup

[[https://old.reddit.com/r/emacs/comments/yzb77m/an_easy_trick_i_found_to_improve_emacs_startup/iwz1vek/][eli-zaretskii comments on An easy trick I found to improve Emacs start-up time]]:

#+begin_quote
My advice is to spend some time measuring the effect of increased GC threshold
on operations that you care about and that take a long enough time to annoy,
and use the lowest threshold value which produces a tangible improvement.
Start with the default value, then enlarge it by a factor of 2 until you see
only insignificant speedups. I would not expect the value you arrive at to be
as high as 100 MiB.
#+end_quote

See also:

<https://github.com/jwiegley/dot-emacs/blob/master/init.org#startup>

*** Provide insight into garbage-collection activity to inform tuning decisions

#+begin_src emacs-lisp
;; TODO: will a `init-file-debug' check work here?
(setq garbage-collection-messages t)
#+end_src

*** Prevent garbage-collection during init

#+begin_src emacs-lisp
;; NOTE: Either use `gcmh' or make sure to reset this later.  Or else!
(setq gc-cons-threshold (* 128 1024 1024)) ; 128MiB
#+end_src

*** DISABLED Simplify filename pattern-matching during init

- Note taken on [2024-11-19 Tue 20:52] \\
  This was not properly excluded from tangling until restructuring my config
  today!  So it has actually been present in =early-init.el= for some time...
- Note taken on [2024-03-23 Sat 03:24] \\
  Quick followup: I would not be surprised if this had something to do with adding
  ~ceamx-restore-file-name-handler-alist-h~ on ~ceamx-after-init-hook~, which is
  equivalent to ~elpaca-after-init-hook~.
- Note taken on [2024-03-23 Sat 03:01] \\
  This snippet appears to cause Emacs to lose track of its own source files in most sessions.

  ~describe-function~ and ~helpful-function~ report symbols "without a source
  file".  I did not have much to go on until I became aware of ~find-function~.
  After invoking the latter on a function whose source could not be located, I
  noticed a clue: ~find-function~ somehow knew about the source file with a =.el=
  extension.  I investigated the Emacs =lisp/= directory and saw that there are no
  =.el= files -- only =.elc= and =.el.gz=.  The =.elc= files are unreadable, but
  Emacs is still able to read the compressed =gz= archives.  I still do not know
  exactly why it forgot.

  The issue has not been consistent, which likely indicates a race condition.  For
  a while, I assumed the issue occurred in consecutive sessions after calling
  ~restart-emacs~, but that was not the case.

  Disabling this hack is the only consistent way I found to help Emacs find
  itself.  Re-enabling it caused the issue to recur.  In the end, after
  disabling, I see absolutely no difference in startup performance.
  Optimization-by-copypasta strikes again.

  This has been a very frustrating regression in many/most of my Emacs sessions.
  I rely a lot on being able to read Emacs Lisp source code to understand how
  Emacs works -- that is how I learn.  Without being able to view source, I am
  left only with a lack of clarity.

- <https://github.com/jwiegley/dot-emacs/blob/79bc2cff3a28ecd1a315609bbb607eb4ba700f76/init.org#during-loading-of-this-module-clear-file-name-handler-alist>
- <https://old.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/>

#+begin_src emacs-lisp :tangle no
(defvar ceamx-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun ceamx-restore-file-name-handler-alist-h ()
  "Restore the original value of the `file-name-handler-alist' variable.
Intended for use as a callback on `ceamx-after-init-hook'."
  (setq file-name-handler-alist ceamx-file-name-handler-alist)
  (makunbound 'ceamx-file-name-handler-alist))

(add-hook 'ceamx-after-init-hook #'ceamx-restore-file-name-handler-alist-h)
#+end_src

** Directories and well-known-files
*** Add directories to load path

#+begin_src emacs-lisp
;; Configure load path
(dolist (subdir '("autoloads" "lisp" "lisp/core" "lisp/lib"))
  (let ((dir (expand-file-name subdir user-emacs-directory)))
    (add-to-list 'load-path dir)))
#+end_src

*** Load custom constants describing well-known paths

See [[*=ceamx-paths= :: common path constants]]

#+begin_src emacs-lisp
(require 'ceamx-paths)
#+end_src

*** Store packages in the designated directory

#+begin_src emacs-lisp
(setq package-user-dir ceamx-packages-dir)
#+end_src

*** Use preferred cache directories for native compilation

#+begin_src emacs-lisp
(startup-redirect-eln-cache ceamx-eln-dir)
(add-to-list 'native-comp-eln-load-path ceamx-eln-dir)
#+end_src

** Native compilation settings

#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors 'silent)
(setq native-compile-prune-cache t)

;; Don't load outdated byte-compiled files.
;;
;; NOTE: This does not handle *recompiling* the outdated files.
;; That would need to be handled during init.
;;
;; More info: <https://github.com/emacscollective/auto-compile/blob/main/README.org>
(setq load-prefer-newer t)

;; Package installation will provoke a lot of warnings from third-party
;; packages, but there's nothing we can do about those.
(setq byte-compile-warnings nil)
#+end_src

** Disable the bell

#+begin_src emacs-lisp
(setq ring-bell-function #'ignore)
#+end_src

** Appearance: integrate with desktop environment

#+begin_src emacs-lisp
;; Prevent X11 from taking control of visual behavior and appearance.
(setq inhibit-x-resources t)
#+end_src

** FIXME these should be renamed or moved as their namespace indicates
they would normally live in the ~ceamx-ui~ feature.

#+begin_src emacs-lisp
(defconst ceamx-ui-gsettings-ui-namespace "org.gnome.desktop.interface")

(defun ceamx-ui-gsettings-theme ()
  "Get the currently-active GNOME/GTK color scheme."
  (shell-command-to-string (format "gsettings get %s color-scheme"
                         ceamx-ui-gsettings-ui-namespace)))

(defun ceamx-ui-gsettings-dark-theme-p ()
  "Whether GNOME/GTK are using a theme with a dark color scheme."
  (string-match-p "dark" (ceamx-ui-gsettings-theme)))

(defun ceamx-ui-desktop-dark-theme-p ()
  "Predicate whether a desktop environment is displaying a dark appearance."
  (or (ceamx-ui-gsettings-dark-theme-p)))

(defun ceamx-ui-re-enable-theme-in-frame (_frame)
  "Re-enable active theme, if any, upon FRAME creation.
Add this to `after-make-frame-functions' so that new frames do
not retain the generic background set by the function
`ceamx-prevent-initial-light-flash'."
  (when-let* ((theme (car custom-enabled-themes)))
    (enable-theme theme)))
#+end_src

** Appearance: basic frame settings

#+begin_src emacs-lisp
(setq frame-resize-pixelwise t
      frame-inhibit-implied-resize t
      frame-title-format '("%b")
      use-dialog-box t
      use-file-dialog nil
      use-short-answers t              ; affects `yes-or-no-p'
      read-answer-short t              ; affects `read-answer' (completion)
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message user-login-name
      inhibit-startup-buffer-menu t)

(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

;; `tooltip-mode' is broken for me in pgtk -- might be an Emacs bug,
;; causes constant errors when moving mouse over modeline.
;;
;; FIXME: actually, this is behaving inconsistently: disabling it does
;; not necessarily work, and toggling it off/on allows `tooltip-mode'
;; to function normally...  maybe needs to happen later in init?
(tooltip-mode -1)
#+end_src

** Appearance: avoid flash of light in a dark environment

- source :: <https://protesilaos.com/emacs/dotemacs#h:7d3a283e-1595-4692-8124-e0d683cb15b2>


#+begin_src emacs-lisp
(defun ceamx-init-prevent-initial-light-flash ()
  "Avoid the bright flash of light during startup in dark environments."
  (when (ceamx-ui-desktop-dark-theme-p)
    (set-face-attribute 'default nil :background "#000000" :foreground "#ffffff")
    (set-face-attribute 'mode-line nil :background "#000000" :foreground "#ffffff" :box 'unspecified)
    ;; FIXME: errors wrong num args
    ;;    (add-hook 'ceamx-after-init-hook #'ceamx-ui-re-enable-theme-in-frame)
    ;; (add-hook 'after-make-frame-functions #'ceamx-ui-re-enable-theme-in-frame)
    ))

;; (ceamx-init-prevent-initial-light-flash)
#+end_src

** Rename the default/initial frame

#+begin_src emacs-lisp
(defvar ceamx-default-frame-name "home"
  "Name for the default Emacs frame.")

(defun ceamx-after-init-default-frame-name-h ()
  "Set the name for the default frame.
Simple wrapper for a call to `set-frame-name' providing
`ceamx-default-frame-name' as the NAME argument.

Intended for use as a callback on the `ceamx-after-init-hook'."
  (set-frame-name ceamx-default-frame-name))

(add-hook 'ceamx-after-init-hook #'ceamx-after-init-default-frame-name-h)
#+end_src

* =ceamx-paths= :: Paths

#+begin_src emacs-lisp :tangle lisp/core/ceamx-paths.el :comments no :noweb yes
;;; ceamx-paths.el --- Common paths variables        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Define variables pointing to commonly-used paths.

;;; Code:

;;
;;; Functions

(defun ceamx-format-version-subdir (parent)
  "Return a path-like string for a subdirectory of PARENT based on the current Emacs version."
  (format "%s/%s.%s/"
    parent
    emacs-major-version
    emacs-minor-version))

;;
;;; Variables

(defconst ceamx-site-lisp-dir
  (concat user-emacs-directory "site-lisp/")
  "Absolute path to the site-lisp directory.")

(defconst ceamx-home-dir (file-name-as-directory (getenv "HOME"))
  "Path to user home directory.")

(defconst ceamx-xdg-config-dir
  (file-name-as-directory
   (or (getenv "XDG_CONFIG_HOME")
       (concat ceamx-home-dir ".config"))))

(defconst ceamx-xdg-cache-dir
  (file-name-as-directory
   (or (getenv "XDG_CACHE_HOME")
       (concat ceamx-home-dir ".cache"))))

(defconst ceamx-config-dir ceamx-xdg-config-dir
  "The root directory for personal configurations.")

;; TODO: rename to something like `ceamx-storage-dir' to reduce confusion
(defconst ceamx-local-dir
  (concat ceamx-xdg-cache-dir "ceamx/")
  "The root directory for local Emacs files.
Use this as permanent storage for files that are safe to share
across systems.")

(defconst ceamx-etc-dir (concat ceamx-local-dir "etc/")
  "Directory for non-volatile storage.
Use this for files that don't change much, like servers binaries,
external dependencies or long-term shared data.")

(defconst ceamx-var-dir (concat ceamx-local-dir "var/")
  "Directory for volatile storage.
Use this for files that change often, like data and cache files.")

;; FIXME: avoid usage of `expand-file-name', which is incorrect -- read its
;; documentation / the manual section.  `convert-standard-filename' may also be
;; removed in this context.  the latter is likely better off used as needed, and
;; closer to the usage rather than in this declaration.  this declaration *is*
;; the standard Unix-like filename expected by `convert-standard-filename'.
(defconst ceamx-eln-dir (convert-standard-filename
                       (file-name-as-directory
                        (expand-file-name "eln/" ceamx-var-dir)))
  "Directory for natively-compiled eln files.")

(defconst ceamx-packages-dir
  (expand-file-name (ceamx-format-version-subdir "packages")
    ceamx-local-dir)
  "Where packages are stored.
Intended for setting the value of `package-user-dir' or the
equivalent settings for third-party package managers.

Packages will be stored in subdirectories based on the current
Emacs version to prevent bytecode incompatibility.")

;;; Feature-Specific Paths

(defconst ceamx-projects-dir
  (file-name-as-directory
   (or (getenv "XDG_PROJECTS_DIR")
       (concat ceamx-home-dir "Developer")))
  "The root directory for projects.")

<<config-feature-paths>>

(provide 'ceamx-paths)
;;; ceamx-paths.el ends here

;; Local Variables:
;; no-byte-compile: t
;; no-native-compile: t
;; no-update-autoloads: t
;; End:
#+end_src

* =ceamx-lib= :: Core Functions & Macros
:PROPERTIES:
:header-args: :tangle lisp/core/ceamx-lib.el
:END:

#+begin_src emacs-lisp :tangle lisp/core/ceamx-lib.el :comments no
;;; core/ceamx-lib.el --- Ceamx common library  -*- lexical-binding: t;  -*-

;; Copyright (C) 2023-2024  Chris Montgomery <chmont@protonmail.com>
;; Copyright (C) 2014-2023  Henrik Lissner
;; Copyright (C) 2006-2021  Steve Purcell
;; Copyright (C) 2016–2022  Ceamx LLC and contributors
;; Copyright (C) 2018  Adam Porter
;; Copyright (C) 2013-2021  Bailey Ling <bling@live.ca>
;; Copyright (C) 2013-2023  7696122 <7696122@gmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;;         Henrik Lissner
;;         Steve Purcell
;;         Radon Rosborough <radon@intuitiveexplanations.com>
;;         Adam Porter <adam@alphapapa.net>
;;         Bailey Ling <bling@live.ca>
;;         7696122 <7696122@gmail.com>

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.
;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:

;; This library is a requirement of just about every customization and library
;; file.  It is loaded early during initialization before packages are loaded.
;; Avoid any library dependencies which are not already part of Emacs.

;;;; Sources

;; <https://github.com/doomemacs/doomemacs/blob/03d692f129633e3bf0bd100d91b3ebf3f77db6d1/lisp/doom-lib.el>
;; <https://github.com/ceamx-software/ceamx/blob/9a82b6e7395b3f1f143b91f8fe129adf4ef31dc7/emacs/ceamx.el>
;; <https://github.com/doomemacs/doomemacs/blob/986398504d09e585c7d1a8d73a6394024fe6f164/lisp/doom-keybinds.el#L93C1-L109C56>

;;; Code:

;;;; Requirements

(require 'cl-lib)
(require 'map)
(require 'seq)

;;;; Variables

;; via <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/prot-lisp/ceamx.el>
(defconst ceamx-url-regexp
  (concat
   "~?\\<\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]*\\)"
   "[.@]"
   "\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]+\\)\\>/?")
  "Regular expression to match (most?) URLs or email addresses.")

;;;; Keymaps

(define-prefix-command 'ceamx-appearance-prefix)
(define-prefix-command 'ceamx-buffer-prefix)
(define-prefix-command 'ceamx-code-prefix)
(define-prefix-command 'ceamx-file-prefix)
(define-prefix-command 'ceamx-insert-prefix)
(define-prefix-command 'ceamx-launch-prefix)
(define-prefix-command 'ceamx-note-prefix)
(define-prefix-command 'ceamx-package-prefix)
(define-prefix-command 'ceamx-replace-prefix)
(define-prefix-command 'ceamx-session-prefix)
(define-prefix-command 'ceamx-toggle-prefix)
(define-prefix-command 'ceamx-window-prefix)
(define-prefix-command 'ceamx-workspace-prefix)

;;;; Commands


;;;; Functions (Public)

;;;;; Environment Context

(defun ceamx-host-p (name)
  "Whether Emacs is running on the machine NAME."
  (string= name (system-name)))

(defun ceamx-host-macos-p ()
  "Whether the current host system is macOS."
  (or (memq window-system '(mac ns))
      (eq system-type 'darwin)))

(defun ceamx-host-gnu-linux-p ()
  "Whether the current host system is GNU/Linux."
  (eq system-type 'gnu/linux))

(defun ceamx-host-nixos-p ()
  "Whether the operating system is NixOS."
  (string-match-p "NixOS" (shell-command-to-string "uname -v")))

(defun ceamx-host-wsl-p ()
  "Whether Emacs is currently running in WSL."
  (and (eq system-type 'gnu/linux)
       (or (getenv "WSLENV")
           (getenv "WSL_DISTRO_NAME"))))

(when (ceamx-host-wsl-p)
  (defun ceamx-wsl/copy-selected-text (start end)
    "In WSL, copy text region with START and END to the host clipboard."
    (interactive "r")
    (when (use-region-p)
      (let ((text (buffer-substring-no-properties start end)))
        (shell-command (concat "echo '" text "' | clip.exe"))))))

;;;;; Emacs

(defun ceamx-emacs-nix-build-date ()
  "Return the Nix build date for this version of Emacs."
  (string-match "--prefix.*emacs.*\\([[:digit:]]\\{8\\}\\)" system-configuration-options)
  (string-to-number (match-string 1 system-configuration-options)))

;;;;; Filesystem

(defun ceamx-subdirs (parent-dir)
  "Return every non-hidden subdirectory of PARENT-DIR."
  (cl-remove-if-not
   #'file-directory-p
   (directory-files
    (expand-file-name parent-dir) t "^[^\\.]")))

;;;;; String Manipulation

(defun ceamx-unquote (exp)
  "Return EXP unquoted."
  (declare (pure t) (side-effect-free t))
  (while (memq (car-safe exp) '(quote function))
    (setq exp (cadr exp)))
  exp)

;;;;; Keybindings & Keymaps

;; via <oantolin>: <https://old.reddit.com/r/emacs/comments/1adwnse/repeatmode_is_awesome_share_you_useful_configs/kk9vpif/>
(defun ceamx-repeatify-keymap (repeat-map)
  "Set the `repeat-map' property on all commands bound in REPEAT-MAP."
  (named-let process ((keymap (symbol-value repeat-map)))
    (map-keymap
     (lambda (_key cmd)
       (cond
        ((symbolp cmd) (put cmd 'repeat-map repeat-map))
        ((keymapp cmd) (process cmd))))
     keymap)))

;;;;; Window

;; via prot-emacs
;;;###autoload
(defun ceamx-window-bounds ()
  "Return start and end points in the window as a cons cell."
  (cons (window-start) (window-end)))

;; via prot-emacs
;;;###autoload
(defun ceamx-window-small-p ()
  "Return non-nil if window is small.
Check if the `window-width' or `window-height' is less than
`split-width-threshold' and `split-height-threshold', respectively."
  (or (and (numberp split-width-threshold)
           (< (window-total-width) split-width-threshold))
      (and (numberp split-height-threshold)
           (> (window-total-height) split-height-threshold))))

;; via prot-emacs
;;;###autoload
(defun ceamx-window-narrow-p ()
  "Return non-nil if window is narrow.
Check if the `window-width' is less than `split-width-threshold'."
  (and (numberp split-width-threshold)
       (< (window-total-width) split-width-threshold)))

;;;###autoload
(defun ceamx-three-or-more-windows-p (&optional frame)
  "Return non-nil if three or more windows occupy FRAME.
If FRAME is non-nil, inspect the current frame."
  (>= (length (window-list frame :no-minibuffer)) 3))

;;;;; Buffer

;; via prot-emacs
;;;###autoload
(defun ceamx-page-p ()
  "Return non-nil if there is a `page-delimiter' in the buffer."
  (or (save-excursion (re-search-forward page-delimiter nil t))
      (save-excursion (re-search-backward page-delimiter nil t))))

;; via prot-emacs
;;;###autoload
(defun ceamx-truncate-lines-silently ()
  "Toggle line truncation without printing messages."
  (let ((inhibit-message t))
    (toggle-truncate-lines t)))

;;;; Functions (Private)

;; via <https://github.com/radian-software/radian/blob/31b28372df6c24b82a53ba9c89140b4888c16f88/emacs/radian.el#L641C1-L654C38>
(defun ceamx--remove-sharp-quotes (form)
  "Remove sharp quotes in all sub-forms of FORM."
  (pcase form
    (`(function ,x) (ceamx--remove-sharp-quotes x))
    (`(,x . ,y) (cons (ceamx--remove-sharp-quotes x)
                      (ceamx--remove-sharp-quotes y)))
    ((pred vectorp)
     (apply #'vector (mapcar #'ceamx--remove-sharp-quotes form)))
    (x x)))

;;;; Macros

(defmacro noop! (&rest _body)
  "Do nothing with BODY and return nil.
Unlike `ignore', produce no side effects."
  (declare (indent defun))
  nil)

;; via <https://github.com/doomemacs/doomemacs/blob/bbadabda511027e515f02ccd7b70291ed03d8945/lisp/doom-lib.el#L628C1-L673C1>
(defmacro after! (package &rest body)
  "Evaluate BODY after PACKAGE have loaded.

PACKAGE is a symbol (or list of them) referring to Emacs
features (aka packages).  PACKAGE may use :or/:any and :and/:all
operators.  The precise format is:

- An unquoted package symbol (the name of a package)
    (after! package-a BODY...)
- An unquoted, nested list of compound package lists, using any combination of
  :or/:any and :and/:all
    (after! (:or package-a package-b ...)  BODY...)
    (after! (:and package-a package-b ...) BODY...)
    (after! (:and package-a (:or package-b package-c) ...) BODY...)
- An unquoted list of package symbols (i.e. BODY is evaluated once both magit
  and git-gutter have loaded)
    (after! (magit git-gutter) BODY...)
  If :or/:any/:and/:all are omitted, :and/:all are implied.

This emulates `eval-after-load' with a few key differences:

1. No-ops for package that are disabled by the user (via `package!') or not
   installed yet.
2. Supports compound package statements (see :or/:any and :and/:all above).

Since the contents of these blocks will never by byte-compiled, avoid putting
things you want byte-compiled in them! Like function/macro definitions."
  (declare (indent defun) (debug t))
  (if (symbolp package)
      (list (if (or (not (bound-and-true-p byte-compile-current-file))
                    (require package nil 'noerror))
                #'progn
              #'with-no-warnings)
            `(with-eval-after-load ',package ,@body))
    (let ((p (car package)))
      (cond ((memq p '(:or :any))
             (macroexp-progn
              (cl-loop for next in (cdr package)
                       collect `(after! ,next ,@body))))
            ((memq p '(:and :all))
             (dolist (next (reverse (cdr package)) (car body))
               (setq body `((after! ,next ,@body)))))
            (`(after! (:and ,@package) ,@body))))))

;; via <https://github.com/bling/dotemacs/blob/97c72c8425c5fb40ca328d1a711822ce0a0cfa26/core/core-boot.el#L83C1-L88C25>
(defmacro defer! (secs &rest body)
  "Run BODY when Emacs is idle for SECS seconds."
  (declare (indent defun) (debug t))
  `(run-with-idle-timer
    ,secs
    nil
    (lambda () ,@body)))

;; via <https://github.com/doomemacs/doomemacs/blob/03d692f129633e3bf0bd100d91b3ebf3f77db6d1/lisp/doom-lib.el#L686-L701>
(defmacro defer-until! (condition &rest body)
  "Run BODY when CONDITION is non-nil.
Leverages checks via `after-load-functions'.
Meant to serve as a predicated alternative to `after!'."
  (declare (indent defun) (debug t))
  `(if ,condition
       (progn ,@body)
     ,(let ((fn (intern (format "ceamx--delay-form-%s-h" (sxhash (cons condition body))))))
       `(progn
          (fset ',fn (lambda (&rest args)
                       (when ,(or condition t)
                        (remove-hook 'after-load-functions #',fn)
                        (unintern ',fn nil)
                        (ignore args)
                        ,@body)))
          (put ',fn 'permanent-local-hook t)
          (add-hook 'after-load-functions #',fn)))))

(defmacro appendq! (sym &rest lists)
  "Append LISTS to SYM in place."
  `(setq ,sym (append ,sym ,@lists)))

(defmacro prependq! (sym &rest lists)
  "Prepend LISTS to SYM in place."
  `(setq ,sym (append ,@lists ,sym)))

(defmacro appendopt! (variable &rest lists)
  "Append LISTS to the existing user option VARIABLE.
This uses `setopt' to set the new value of VARIABLE."
  `(setopt ,variable (append ,variable ,@lists)))

(defmacro prependopt! (variable &rest lists)
  "Prepend LISTS to the existing user option VARIABLE.
This uses `setopt' to set the new value of VARIABLE."
  `(setopt ,variable (append ,@lists ,variable)))

(defmacro delq! (elt list &optional fetcher)
  "`delq' ELT from LIST in-place.
If FETCHER is a function, ELT is used as the key in LIST (an alist)."
  `(setq ,list (delq ,(if fetcher
                          `(funcall ,fetcher ,elt ,list)
                        elt)
                ,list)))

;; TODO: another version to test car of alist so that new additions with the
;;       same car will override the existing list
(defmacro pushnew! (place &rest values)
  "Push VALUES sequentially into PLACE, if they aren't already present.
This is a variadic `cl-pushnew'."
  (let ((var (make-symbol "result")))
    `(dolist (,var (list ,@values) (with-no-warnings ,place))
      (cl-pushnew ,var ,place :test #'equal))))

(defmacro def-advice! (name arglist how symbol docstring &rest body)
  "Define an advice called NAME and add it to a function.
ARGLIST, DOCSTRING, and BODY are as in `defun'.

HOW and SYMBOL are as in `advice-add'.  HOW describes how to add
the newly-defined advice.  SYMBOL is the function to be advised."
  (declare (indent 2)
           (doc-string 5))
  (unless (stringp docstring)
    (error "Ceamx: advice `%S' not documented'" name))
  (unless (and (listp symbol)
               (= 2 (length symbol))
               (eq (nth 0 symbol) 'function)
               (symbolp (nth 1 symbol)))
    (error "Ceamx: advice `%S' does not sharp-quote symbol `%S'" name symbol))
  `(progn
     (defun ,name ,arglist
      ,(let ((article (if (string-match-p "^:[aeiou]" (symbol-name how))
                          "an"
                        "a")))
        (format "%s\n\nThis is %s `%S' advice for\n`%S'."
         docstring article how
         (if (and (listp symbol)
              (memq (car symbol) ''function))
             (cadr symbol)
           symbol)))
      ,@body)
     (eval-when-compile
       (declare-function ,name nil))
     (advice-add ,symbol ',how #',name)
     ',name))

(defmacro def-hook! (name arglist hooks docstring &rest body)
  "Define function NAME and add it to HOOKS.
ARGLIST is as in `defun'.  HOOKS is a list of hooks to which to
add the function, or just a single hook.  DOCSTRING and BODY are
as in `defun'."
  (declare (indent defun)
           (doc-string 4))
  (setq hooks (ensure-list (ceamx-unquote hooks)))
  (dolist (hook hooks)
    (unless (string-match-p "-\\(hook\\|functions\\)$" (symbol-name hook))
      (error "Symbol `%S' is not a hook" hook)))
  (unless (stringp docstring)
    (error "Ceamx: no docstring provided for `def-hook!'"))
  (let ((hooks-str (format "`%S'" (car hooks))))
    (dolist (hook (cdr hooks))
      (setq hooks-str (format "%s\nand `%S'" hooks-str hook)))
    `(progn
       (defun ,name ,arglist
        ,(format "%s\n\nThis function is for use in %s."
          docstring hooks-str)
        ,@body)
       (dolist (hook ',hooks)
        (add-hook hook #',name)))))

(defmacro abbrevs! (table &rest defs)
  "Expand `abbrev' definitions DEFS for the given TABLE.
DEFS is a sequence of any of the following:

  - Pair of strings mapping ABBREV to its literal EXPANSION

  - Pair of string to symbol mapping ABBREV to a function EXPANSION
    returning the expanded string

\(fn TABLE &rest [ABBREV EXPANSION]...)"
  (declare (indent 1))
  (unless (zerop (% (length defs) 2))
    (error "Uneven number of abbrev/expansion pairs: %s" defs))
  `(if (abbrev-table-p ,table)
       (progn
         ,@(mapcar
            (lambda (pair)
              (let ((abbrev (nth 0 pair))
                    (expansion (nth 1 pair)))
               (if (stringp expansion)
                   `(define-abbrev ,table ,abbrev ,expansion)
                 `(define-abbrev ,table ,abbrev "" ,expansion))))
            (seq-split defs 2)))
     (error "%s is not an abbrev table" ,table)))

(defmacro use-feature! (name &rest args)
  "Configure feature NAME with `use-package' without package installation.
ARGS are as in `use-package', which see.

If `use-package-always-ensure' is non-nil, its effect will be ignored
here because `:ensure' will be nil."
  (declare (indent defun))
  `(use-package ,name
     :ensure nil
     ,@args))

(defmacro package! (order &rest body)
  "Declare a package ORDER and its initial configuration BODY.
Provides the necessary autoloads so that we can declare packages
without needing to declare autoloads for `elpaca' in every file."
  (declare (indent defun))
  `(progn
     (autoload 'elpaca "elpaca" nil nil t)
     (elpaca ,order ,@body)))

;;;; Footer

(provide 'ceamx-lib)
;;; ceamx-lib.el ends here
#+end_src

* =init.el=
:PROPERTIES:
:header-args: :tangle init.el :comments both
:END:

** File header

#+begin_src emacs-lisp :tangle init.el :noweb yes :comments no
;;; init.el --- Ceamx -*- lexical-binding: t; no-byte-compile: t; -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>

<<file-license>>

;;; Commentary:
;;; Code:
#+end_src

** Requirements

#+begin_src emacs-lisp
(require 'cl-lib)

(require 'ceamx-paths)
(require 'ceamx-lib)
#+end_src

** Configure default identity

#+begin_src emacs-lisp
(setq-default user-full-name "Chris Montgomery"
              user-mail-address "chmont@protonmail.com")
#+end_src

** Profiling

- source :: <https://github.com/progfolio/.emacs.d/blob/ed159dc6076664ad9976949d8cb3af8e86fe39d1/init.org#profiling>

#+begin_src emacs-lisp :lexical t
(add-hook 'ceamx-after-init-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract (current-time) before-init-time)))
                     gcs-done)))
#+end_src

Optionally, display a report after startup:

#+begin_src emacs-lisp :lexical t :tangle no
(profiler-start 'cpu+mem)
(add-hook 'ceamx-after-init-hook (lambda () (profiler-stop) (profiler-report)))
#+end_src

ELP is useful for seeing which functions in a package are "hot":

#+begin_src emacs-lisp :var file="elpaca" :lexical t :tangle no
(require 'elp)
(with-eval-after-load file
  (elp-instrument-package file))
(add-hook ceamx-after-init-hook
          (lambda () (elp-results) (elp-restore-package (intern file))))
#+end_src

** Initialize the =ceamx= user options

#+begin_src emacs-lisp
(defgroup ceamx nil
  "User-configurable options for Ceamx."
  :group 'emacs)
#+end_src

*** The user option to define directory trees whose files should be opened in read-only buffers :config:

#+begin_src emacs-lisp
(defcustom ceamx-buffer-read-only-dirs-list (list ceamx-packages-dir)
  "List of directories whose files should be opened in read-only buffers."
  :group 'ceamx
  :type '(string))
#+end_src

*** The user option to determine whether to load ~custom-file~

#+begin_src emacs-lisp
(defcustom ceamx-load-custom-file nil
  "Whether to load the user `custom-file' (custom.el)."
  :group 'ceamx
  :type '(boolean))
#+end_src

** Configure ~custom-file~ location

#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom.el"))
#+end_src

** Declare safe local variable directories and values relating to Emacs initialization

#+begin_src emacs-lisp
  (setopt safe-local-variable-directories
          ;; NOTE: `user-emacs-directory' is intentionally not included
          ;; here because its value can change based on the value of the
          ;; "--init-directory" initialization flag.
          (list (file-name-concat ceamx-config-dir "emacs")
                (file-name-concat ceamx-config-dir "ceamx")))

  (setopt safe-local-variable-values
          '((eval load-file "./ceamx-dev-loader.el")))
#+end_src

** Enable/disable some commands that are disabled/enabled by default

#+begin_src emacs-lisp
;; Enable these commands
(dolist (cmd '(downcase-region
               list-timers
               narrow-to-page
               narrow-to-region
               upcase-region))
  (put cmd 'disabled nil))

;; Disable these commands
(dolist (cmd '(diary iconify-frame overwrite-mode))
  (put cmd 'disabled t))
#+end_src

** Display the scratch buffer as initial buffer

#+begin_src emacs-lisp
(setq initial-buffer-choice nil
      initial-major-mode 'lisp-interaction-mode
      inhibit-startup-screen t)
(setq initial-scratch-message
      (format ";; This is `%s'.  Use `%s' to evaluate and print results.\n\n"
              'lisp-interaction-mode
              (propertize
               (substitute-command-keys "\\<lisp-interaction-mode-map>\\[eval-print-last-sexp]")
               'face 'help-key-binding)))
#+end_src

** Add the =site-lisp= directory to ~load-path~

#+begin_src emacs-lisp
(add-to-list 'load-path ceamx-site-lisp-dir)
(prependq! load-path (ceamx-subdirs ceamx-site-lisp-dir))
#+end_src

** =site-lisp/on=: Define additional Emacs event hooks

#+begin_src emacs-lisp
(require 'on)
#+end_src

** Initialize package management

Third-party package managers should be configured in init.el directly instead
of within a `require'd file so that they may be re-initialized properly.

*** Bootstrap the package manager

Packages are installed with Elpaca.

Previously, I have used =package.el= or Nixpkgs to manage packages.  See the
[[*Alternatives]] subheading for details
**** Elpaca

#+begin_src emacs-lisp
(defvar elpaca-directory (expand-file-name "elpaca/" ceamx-packages-dir))

;; Avoid aggressive GitHub API rate limiting.
(defvar elpaca-queue-limit 10)
#+end_src

Elpaca needs to know about the Nix build date of the current version
of Emacs to set ~elpaca-core-date~ correctly.  [[https://github.com/progfolio/elpaca/wiki/Usage-with-Nix#retrieving-the-date-via-file-name][From the wiki]]:

#+begin_src emacs-lisp
(require 'ceamx-lib)

;; TODO: this should probably take effect for *any* Nix-built Emacs
;; package, not just on NixOS
(when (ceamx-host-nixos-p)
  (setq elpaca-core-date (list (ceamx-emacs-nix-build-date))))
#+end_src

The installation code only needs to be changed when the Elpaca warns
about an installer version mismatch.

This should be copied verbatim from the Elpaca documentation, with the
definition for ~elpaca-directory~ removed.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.8)
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28)
      (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  (when-let* ((depth (plist-get order :depth)))
                                                   (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

**** Alternatives
***** Nixpkgs

I actually think this is the easiest approach, with the least amount of fiddling
necessary.

But: I would prefer using standalone/portable Emacs-specific package
management so Nix is not a hard requirement.  This is primarily because I
am eagerly anticipating the stable release of the official Emacs for
Android, or at least some established norms/idioms/best-practices for
configuration on Android.

Currently I don't see any clear path towards supporting Nix there, at
least not for a while.  I would prefer to have interoperability between
Emacs for Android and Nix for Android instead of the GNU-signed Termux
app, but AFAIK that would require building both Emacs and Nix for
Android APKs from source to self-sign, which I don't want to do right
now.

Oh yeah, and there's also WSL when I am forced to use Microsoft Windows
for something (like Adobe Acrobat).  Ideally I would use the NixOS on WSL
setup but that's a little bit of a project to integrate into my
wasteland of a system configuration repo.

***** package.el

When I forget what pain feels like, I remind myself by attempting to use
=package.el=.  Soon I find that nothing works in a sane manner, and, the
worst part: it's barely configurable as Emacs should be.  This results in
many nasty hacks.  I do not think =package.el= is ready for daily usage
in my life.

I tried leaning into package.el because:

1. It is built into Emacs, allowing for portability and predictable
   behavior across machines.  Ostensibily.
2. I thought using it would be a matter of "back-to-the-basics"/KISS.

But:

While the documentation seems thorough, I frequently need to dive into
its source code to figure out why some weird behavior is happening.
Several configurations I've referenced apply advices to its internal
functions to hammer package.el into a usable machine.

Somehow, even though both =package.el= and =use-package= are part of
Emacs, they do not work well together.  TODO: add links to issues here

package.el forces the use of =user-custom-file=, with no option to
specify a different file or otherwise change this behavior.  I am
absolutely not interested in committing =custom.el= whenever the state
of my installed packages changes.  I like the idea of a lockfile, as
every package manager should use one (except Nix, which transcends such
barbaric practices entirely), but the current state of this behavior
makes that impossible without resorting to hacks.  TODO: mention the
snippet I recently came across (saved to bookmark manager).

I've left a lot of comments throughout this configuration's explaining
some of =package.el='s unintutive and sometimes downright terrible or
broken behavior.  TODO: resurface these, which were probably deleted.

I imagine one day these issues will be resolved and stabilized in future
versions of Emacs, but until then, I would only be a reluctant user and
find myself still prone to indecision in this field.

On that note, I have since switched back to Elpaca.

*** Run the custom init and startup hooks on ~elpaca-after-init-hook~

#+begin_src emacs-lisp
(add-hook 'elpaca-after-init-hook #'ceamx-after-init-hook)
(add-hook 'elpaca-after-init-hook #'ceamx-emacs-startup-hook)
#+end_src

*** Pretend file-visiting-buffers in the package directory are read-only

#+begin_src emacs-lisp
(require 'ceamx-simple)

(def-hook! ceamx-register-read-only-buffers-h ()
  'ceamx-after-init-hook
  "Use read-only buffers for files in some directories.
The affected directories are listed in `ceamx-buffer-read-only-dirs-list'"

  ;; Define a read-only directory class
  (dir-locals-set-class-variables
   'read-only
   '((nil . ((buffer-read-only . t)))))

  ;; Associate directories with the read-only class
  (dolist (dir ceamx-buffer-read-only-dirs-list)
    (dir-locals-set-directory-class (file-truename dir) 'read-only)))
#+end_src

*** Encourage a ~no-littering~ policy for packages to artifice in the designated areas

- Website :: <https://github.com/emacscollective/no-littering/>

By default, Emacs features and many packages default to dumping their state
files into ~user-emacs-directory~.  This makes sense for the sake of visibility.
However, because E rarely thinks about any of those machine-generated and
non-human-friendly files, they may be effectively designated as clutter.  Ceamx
offloads these sanitation duties to the =no-littering= package because it works
effectively and almost-invisibly.

In some cases, especially for new packages / package features / targets, it may
be necessary to manage such configuration by hand.

Ceamx avoids ~use-package~ here so that:

- ~no-littering~ may be installed and loaded as early as possible
- the time-consuming invocations of ~elpaca-wait~ should be kept to the absolute minimum

#+begin_src emacs-lisp
(require 'ceamx-paths)

;; These must be set prior to package load.
(setq no-littering-etc-directory ceamx-etc-dir)
(setq no-littering-var-directory ceamx-var-dir)

(elpaca no-littering
  (require 'no-littering))
#+end_src

*** Install the latest versions of some builtin features and their dependencies

Installing the latest development versions of ~eglot~ and ~magit~ (for example)
comes with the significant caveat that their dependencies often track the latest
versions of builtin Emacs libraries.  Those can be installed via GNU ELPA.

Since core libraries like ~seq~ are often dependencies of many other packages or
otherwise loaded immediately (like ~eldoc~), installation and activation of the
newer versions needs to happen upfront to avoid version conflicts and
mismatches.  For example, Ceamx does not want some package loaded earlier in init to
think it is using the builtin version of ~seq~, while a package loaded later in
init uses a differnt version.  E is not sure how realistic such a scenario might
be, or whether it would truly pose a problem, but the point is that we should
aim for consistency.

Oftentimes, these builtins must be unloaded before loading the newer version.
This applies especially to core libraries like ~seq~ or the enabled-by-default
~global-eldoc-mode~ provided by ~eldoc~, but not ~jsonrpc~, since its
functionality is specific to more niche features like inter-process
communication in the case of ~eglot~.

A feature must only be unloaded once, *before* loading the version installed by
Elpaca.  Normally, that is not an issue because the init file is only loaded
once on session startup.  But upon re-loading the init file inside a running
session, the Elpaca-installed version will become unloaded.  To prevent that,
the unloading should happen only once -- during session startup -- hence the
check for a non-nil ~after-init-time~.

#+begin_verse
I don't understand why the Elpaca-installed feature\/package only seems to be
loaded during the initial session startup?  Unless the unloading happens
conditionally based on ~after-init-time~ as described above, every time the init
file is reloaded and ~elpaca-process-queues~ runs in
~+auto-tangle-reload-init-h~, I get a bunch of errors (not warnings!) about
~eglot~ and ~org~ as missing dependencies.
#+end_verse

**** Install the latest version of ~seq~ builtin library, carefully

~magit~ requires a more recent version of ~seq~ than the version included in
Emacs 29.

Requires special care because unloading it can make other libraries freak out.
<https://github.com/progfolio/elpaca/issues/216#issuecomment-1868444883>

#+begin_src emacs-lisp
(defun +elpaca-unload-seq (e)
  "Unload the builtin version of `seq' and continue the `elpaca' build E."
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

(defun +elpaca-seq-build-steps ()
  "Update the `elpaca' build-steps to activate the latest version of the builtin `seq' package."
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps
                     elpaca-build-steps))
          (list '+elpaca-unload-seq 'elpaca--activate-package)))

(elpaca `(seq :build ,(+elpaca-seq-build-steps)))
#+end_src

**** Install the latest version of the builtin ~jsonrpc~ library

Required by (and originally extracted from) ~eglot~.

#+begin_src emacs-lisp
(elpaca jsonrpc
  (require 'jsonrpc))
#+end_src

**** Install the latest version of the ~eldoc~ builtin library, carefully

Required by ~eglot~.

~eldoc~ requires a delicate workaround to avoid catastrophy
<https://github.com/progfolio/elpaca/issues/236#issuecomment-1879838229>


#+begin_src emacs-lisp
(unless after-init-time
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (defvar global-eldoc-mode nil))

(elpaca eldoc
  (require 'eldoc)
  (global-eldoc-mode))
#+end_src

**** Install the latest version of the builtin ~eglot~ package

#+begin_src emacs-lisp
(unless after-init-time
  (when (featurep 'eglot)
    (unload-feature 'eglot)))

(elpaca eglot)
#+end_src

**** Install the latest version of the builtin ~flymake~ package

#+begin_src emacs-lisp
(unless after-init-time
  (when (featurep 'flymake)
    (unload-feature 'flymake)))

(elpaca flymake)
#+end_src

**** Install the latest version of Org-Mode

#+begin_src emacs-lisp
(unless after-init-time
  (when (featurep 'org)
    (unload-feature 'org)))

(elpaca (org :autoloads "org-loaddefs.el"))
#+end_src

*** Install the latest version of ~use-package~

#+begin_src emacs-lisp
(elpaca use-package)
#+end_src

*** ~elpaca-use-package~: integrate ~elpaca~ and ~use-package~

#+begin_src emacs-lisp
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
#+end_src

*** Elpaca-Wait № 1: ~no-littering~ + ~use-package~ :wait:

Reason:

- Continuing otherwise will result in race conditions on the
  definition of storage paths.
- ~use-package~ must be loaded for byte-compilation checks

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

*** Configure ~use-package~ behavior

#+begin_src emacs-lisp
(setopt use-package-always-ensure t)
(setopt use-package-expand-minimally t)

(when (bound-and-true-p init-file-debug)
  (require 'use-package)
  (setopt use-package-expand-minimally nil)
  (setopt use-package-verbose t)
  (setopt use-package-compute-statistics t))
#+end_src

*** ~blackout~: adjust mode-line lighters :modeline:

- Use-Package keyword :: =:blackout=

#+begin_src emacs-lisp
(use-package blackout
  :ensure (:wait t)
  :demand t)
#+end_src

*** Install and configure =setup.el=

#+begin_src emacs-lisp
(elpaca setup
  (require 'setup))

(elpaca-wait)
#+end_src

Add Elpaca support to =setup.el=:

#+begin_src emacs-lisp
(defun +setup-wrap-to-install-elpaca-package (body _name)
  "Wrap BODY in an `elpaca' block when `:ensure' is provided."
  (if (assq 'ensure setup-attributes)
      `(elpaca ,(cdr (assq 'ensure setup-attributes))
         ,@(macroexp-unprogn body))
    body))

(add-to-list 'setup-modifier-list #'+setup-wrap-to-install-elpaca-package)

(setup-define :ensure
  (lambda (order &rest recipe)
    (push (cond
           ((eq order t) `(ensure . ,(setup-get 'feature)))
           ((eq order nil) `(ensure . nil))
           (`(ensure . (,order ,@recipe))))
          setup-attributes)
    ;; If the macro returned non-nil, it would try to insert the
    ;; modified list returned by `push'.  As this value usually cannot
    ;; be evaluated, it is better to return nil (which the byte
    ;; compiler will optimize away).
    nil)
  :documentation "Install ORDER with the `elpaca' package manager.
The ORDER can be used to deduce the feature context."
  :shorthand #'cadr)
#+end_src

Add the =:autoload= contextual macro:

#+begin_src emacs-lisp
;; <https://www.emacswiki.org/emacs/SetupEl#h5o-7>
(setup-define :autoload
  (lambda (func)
    (let ((fn (if (memq (car-safe func) '(quote function))
                  (cadr func)
                func)))
      `(unless (fboundp (quote ,fn))
         (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
  :documentation "Autoload COMMAND if not already bound."
  :debug '(form)
  :repeatable t
  :signature '(FUNC ...))
#+end_src

Add the =:load-after= contextual macro:

#+begin_src emacs-lisp
(setup-define :load-after
    (lambda (&rest features)
      (let ((body `(require ',(setup-get 'feature))))
        (dolist (feature (nreverse features))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
    :documentation "Load the current feature after FEATURES.")
#+end_src

** ~gcmh~: manage running garbage collection on idle :package:perf:

- Website :: <https://akrl.sdf.org/>
- Code :: <https://gitlab.com/koral/gcmh>

During normal use, the GC threshold will be set to a high value.
When idle, GC will be triggered with a low threshold.

#+begin_src emacs-lisp
(package! gcmh
  (blackout 'gcmh-mode)
  (add-hook 'ceamx-emacs-startup-hook #'gcmh-mode))
#+end_src

*** Background and Rationale

While browsing many other user configs, I have noticed several slightly
different approaches to managing garbage collection, especially with the
intent of reducing startup time.

One approach is to offload this configuration to ~gcmh~, safely hiding the
details away.  =gcmh= is written by Andrea Corallo, one of the Emacs
co-maintainers, also known for introducing =gccemacs=.

As a direct response to a Reddit thread sharing =gcmh=, Eli Zaretskii recommends
caution in this field.  Corallo also weighs in.  Basically, Zaretskii recommends
not overthinking things:

[[https://old.reddit.com/r/emacs/comments/bg85qm/garbage_collector_magic_hack/eln27qh/][eli-zaretskii
comments on Garbage Collector Magic Hack]]:

#+begin_quote
My problem with the advice to make the GC threshold at such high values
begins the moment you start publishing your personal tweaks as general
advice to others. IMO, this requires at least a lot of caveats, because
your advice is likely to be followed by people whose workflows and
system configurations are very different. Simply put, you might get
others in trouble by promoting your personal hacks as "magic".
#+end_quote

From what I gather, =gcmh= has evolved a bit, so the previous criticism
no longer applies.

And, again, with more detail about fiddling carelessly with
=gc-cons-threshold=:

[[https://old.reddit.com/r/emacs/comments/yzb77m/an_easy_trick_i_found_to_improve_emacs_startup/iwz1vek/][eli-zaretskii
comments on An easy trick I found to improve Emacs start-up time]]

#+begin_quote
The GC threshold setting after init is too high, IMNSHO, and its value
seems arbitrary.

If the OP thinks that Emacs will GC as soon as it allocates 100 MiB,
then that's a grave mistake. What really happens is the first time Emacs
/considers doing GC/, if at that time more than 100 MiB have been
allocated for Lisp objects, Emacs will GC. And since neither Lisp
programs nor the user have /any/ control on how soon Emacs will decide
to check whether GC is needed, the actual amount of memory by the time
Emacs checks could be many times the value of the threshold.

My advice is to spend some time measuring the effect of increased GC
threshold on operations that you care about and that take a long enough
time to annoy, and use the lowest threshold value which produces a
tangible improvement. Start with the default value, then enlarge it by a
factor of 2 until you see only insignificant speedups. I would not
expect the value you arrive at to be as high as 100 MiB.
#+end_quote

** Install utility libraries

#+begin_src emacs-lisp
(package! llama) ;  `##' lambda shorthand
(package! f)
(package! transient
  (require 'transient)
  (after! transient
    (keymap-set transient-map "<escape>" #'transient-quit-one)))
#+end_src

* =init.el=: Environment
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Disable unnecessary OS-specific command-line options :macos:

#+begin_src emacs-lisp
(unless (ceamx-host-macos-p)
  (setq command-line-ns-option-alist nil))

(unless (ceamx-host-gnu-linux-p)
  (setq command-line-x-option-alist nil))
#+end_src

** ~exec-path-from-shell~: Inherit environment variables from variable environments :package:

#+begin_src emacs-lisp
(package! exec-path-from-shell
  (require 'exec-path-from-shell)
  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH" "LSP_USE_PLISTS"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))
#+end_src

** ~inheritenv~: Make temporary buffers inherit buffer-local environment variables :package:

- website :: <https://github.com/purcell/inheritenv>

#+begin_src emacs-lisp
(package! inheritenv
  (with-eval-after-load 'exec-path-from-shell
    (require 'inheritenv)))
#+end_src

** ~with-editor~: Ensure shell/term modes use session as =$EDITOR= :package:

#+begin_src emacs-lisp
(package! with-editor
  (keymap-global-set "<remap> <async-shell-command>"
                     #'with-editor-async-shell-command)
  (keymap-global-set "<remap> <shell-command>"
                     #'with-editor-shell-command)

  (add-hook 'shell-mode-hook #'with-editor-export-editor)
  (add-hook 'eshell-mode-hook #'with-editor-export-editor)
  (add-hook 'term-exec-hook #'with-editor-export-editor)

  ;; Make sure that `eat' does not break `magit-commit'.
  ;; <https://codeberg.org/akib/emacs-eat/issues/55#issuecomment-871388>
  (with-eval-after-load 'eat
    (add-hook 'eat-mode-hook #'shell-command-with-editor-mode)))
#+end_src

** ~envrc~: Direnv integration :package:

- src :: <https://github.com/purcell/envrc>
- upstream :: <https://github.com/direnv/direnv>

Q: How does this differ from `direnv.el`?

<https://github.com/wbolster/emacs-direnv> repeatedly changes the global
Emacs environment, based on tracking what buffer you're working on.

Instead, `envrc.el` simply sets and stores the right environment in each
buffer, as a buffer-local variable.

#+begin_src emacs-lisp
(package! envrc
  (with-eval-after-load 'exec-path-from-shell
    (envrc-global-mode)))
#+end_src

** Elpaca-Wait № 3 :wait:

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

** TRAMP Support

#+begin_src emacs-lisp
(setopt tramp-default-method "ssh")
(setopt tramp-default-remote-shell "/bin/bash")
(setopt tramp-connection-timeout (* 60 10))
;; Do not auto-save remote files. Note the reversed logic.
(setopt remote-file-name-inhibit-auto-save t)                 ; Emacs 30
(setopt remote-file-name-inhibit-auto-save-visited t)
;; Avoid expensive operations on remote files.
(setopt remote-file-name-inhibit-delete-by-moving-to-trash t) ; Emacs 30

(after! tramp
  (dolist (path '("~/.local/bin"
                  "~/.nix-profile/bin"
                  "~/.local/state/nix/profiles/profile/bin/"
                  "/nix/var/nix/profiles/default/bin"
                  "/run/current-system/sw/bin"))
    (add-to-list 'tramp-remote-path path)))
#+end_src

** Input languages

#+begin_src emacs-lisp
(set-language-environment "UTF-8")

;; `set-language-environment' also presumptively sets `default-input-method'.
(setopt default-input-method nil)
#+end_src

#+begin_src emacs-lisp
;; Disable bidirectional text scanning
;; (setq-default bidi-display-reordering 'left-to-right)
;; (setq-default bidi-paragraph-direction 'left-to-right)
;; (setq bidi-inhibit-bpa t)
#+end_src

** Mouse support

#+begin_src emacs-lisp
(setopt mouse-yank-at-point t)

;; Avoid collision of mouse with point
(mouse-avoidance-mode 'exile)
#+end_src

Support scrolling with the mouse wheel or trackpad gestures within
non-graphical frames.  Mouse support is available by default in
graphical frames.

#+begin_src emacs-lisp
(unless (display-graphic-p)

  ;; Basic mouse support e.g. click and drag
  (xterm-mouse-mode 1)

  ;; By default, `scroll-down' and `scroll-up' scroll by a huge amount.
  (eval-and-compile
    (defun ceamx/scroll-down ()
      "Scroll down one line."
      (interactive)
      (scroll-down 1))

    (defun ceamx/scroll-up ()
      "Scroll up one line."
      (interactive)
      (scroll-up 1)))

  (global-set-key [mouse-4] #'ceamx/scroll-down)
  (global-set-key [mouse-5] #'ceamx/scroll-up))
#+end_src

** Load site-specific configuration, to be ignored by version control

#+begin_src emacs-lisp
(require 'site-config (file-name-concat user-emacs-directory "site-config") t)
#+end_src

* User Interface & Appearance :: =ui=
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-ui.el
:END:

** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-ui.el :comments no
;; -*- lexical-binding: t;  -*-

(require 'ceamx-lib)
#+end_src

** Configure cursor appearance

#+begin_src emacs-lisp
(package! cursory
  (require 'cursory)

  (def-hook! ceamx-init-theme-cursory-h ()
    'ceamx-after-init-hook
    "Enable `cursory-mode' and load the latest preset."
    (cursory-mode 1)
    (cursory-set-preset (or (cursory-restore-latest-preset) 'box)))

  (setopt cursory-latest-state-file
          (expand-file-name "cursory-latest-state.eld" ceamx-var-dir))

  (setopt cursory-presets
          '((box
             :blink-cursor-interval 0.8)
            (box-no-blink
             :blink-cursor-mode -1)
            (bar
             :cursor-type (bar . 2)
             :blink-cursor-interval 0.8)
            (bar-no-other-window
             :inherit bar
             :cursor-in-non-selected-windows nil)
            (bar-no-blink
             :cursor-type (bar . 2)
             :blink-cursor-mode -1)
            (t
             :cursor-type box
             :cursor-in-non-selected-windows hollow
             :blink-cursor-mode 1
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.2
             :blink-cursor-delay 0.2))))
#+end_src

** Customize the Customization buffers and menus

#+begin_src emacs-lisp
(setopt custom-theme-allow-multiple-selections nil)

(setopt custom-unlispify-menu-entries nil)
(setopt custom-unlispify-tag-names nil)
(setopt custom-unlispify-remove-prefixes nil)

(add-hook 'Custom-mode-hook #'custom-toggle-hide-all-widgets nil t)
#+end_src

** Load common interface toolkits

Required as dependencies for multiple packages, including some
packages (like ~nix-mode~) who don't properly declare their
dependencies.

*** =grid=: textual data table presentation

- Source :: [[https://github.com/ichernyshovvv/grid.el][ichernyshovvv/grid.el]]
- Retrieved :: [2024-06-07 Fri 11:45]

#+begin_quote
This library allows you to put text data into boxes and align them horizontally,
applying margin, padding, borders.
#+end_quote

#+begin_src emacs-lisp
(package! (grid :host github :repo "ichernyshovvv/grid.el"))
#+end_src

*** =hydra=

- Documentation :: <https://github.com/jerrypnz/major-mode-hydra.el/#pretty-hydra>

#+begin_src emacs-lisp
(package! hydra)
(package! pretty-hydra)
#+end_src

*** =symbol-overlay= :: highlight symbols with keymap-enabled overlays

#+begin_src emacs-lisp
(package! symbol-overlay)
#+end_src

** Customize the ~ceamx-ui~ library features

#+begin_src emacs-lisp
(use-feature! ceamx-ui
  :demand t
  :config
  (setopt ceamx-ui-theme-light
          (when (eq 'modus ceamx-ui-theme-family)
            'modus-operandi))
  (setopt ceamx-ui-theme-dark
          (when (eq 'modus ceamx-ui-theme-family)
            'modus-vivendi)))
#+end_src

** Consider all themes "safe"

#+begin_src emacs-lisp
(setopt custom-safe-themes t)
#+end_src

** Add a custom hook ~ceamx-after-enable-theme-hook~ to run after enabling a theme

- Source :: <https://github.com/jdtsmith/kind-icon/issues/34#issuecomment-1668560185>

#+begin_src emacs-lisp
(defvar ceamx-after-enable-theme-hook nil)

(defun ceamx-after-enable-theme (&rest _args)
  "Hook to run after enabling theme."
  (run-hooks 'ceamx-after-enable-theme-hook))

(advice-add 'enable-theme :after #'ceamx-after-enable-theme)
#+end_src

** Modus Themes :package:

- Website :: <https://protesilaos.com/modus-themes/>

#+begin_src emacs-lisp
(package! modus-themes
  (require 'modus-themes)

  (setopt modus-themes-italic-constructs t
          modus-themes-bold-constructs t
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui nil)
  (setopt modus-themes-to-toggle '(modus-operandi modus-vivendi))
  (setopt modus-themes-disable-other-themes t)
  (setopt modus-themes-headings
          '((agenda-structure . (variable-pitch light 2.2))
            (agenda-date . (variable-pitch regular 1.3))
            (t . (regular 1.1)))))
#+end_src

** Ef-Themes :package:

- Website :: <https://protesilaos.com/emacs/ef-themes>

#+begin_src emacs-lisp
(package! ef-themes
  (require 'ef-themes)

  (setopt ef-themes-to-toggle '(ef-night ef-frost)
          ef-themes-mixed-fonts t
          ef-themes-variable-pitch-ui nil))
#+end_src

** Set approximate stomping coordinates for hyper-astronomic relativity calculations

#+begin_src emacs-lisp
(require 'cal-dst)

(setopt calendar-latitude 39.968)
(setopt calendar-longitude -75.133)
#+end_src

** ~circadian~ :: theme phasing based on sunrise/sunset time :package:

#+begin_src emacs-lisp
(package! circadian
  (require 'ceamx-ui)

  (if (eq 'solar ceamx-ui-theme-circadian-interval)
      (progn
        (add-hook 'ceamx-after-init-hook #'circadian-setup)

        (setopt circadian-themes `((:sunrise . ,ceamx-ui-theme-light)
                                   (:sunset . ,ceamx-ui-theme-dark))))
    (add-hook 'ceamx-after-init-hook
              (lambda ()
                (if (ceamx-ui-desktop-dark-theme-p)
                    (ceamx-ui/load-dark-theme)
                  (ceamx-ui/load-light-theme))))))

;; FIXME
;; (after! circadian
;;   (def-hook! +circadian-after-load-theme-set-system-theme-h (theme)
;;     'circadian-after-load-theme-hook
;;     "Set the desktop environment theme based on THEME polarity."
;;     (cond
;;      ((memq theme ceamx-ui-dark-themes-list)
;;       (ceamx-ui/gsettings-dark-theme))
;;      ((memq theme ceamx-ui-light-themes-list)
;;       (ceamx-ui/gsettings-light-theme))
;;      (t nil))))
#+end_src

** Elpaca-Wait № 4: ensure availability of themes for integration :wait:

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

** ~avy~ :: can do anything

+ Package :: <https://github.com/abo-abo/avy>
+ Article :: <https://karthinks.com/software/avy-can-do-anything/>

#+begin_src emacs-lisp
(package! avy
  (defer! 3
    (require 'avy)))

(after! avy
  (setopt avy-style 'at-full)
  (setopt avy-all-windows t)
  (setopt avy-case-fold-search t)

  ;; Prevent conflicts with themes.
  (setopt avy-background nil)

  ;; Anything lower feels unusable.
  (setopt avy-timeout-seconds 0.25))
#+end_src

** Highlight current line in programming modes

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hl-line-mode)

(after! hl-line
  ;; Disable line highlight in unfocused windows.
  (setopt hl-line-sticky-flag nil))
#+end_src

** ~lin~ :: improve line-highlighting for major-modes orientated around line selection

#+begin_src emacs-lisp
(package! lin
  (add-hook 'ceamx-after-init-hook #'lin-global-mode))
#+end_src

** ~pulsar~ :: pulse current line after function invocations

#+begin_src emacs-lisp
(package! pulsar
  (add-hook 'ceamx-after-init-hook #'pulsar-global-mode)
  (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line))

(after! pulsar
  (setopt pulsar-pulse t
          pulsar-delay 0.055
          pulsar-iterations 10)
  (setopt pulsar-face 'pulsar-magenta
          pulsar-highlight-face 'pulsar-cyan)

  (dolist (fn '(pulsar-pulse-line-red
                pulsar-recenter-top
                pulsar-reveal-entry))
    (add-hook 'next-error-hook #'fn)))
#+end_src

** Window highlighting

#+begin_src emacs-lisp
(setopt highlight-nonselected-windows nil)
#+end_src

** Hide frame decorations

#+begin_src emacs-lisp
(unless (ceamx-host-macos-p)
  (add-to-list 'default-frame-alist '(undecorated . t)))

(when (ceamx-host-macos-p)
  ;; `undecorated-round' is macOS-specific.
  (add-to-list 'default-frame-alist '(undecorated-round . t))

  ;; GUI menu bar is necessary otherwise Emacs will be treated as a
  ;; non-application OS window (e.g. no focus capture).
  ;; <https://github.com/doomemacs/doomemacs/blob/d657be1744a1481dc4646d0b62d5ee1d3e75d1d8/lisp/doom-start.el#L118-L128>
  (def-hook! ceamx-frame--maybe-restore-gui-menu-bar-h (&optional frame)
    '(after-make-frame-functions window-setup-hook)
    "TODO: Provide source for this approach (Doom?), and why it does what it does."
    (when-let (frame (or frame (selected-frame)))
      (when (display-graphic-p frame)
        (set-frame-parameter frame 'menu-bar-lines 1))))

  ;; Stop C-z from minimizing windows.
  (keymap-global-unset "C-z" t))
#+end_src

** ~spacious-padding~ :: a comfortable layout density

#+begin_src emacs-lisp
(package! spacious-padding
  (add-hook 'ceamx-after-init-hook #'spacious-padding-mode))

(after! spacious-padding
  (setopt spacious-padding-widths
          '( :internal-border-width 30
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 30
             :scroll-bar-width 8
             :left-fringe-width 20
             :right-fringe-width 20))

  (setopt spacious-padding-subtle-mode-line
          `( :mode-line-active default
             :mode-line-inactive window-divider)))
#+end_src

** ~olivetti~ :: "distraction-free" editing

- Package :: <https://github.com/rnkn/olivetti>

#+begin_src emacs-lisp
(package! olivetti
  (keymap-set ctl-x-x-map "o" #'olivetti-mode))

(after! olivetti
  (setopt olivetti-body-width 0.7
          olivetti-minimum-body-width 80
          olivetti-recall-visual-line-mode-entry-state t))
#+end_src

** ~logos~ :: a simple focus mode with page breaks or outlines :present:

#+begin_src emacs-lisp
(package! logos
  (after! logos
    (setopt logos-outlines-are-pages t)
    (setopt logos-outline-regexp-alist
            `((emacs-lisp-mode . ,(format "\\(^;;;+ \\|%s\\)" logos-page-delimiter))
              (org-mode . ,(format "\\(^\\*+ +\\|^-\\{5\\}$\\|%s\\)" logos-page-delimiter))
              (markdown-mode . ,(format "\\(^\\#+ +\\|^[*-]\\{5\\}$\\|^\\* \\* \\*$\\|%s\\)" logos-page-delimiter))
              (conf-toml-mode . "^\\[")))

    ;; These apply buffer-locally when `logos-focus-mode' is enabled.
    (setq-default logos-hide-cursor t
                  logos-hide-mode-line t
                  logos-hide-header-line t
                  logos-hide-buffer-boundaries t
                  logos-hide-fringe t
                  logos-variable-pitch nil
                  logos-buffer-read-only nil
                  logos-scroll-lock nil
                  logos-olivetti t)

    (add-hook 'enable-theme-functions #'logos-update-fringe-in-buffers)

    (def-hook! ceamx-essentials-logos-recenter-top-h ()
      '(logos-page-motion-hook)
      "Place point at the top when changing pages in non-`prog-mode' modes."
      (unless (derived-mode-p 'prog-mode)
        ;; NOTE: '0' value will recenter at the absolute top.
        (recenter 1)))))
#+end_src

** ~moc~ :: "Master of Ceremonies" presentation utilities :present:

+ Package :: <https://github.com/positron-solutions/moc/>

#+begin_src emacs-lisp
(package! (moc :host github :repo "positron-solutions/moc"))
#+end_src

** Allow restoring deleted frames

#+begin_src emacs-lisp
(undelete-frame-mode 1)
#+end_src
** Customize menu bar appearance :menubar:

Disable the menu bar by default:

#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

** Customize tab bar appearance :tabs:

Enable the tab bar:

#+begin_src emacs-lisp
(tab-bar-mode 1)
#+end_src

*** Configure tab bar appearance and behavior

#+begin_src emacs-lisp
(setopt tab-bar-auto-width t
        tab-bar-auto-width-max '((80) 10))
#+end_src

** Typography :font:
*** Text rendering and scaling

#+begin_src emacs-lisp
(setq x-underline-at-descent-line nil)

(setq-default text-scale-remap-header-line t)
#+end_src

*** ~fontaine~ :: pre-configure font presets

<https://protesilaos.com/emacs/fontaine>

TIP: You can test out alterations quickly with, for example:
     (internal-set-lisp-face-attribute 'default :weight 'semilight)

#+begin_src emacs-lisp
(package! fontaine
  (when (display-graphic-p)
    (def-hook! ceamx-init-theme-activate-fontaine-h ()
      'ceamx-after-init-hook
      "Activate `fontaine-mode' with the last-saved preset.
If there is no previous preset state to load, fall back to the
\"regular\" preset."
      (fontaine-mode)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))

(after! fontaine
  (setopt fontaine-latest-state-file
          (expand-file-name "fontaine-latest-state.eld" ceamx-var-dir))

  ;; For some reason I do not yet understand, according to some
  ;; hearsay, font sizes best scale in multiples of 3-point
  ;; increments.
  (setopt fontaine-presets
          `((tiny
             :bold-weight medium
             :default-height ,(pcase (system-name)
                               (_ 78))
             :default-weight ,(pcase (system-name)
                               (_ 'semilight)))

            (small
             :bold-weight semibold
             :default-height ,(pcase (system-name)
                               (_ 90))
             :default-weight ,(pcase (system-name)
                               (_ 'regular)))

            (regular
             :bold-weight semibold)

            (medium
             :default-height ,(pcase (system-name)
                               ("boschic" 124)
                               (_ 120)))

            (large
             :default-height ,(pcase (system-name)
                               (_ 144))
             :default-weight semilight)

            (xlarge
             :default-height ,(pcase (system-name)
                               (_ 156)))

            (big-mclarge-huge
             :default-weight semilight
             :default-height ,(pcase (system-name)
                               (_ 180))
             :bold-weight extrabold)

            (t
             :default-family "Iosevka Comfy"
             :default-weight regular
             :default-height ,(pcase (system-name)
                               ("tuuvok" 102)
                               (_ 105))

             :fixed-pitch-family "Iosevka Comfy"
             :fixed-pitch-weight nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Iosevka Comfy Motion Duo"
             :variable-pitch-weight nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil
             :mode-line-active-weight nil
             :mode-line-active-height 0.9

             :mode-line-inactive-family nil
             :mode-line-inactive-weight nil
             :mode-line-inactive-height 0.9

             :header-line-family nil
             :header-line-weight nil
             :header-line-height 0.9

             :line-number-family nil
             :line-number-weight nil
             :line-number-height 0.9

             :tab-bar-family nil
             :tab-bar-weight nil
             :tab-bar-height 1.0

             :bold-family nil
             :bold-weight bold

             :italic-family nil
             :italic-weight nil
             :italic-slant italic

             :line-spacing nil))))
#+end_src

*** ~ligature.el~ :: improved ligature support

+ Package :: <https://github.com/mickeynp/ligature.el>

A better implementation of ligature support than the builtin
~prettify-symbols-mode~.

<https://old.reddit.com/r/emacs/comments/keji66/what_is_bad_about_prettifysymbolsmode/>

#+begin_src emacs-lisp
(package! ligature
  (when (display-graphic-p)
    (after! fontaine
      (global-ligature-mode 1))))

(after! ligature
  ;; Enable all Iosevka ligatures in programming modes.
  ;; <https://github.com/mickeynp/ligature.el/wiki#iosevka>
  (ligature-set-ligatures
   'prog-mode
   '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->"
     "<---->" "<!--" "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">="
     "<=>" "<==>" "<===>" "<====>" "<!---" "<~~" "<~" "~>" "~~>"
     "::" ":::" "==" "!=" "===" "!==" ":=" ":-" ":+" "<*" "<*>"
     "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++")))
#+end_src

*** ~show-font~ :: a tool to preview fonts

+ Package :: <https://protesilaos.com/emacs/show-font>

  #+begin_src emacs-lisp
(when (display-graphic-p)
  (package! show-font)

  (after! show-font
    (setopt show-font-pangram 'ceamx)
    (setopt show-font-character-sample
            "
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
0123456789   !@#$¢%^&*~|
`'\"‘’“”.,;:  ()[]{}—-_+=<>

()[]{}<>«»‹› 6bB8&0ODdoa 1tiIlL|\/
!ij c¢ 5$Ss 7Z2z 9gqp nmMNNMW uvvwWuuw
x×X .,·°;:¡!¿?`'‘’   ÄAÃÀ TODO
")))
#+end_src

** Iconography & Symbolisms :icons:
*** Provide common dependency: ~nerd-icons~ :package:

#+begin_src emacs-lisp
(package! nerd-icons
  (require 'nerd-icons))

(after! nerd-icons
  (setopt nerd-icons-font-family "Symbols Nerd Font Mono"))
#+end_src

*** Provide common dependency: ~svg-lib~ :package:

#+begin_src emacs-lisp
(package! svg-lib)
#+end_src

*** ~page-break-lines~ :: improve appearance of form feed characters :package:

- docs :: <https://github.com/purcell/page-break-lines/blob/master/README.md>

#+begin_src emacs-lisp
(package! page-break-lines
  (add-hook 'ceamx-after-init-hook #'global-page-break-lines-mode))
#+end_src

*** TODO ~svg-tag-mode~: Decorate buffer elements with SVG :package:
:PROPERTIES:
:header-args: :tangle no
:END:

- Source :: <https://github.com/Icy-Thought/emacs.d/blob/main/config.org#svg-tag-decorating-buffers-with-svg>

#+begin_src emacs-lisp
(package! svg-tag-mode
  (add-hook 'prog-mode-hook #'svg-tag-mode)
  (add-hook 'text-mode-hook #'svg-tag-mode))
#+end_src

** Modeline :modeline:

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)

(setopt display-time-24hr-format t)
#+end_src

*** ~minions~ :: minimize many mode-line minor-modes

#+begin_src emacs-lisp
(package! minions
  (add-hook 'ceamx-after-init-hook #'minions-mode))
#+end_src

*** ~keycast~ :: show current command and its binding :present:

- Website :: <https://github.com/tarsius/keycast>

Supports display in the mode-line, header-line, tab-bar, and as
messages in a dedicated frame.

NOTE: Incompatible with kitchen-sink modeline packages like
=doom-modeline= and =telephone-line=.

#+begin_src emacs-lisp
(after! keycast
  (dolist (input '(self-insert-command org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil))))
#+end_src

** Provide the ~ceamx-init-ui~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-ui.el :comments no
(provide 'ceamx-init-ui)
;;; ceamx-init-ui.el ends here
#+end_src

* Essentials :: =essentials=
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-essentials.el
:END:

** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-essentials.el :comments no
;; -*- lexical-binding: t; -*-
#+end_src

** Baseline configurations

#+begin_src emacs-lisp
;; Increase number of messages saved in log.
(setopt message-log-max 10000)

;; "A second, case-insensitive pass over `auto-mode-alist' is time wasted."
(setopt auto-mode-case-fold nil)

;; Prevent Emacs from pinging domain names unexpectedly.
(setopt ffap-machine-p-known 'reject)

(define-keymap :keymap (current-global-map)
  "M-c" #'capitalize-dwim
  "M-f" #'forward-word
  "M-F" #'forward-symbol
  "M-l" #'downcase-dwim
  "M-o" #'delete-blank-lines
  "M-Q" #'repunctuate-sentences
  "M-u" #'upcase-dwim
  "M-z" #'zap-up-to-char              ; orig: `zap-to-char'
  "M-=" #'count-words
  "M-SPC" #'cycle-spacing

  "C-h F" #'apropos-function
  "C-h L" #'apropos-library
  "C-h U" #'apropos-user-option
  "C-h V" #'apropos-variable

  ;; TODO: move to window config
  "C-x O" #'next-multiframe-window

  ;; Minimizing frames is the job of the window manager.
  "C-x C-z" nil)

;; Keymap for buffers
;; TODO: copy some of these to `ceamx-toggle-prefix'
(define-keymap :keymap ctl-x-x-map
  "f" #'follow-mode
  "l" #'visual-line-mode
  "r" #'rename-uniquely)


#+end_src

** ~ceamx-simple~: Simple & common commands

#+begin_src emacs-lisp
(use-feature! ceamx-simple
  :demand t
  :config
  (define-keymap :keymap (current-global-map)
    "C-x k" #'ceamx-simple/kill-current-buffer ; orig: `kill-buffer'
    "C-x K" #'kill-buffer

    ;; FIXME: move defun to `ceamx-simple'
    "M-DEL" #'ceamx/backward-kill-word

    "C-M-SPC" #'ceamx-simple/mark-sexp

    ;; Commands for lines
    ;; TODO: currently `easy-kill'
    ;; "M-w" #'ceamx-simple/kill-ring-save
    "M-k" #'ceamx-simple/kill-line-backward
    ;; TODO: currently `avy-goto-char-timer'
    ;; "M-j" #'delete-indentation
    "C-S-d" #'ceamx-simple/duplicate-line-or-region
    ;; TODO: redundant with `easy-kill'
    "C-S-w" #'ceamx-simple/copy-line
    "C-S-y" #'ceamx-simple/yank-replace-line-or-region
    ;; FIXME: these have weird quirks esp. in folded org-mode buffers
    ;; "C-v" #'ceamx-simple/multi-line-below ; orig: `scroll-up-command'
    ;; "<next>" #'ceamx-simple/multi-line-below ; orig: `scroll-up-command'
    ;; "M-v" #'ceamx-simple/multi-line-above ; orig: `scroll-down-command'
    ;; "<prior>" #'ceamx-simple/multi-line-above ; orig: `scroll-down-command'
    "C-RET" #'ceamx-simple/new-line-below
    "C-S-RET" #'ceamx-simple/new-line-above

    ;; Commands for text insertion or manipulation
    "C-<" #'ceamx-simple/escape-url-dwim
    "M-Z" #'ceamx-simple/zap-to-char-backward

    ;; Commands for buffers
    "M-s b" #'ceamx-simple/buffers-major-mode
    "M-s v" #'ceamx-simple/buffers-vc-root)

  (define-keymap :keymap prog-mode-map
    "M-RET" #'ceamx-simple/continue-comment)

  (keymap-substitute (current-global-map) #'default-indent-new-line #'ceamx-simple/continue-comment))
#+end_src

** Configure sane window-scrolling behavior

#+begin_src emacs-lisp
(use-feature! window
  :bind
  ("C-x <" . scroll-right)
  ("C-x >" . scroll-left)
  ("<wheel-left>" . scroll-left)
  ("<wheel-right>" . scroll-right)

  :config
  ;; Available cycle positions for `recenter-top-bottom'.
  ;; (setopt recenter-positions '(top middle bottom))
  (setopt recenter-positions '(middle top bottom)) ; default

  ;; Horizontally-scroll only the current line when point column moves
  ;; beyond window boundaries.
  (setopt auto-hscroll-mode 'current-line)

  (setopt scroll-error-top-bottom t
          ;; Prevent unwanted horizontal scrolling upon navigation.
          scroll-preserve-screen-position t
          scroll-conservatively 10000)

  ;; Add a margin when scrolling vertically (or don't).
  (setq-default scroll-margin 1))
#+end_src

** Auto-revert buffers

#+begin_src emacs-lisp
(use-feature! autorevert
  :hook (ceamx-after-init . global-auto-revert-mode)
  :config
  ;; Ensure the non-file-visiting buffers are also auto-reverted as needed.  For
  ;; example, this will cause Dired to refresh a file list when the directory
  ;; contents have changed.
  (setopt global-auto-revert-non-file-buffers t)

  (setopt auto-revert-interval 2))
#+end_src

** Normalize whitespace and indentation handling

#+begin_src emacs-lisp
(use-feature! emacs
  :hook ((before-save . delete-trailing-whitespace))

  :config
  (setq-default indent-tabs-mode nil
                tab-width 8)

  (setopt backward-delete-char-untabify-method 'hungry)
  (setopt mode-require-final-newline 'visit-save)
  (setopt sentence-end-double-space t)

  (electric-indent-mode 1))
#+end_src

** Visualize notable and unusual whitespace

#+begin_src emacs-lisp
(use-feature! emacs
  :hook ((prog-mode . whitespace-mode))

  :config
  (setq-default indicate-empty-lines nil)

  (setopt whitespace-style
          '(face
            tabs
            tab-mark
            trailing
            missing-newline-at-eof
            ;; space-after-tab::space
            ;; space-before-tab::space
            space-after-tab
            space-before-tab)))
#+end_src

** ~editorconfig~ :: enforce EditorConfig settings

- Website :: <https://editorconfig.org>

#+begin_src emacs-lisp
(use-package editorconfig
  ;; :ensure t
  :hook (ceamx-emacs-startup . editorconfig-mode)

  :preface
  ;; via <https://github.com/doomemacs/doomemacs/commit/43870bf8318f6471c4ce5e14565c9f0a3fb6e368>
  (defun +editorconfig-enforce-org-mode-tab-width-h (props)
  "Prevent `editorconfig' from changing `tab-width' in `org-mode'.
A \"tab-width\" of any value other than 8 is an error state in
org-mode, so it must not be changed.

PROPS is as in `editorconfig-after-apply-functions'."
  (when (and (gethash 'indent_size props)
             (derived-mode-p 'org-mode))
    (setq tab-width 8)))

  :config
  (add-hook 'editorconfig-after-apply-functions #'+editorconfig-enforce-org-mode-tab-width-h))
#+end_src

** Movement / Regions / Basic Editing

*** ~mwim~: Replace ~beginning-of-line~ and ~end-of-line~ with DWIM alternatives

#+begin_src emacs-lisp
(package! mwim
  ;; FIXME: overrides `org-mode' bindings!
  (keymap-global-set "C-a" #'mwim-beginning)
  (keymap-global-set "C-e" #'mwim-end))
#+end_src

*** INPRG Provide a command to intelligently kill words backwardsly

- State "INPRG"      from "TODO"       [2024-07-13 Sat 22:02] \\
  Needs a fix for compatibility with ~subword-mode~.  See also [[*Don't consider camelCaseWORDs as separate words]]
- src :: https://www.reddit.com/r/emacs/comments/bz9rxn/comment/er0bgll/
- src :: https://github.com/yantar92/emacs-config/blob/master/config.org#smarter-backward-kill-word

#+begin_src emacs-lisp :noweb-ref lib-editor
(defun ceamx/backward-kill-word ()
  "Kill the previous word, smartly.
This operation will respect the following rules:

1. If the cursor is at the beginning of line, delete the '\n'.
2. If there is *only* whitespace, delete only to beginning of line.
3. If there is *some* whitespace, delete whitespace and check 4-5.
4. If there are other characters instead of words, delete one only char.
5. If it's a word at point, delete it."
  (interactive)
  (if (bolp)
      ;; 1
      (delete-char -1)
    (if (string-match-p "^[[:space:]]+$"
                        (buffer-substring-no-properties
                         (line-beginning-position) (point)))
        ;; 2
        (delete-horizontal-space)
      (when (thing-at-point 'whitespace)
        ;; 3
        (delete-horizontal-space))

      (if (thing-at-point 'word)
          ;; 5
          (let ((start (car (bounds-of-thing-at-point 'word)))
                (end (point)))
            (if (> end start)
                (delete-region start end)
              (delete-char -1)))
        ;; 4
        (delete-char -1)))))
#+end_src
*** ~easy-kill~ :package:

+ Package documentation :: <https://github.com/leoliu/easy-kill/blob/master/README.rst>

#+begin_example
w => word
s => sexp
l => list
d => defun
D => defun name
f => file
b => buffer name
       ->"-": `default-directory'
       ->"+": full path
       ->"0": basename
#+end_example

#+begin_src emacs-lisp
(use-package easy-kill
  ;; :ensure t
  :commands (easy-kill easy-mark)
  :init
  (keymap-global-set "M-w" #'easy-kill)   ; override `kill-ring-save'
  (keymap-global-set "C-M-@" #'easy-mark) ; override `mark-sexp'
  )
#+end_src

*** Replace region when inserting text

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

*** ~expand-region~: Increase/decrease the selection area

#+begin_src emacs-lisp
(use-package expand-region
  ;; :ensure t
  :commands (er/expand-region)
  :init
  (keymap-global-set "C-=" #'er/expand-region))
#+end_src

*** ~drag-stuff~: drag stuff around in arbitrary directions :package:

<https://github.com/rejeep/drag-stuff.el>

This package appears to be abandoned since 2017.  As of <2024-12-27>,
it still works relatively well, but has some issues:

+ Possible subtle conflicts with ~org-metaup~ and ~org-metadown~?
+ Numerous warnings about deprecated functions <https://github.com/rejeep/drag-stuff.el/issues/36>

I haven't yet found any other package to move arbitrary regions
up/down while preserving column position.

~move-text-mode~ <https://github.com/emacsfodder/move-text> claims to do
this, but fails pretty badly, moving the region/selection to the first
column regardless of its original position.

#+begin_src emacs-lisp
(use-package drag-stuff
  ;; :ensure t
  :bind
  (([M-up] . drag-stuff-up)
   ([M-right] . drag-stuff-right)
   ([M-down] . drag-stuff-down)
   ([M-left] . drag-stuff-left)))
#+end_src

*** Visualize and electrify matching character pairs :pairs:

See the Info node [[info:emacs#Matching]]


#+begin_src emacs-lisp
(setopt blink-matching-paren t)
;; Avoid "expression" style, which looks too much like a selected region.
(setopt show-paren-style 'parenthesis)

(setopt electric-pair-preserve-balance t)
(setopt electric-pair-delete-adjacent-pairs t)
(setopt electric-pair-skip-whitespace t)
;; TODO: evaluating...
(setopt electric-pair-open-newline-between-pairs t)

(electric-pair-mode 1)
(show-paren-mode 1)
#+end_src

*** Don't consider camelCaseWORDs as separate words

While it can be useful in some contexts, I wish that ~subword-mode~ did not break
~ceamx/backward-kill-word~.  See also [[*Provide a command to intelligently kill
words backwardsly]]

#+begin_src emacs-lisp
(global-subword-mode -1)
#+end_src

*** TODO ~string-inflection~: Commands to cycle through word casing

Needs better bindings.

#+begin_src emacs-lisp
(require 'lib-editor)

(package! string-inflection)

(defvar-keymap ceamx-string-repeat-map
  :repeat t

  "c" #'ceamx/cycle-string-inflection)
#+end_src

#+begin_src emacs-lisp :noweb-ref lib-editor
(defun ceamx/cycle-string-inflection ()
  "Cycle through `string-inflection' styles appropriate to the major-mode."
  (interactive)
  (pcase major-mode
    (`emacs-lisp-mode (string-inflection-all-cycle))
    (`python-mode (string-inflection-python-style-cycle))
    (`java-mode (string-inflection-java-style-cycle))
    (`elixir-mode (string-inflection-elixir-style-cycle))
    (_ (string-inflection-ruby-style-cycle))))
#+end_src

*** ~ialign~: Interactively ~align-regexp~ :package:

<https://github.com/mkcms/interactive-align/blob/master/README.org#usage>

#+begin_src emacs-lisp
(package! ialign
  (keymap-global-set "C-x l" #'ialign))
#+end_src

*** ~rect~ [builtin]: operate on a buffer rectangularly

<https://github.com/abo-abo/hydra/wiki/Rectangle-Operations#rectangle-2>

#+begin_src emacs-lisp
(use-feature! rect
  :config
  (use-feature! hydra
    :config
    (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                         :color pink
                                         :hint nil
                                         :post (deactivate-mark))
      "
  ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
_h_   _l_     _y_ank        _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
  ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
^^^^          _u_ndo        _g_ quit     ^ ^                     '---''(./..)-'(_\_)
"
      ("k" rectangle-previous-line)
      ("j" rectangle-next-line)
      ("h" rectangle-backward-char)
      ("l" rectangle-forward-char)
      ("d" kill-rectangle)               ;; C-x r k
      ("y" yank-rectangle)               ;; C-x r y
      ("w" copy-rectangle-as-kill)       ;; C-x r M-w
      ("o" open-rectangle)               ;; C-x r o
      ("t" string-rectangle)             ;; C-x r t
      ("c" clear-rectangle)              ;; C-x r c
      ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
      ("N" rectangle-number-lines)            ;; C-x r N
      ("r" (if (region-active-p)
               (deactivate-mark)
             (rectangle-mark-mode 1)))
      ("u" undo nil)
      ("g" nil))

    (when (fboundp 'hydra-rectangle/body)
      (keymap-global-set "C-x SPC" #'hydra-rectangle/body)
      (keymap-global-set "C-x M-r" #'rectangle-mark-mode))))
#+end_src

** Line wrapping

#+begin_src emacs-lisp
(use-feature! emacs
  :hook (((prog-mode text-mode) . auto-fill-mode))

  :config
  (setq-default fill-column 70)
  ;; Disable line soft-wrapping by default.
  (setq-default truncate-lines t)

  (setopt comment-auto-fill-only-comments t))

(use-package unfill
  ;; :ensure t
  :bind ("M-q" . unfill-toggle))
#+end_src

** Configure secrets lookup with ~auth-source~ and =password-store=

- source :: <https://github.com/jwiegley/dot-emacs/blob/9d595c427136e2709dee33271db1a658493265bd/init.org#auth-source-pass>

#+begin_src emacs-lisp
(use-feature! auth-source
  :demand t
  :config
  ;; Ensure the usage of an encrypted auth credentials file.  It's
  ;; best to list only a single file here to avoid confusion about
  ;; where secrets might be stored.
  (setopt auth-sources (list "~/.authinfo.gpg")))

;; TODO: provide explanation as to why these functions are named like so -- they just magically work..?
(use-feature! auth-source-pass
  :demand t

  :preface
  (defvar auth-source-pass--cache (make-hash-table :test #'equal))

  (defun auth-source-pass--reset-cache ()
    (setq auth-source-pass--cache (make-hash-table :test #'equal)))

  (defun auth-source-pass--read-entry (entry)
    "Return a string with the file content of ENTRY."
    (run-at-time 45 nil #'auth-source-pass--reset-cache)
    (let ((cached (gethash entry auth-source-pass--cache)))
      (or cached
          (puthash
           entry
           (with-temp-buffer
             (insert-file-contents (expand-file-name
                                    (format "%s.gpg" entry)
                                    (getenv "PASSWORD_STORE_DIR")))
             (buffer-substring-no-properties (point-min) (point-max)))
           auth-source-pass--cache))))

  (defun ceamx-auth-source-pass-list-items ()
    "Return a list of all password store items."
    (let ((store-dir (getenv "PASSWORD_STORE_DIR")))
      (mapcar
       (lambda (file)
         (file-name-sans-extension (file-relative-name file store-dir)))
       (directory-files-recursively store-dir "\.gpg$"))))

  :config
  (auth-source-pass-enable))
#+end_src

*** Use Emacs for =pinentry=

#+begin_src emacs-lisp
(use-feature! epg
  :defer 2
  :config
  (setopt epg-pinentry-mode 'loopback))
#+end_src

*** DISABLED Define helper function to lookup a password for a target host
:PROPERTIES:
:header-args: :tangle no
:END:

- source :: <https://github.com/jwiegley/dot-emacs/blob/9d595c427136e2709dee33271db1a658493265bd/init.org#lookup-a-password-using-auth-source>

#+begin_src emacs-lisp
(eval-when-compile (require 'auth-source))
(eval-when-compile (require 'auth-source-pass))

(defun ceamx-lookup-password (host user port)
  (let ((auth (auth-source-search :host host :user user :port port)))
    (if auth
        (let ((secretf (plist-get (car auth) :secret)))
          (if secretf
              (funcall secretf)
            (error "Auth entry for %s@%s:%s has no secret!"
                   user host port)))
      (error "No auth entry found for %s@%s:%s" user host port))))
#+end_src

** Buttonize URLs and email addresses with ~goto-address~ [builtin]

#+begin_src emacs-lisp
(use-feature! goto-addr
  :hook (prog-mode . goto-address-prog-mode))
#+end_src

** ~link-hint~: Activate links in buffer with ~avy~

<https://github.com/noctuid/link-hint.el>

#+begin_src emacs-lisp
(package! link-hint
  (define-keymap :keymap (current-global-map)
    "M-g u" #'link-hint-open-link
    "M-g U" #'link-hint-copy-link))
#+end_src

** Manage backup files and prevent file-lock clutter

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt create-lockfiles nil
          ;; TODO: enable under some conditions e.g. not a project,
          ;; tramp remote file
          make-backup-files nil
          delete-by-moving-to-trash t)

  (when make-backup-files
    (setopt version-control t
            delete-old-versions t
            kept-new-versions 5
            kept-old-versions 5)))
#+end_src

** Configure finding of files

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt find-file-suppress-same-file-warnings t
          find-file-visit-truename t)

  ;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/doom-editor.el#L78-L89>
  (def-hook! ceamx-find-file-create-paths-h ()
    'find-file-not-found-functions
    "Automatically create missing directories when creating new files."
    (unless (file-remote-p buffer-file-name)
      (let ((parent-directory (file-name-directory buffer-file-name)))
        (and (not (file-directory-p parent-directory))
             (y-or-n-p (format "Directory `%s' does not exist! Create it?"
                               parent-directory))
             (progn (make-directory parent-directory 'parents)
                    t))))))
#+end_src

** Auto-save file-visiting buffers

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt
   ;; Prevent creation of the list of all auto-saved files.
   auto-save-list-file-prefix nil
   ;; Number of input events before autosave
   auto-save-interval 300
   ;; Idle interval for all file-visiting buffers
   auto-save-visited-interval 30
   ;; Idle interval before autosave
   auto-save-timeout 30
   ;; Don't create auto-save "~" files.
   auto-save-default nil)

  ;; Save file-visiting buffers according to the configured timers.
  (auto-save-visited-mode))
#+end_src

** Interactive buffer management with ~ibuffer~

#+begin_src emacs-lisp
(use-feature! ibuffer
  :config
  (setopt ibuffer-movement-cycle t))
#+end_src

** Help
*** ~casual-suite~: transient-dispatch menus for complex modes

#+begin_src emacs-lisp
(package! casual-suite
  (require 'casual-suite)

  (keymap-global-set "C-o" #'casual-editkit-main-tmenu)
  (keymap-set symbol-overlay-map "C-o" #'casual-symbol-overlay-tmenu)

  ;; <https://github.com/kickingvegas/casual-avy>
  ;; M-g M-g
  (keymap-set goto-map "M-g" #'casual-avy-tmenu)

  ;; <https://github.com/kickingvegas/casual-calc>
  (after! calc
    (keymap-set calc-mode-map "C-o" #'casual-calc-tmenu))
  (after! calc-alg
    (keymap-set calc-alg-map "C-o" #'casual-calc-tmenu))

  ;; <https://github.com/kickingvegas/casual-dired>
  (after! dired
    (keymap-set dired-mode-map "C-o" #'casual-dired-tmenu))

  ;; <https://github.com/kickingvegas/casual-info>
  (after! info
    (keymap-set Info-mode-map "C-o" #'casual-info-tmenu))

  ;; <https://github.com/kickingvegas/casual-isearch>
  (after! isearch
    (keymap-set isearch-mode-map "<f2>" #'casual-isearch-tmenu))

  (after! ibuffer
    (keymap-set ibuffer-mode-map "C-o" #'casual-ibuffer-tmenu)
    (keymap-set ibuffer-mode-map "F" #'casual-ibuffer-filter-tmenu)
    (keymap-set ibuffer-mode-map "s" #'casual-ibuffer-sortby-tmenu))

  (after! re-builder
    (keymap-set reb-mode-map "C-o" #'casual-re-builder-tmenu)
    (keymap-set reb-lisp-mode-map "C-o" #'casual-re-builder-tmenu))

  (after! bookmark
    (keymap-set bookmark-bmenu-mode-map "C-o" #'casual-bookmarks-tmenu))

  (after! org-agenda
    (keymap-set org-agenda-mode-map "C-o" #'casual-agenda-tmenu)))
#+end_src

*** ~Info-mode~ enchantments

#+begin_src emacs-lisp
(use-feature! info
  :hook ((Info-mode . hl-line-mode)
         (Info-mode . scroll-lock-mode)))
#+end_src

*** ~helpful~: Provide improved alternatives to the builtin "describe" utilities

- Source code :: <https://github.com/Wilfred/helpful>

Note that there is a severe but edge-case bug that has gone unfixed
for quite a while.  ~helpful~ cannot display documentation for symbols
defined in Emacs C source code:

<https://github.com/Wilfred/helpful/issues/329>


#+begin_src emacs-lisp
(package! helpful
  (defer! 2
    (require 'helpful))

  (define-keymap :keymap help-map
    "c" #'helpful-callable
    "C" #'helpful-command
    "f" #'helpful-function              ; orig: `describe-face'
    "h" #'helpful-at-point
    ;; TODO: consider swapping with the original as a trial?
    "k" #'helpful-key                   ; orig: `describe-key-briefly'
    "o" #'helpful-symbol
    "v" #'helpful-variable

    ;; Parity with the corresponding unmodded keys.
    ;; Primarily for Meow keypad, but also sometimes feels more natural to keep
    ;; holding Ctrl anyway.
    "C-k" #'helpful-key
    "C-o" #'helpful-symbol

    ;; Rebind the originals
    "F" #'describe-face
    "K" #'describe-key-briefly

    ;; Unbind the default binding for "C-h C-h" to allow `which-key' paging.
    "C-h" nil))
#+end_src
*** Rebind some default ~help-map~ keybindings

#+begin_src emacs-lisp
(define-keymap :keymap help-map
  "l" #'find-library
  ;; I actually prefer the default `man' over `consult-man'.
  "m" #'man                     ; orig: `describe-mode'
  "M" #'describe-mode

  ;; FIXME: no lambda binding
  ;; "t" `("text-props (pt)" . ,(cmd!!
  ;;                              #'describe-text-properties
  ;;                              current-prefix-arg
  ;;                              (point)))

  ;; Unbind the default binding for "C-h C-h" to allow `which-key' paging.
  "C-h" nil)
#+end_src

** History & Undo
*** Record some variables' values with ~savehist~

#+begin_src emacs-lisp
(use-feature! savehist
  :init
  (savehist-mode)

  :config
  (cl-dolist (save '(kill-ring
                     regexp-search-ring
                     search-ring))
    (cl-pushnew save savehist-additional-variables))
  (setopt history-length 100
          history-delete-duplicates t)
  (setopt savehist-autosave-interval 60))
#+end_src

*** Record point position in buffers with ~saveplace~

#+begin_src emacs-lisp
(use-feature! saveplace
  :init
  (save-place-mode))
#+end_src

*** Record recently-accessed files with ~recentf~

#+begin_src emacs-lisp
(use-feature! recentf
  :init
  (recentf-mode)

  :config
  (setopt recentf-max-saved-items 50)   ; default => 20
  (setopt recentf-max-menu-items 15)    ; default => 10

  ;; Disable recentf-cleanup on Emacs start, because it can cause
  ;; problems with remote files.
  (setopt recentf-auto-cleanup 'never)

  ;; Exclude internal plumbing files.
  (dolist (path '(ceamx-etc-dir ceamx-var-dir))
    (add-to-list 'recentf-exclude path)))
#+end_src

*** Increase undo history limits

Advice from the author of ~undo-fu~:

#+begin_quote
The default undo limits for emacs are quite low _(0.15mb at time of
writing)_ undo-tree for example increases these limits.

On modern systems you may wish to use much higher limits.

This example sets the limit to 64mb, 1.5x (96mb) for the strong limit
and 10x (960mb) for the outer limit.  Emacs uses 100x for the outer
limit but this may be too high when using increased limits.
#+end_quote

via <https://codeberg.org/ideasman42/emacs-undo-fu#undo-limits>

#+begin_src emacs-lisp
(setopt undo-limit 67108864) ; 64mb.
(setopt undo-strong-limit 100663296) ; 96mb.
(setopt undo-outer-limit 1006632960) ; 960mb.
#+end_src

*** ~undo-fu~: Support optional linear undo/redo

- Source code :: <https://codeberg.org/ideasman42/emacs-undo-fu>

#+begin_src emacs-lisp
(package! undo-fu
  (keymap-global-set "C-z" #'undo-fu-only-undo)
  (keymap-global-set "C-S-z" #'undo-fu-only-redo))
#+end_src

*** ~undo-fu-session~: Record undo/redo steps across Emacs sessions

- Source code :: <https://codeberg.org/ideasman42/emacs-undo-fu-session>

NOTE: This is *NOT* just for use with ~undo-fu~!  It's an essential
enhancement to the builtin Emacs undo system as well.

#+begin_src emacs-lisp
(defvar undo-fu-session-directory
  (expand-file-name "undo-fu-session" ceamx-var-dir))

(package! undo-fu-session
  (setopt undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (setopt undo-fu-session-ignore-temp-files t)
  (setopt undo-fu-session-ignore-encrypted-files t)

  (setopt undo-fu-session-compression 'zst)

  (undo-fu-session-global-mode))
#+end_src

*** ~vundo~: Visualize the Emacs undo tree

- Source code :: <https://github.com/casouri/vundo>

#+begin_src emacs-lisp
(use-package vundo
  ;; :ensure t
  :defer t
  :defines vundo-unicode-symbols

  :bind
  ("C-x u" . vundo)

  :config
  (setopt vundo-glyph-alist vundo-unicode-symbols))
#+end_src

** Bookmarks
*** ~dogears~: Return to previously-visited buffer positions

- Source code :: <https://github.com/alphapapa/dogears.el>

#+begin_src emacs-lisp
(package! dogears
  (add-hook 'on-first-buffer-hook #'dogears-mode)

  ;; Also see `ceamx/dogears-dispatch'.
  (define-keymap :keymap (current-global-map)
    ;; TODO: find a new binding maybe
    ;; "M-g d" #'dogears-go
    "M-g M-b" #'dogears-back
    "M-g M-f" #'dogears-forward
    "M-g M-d" #'dogears-list
    "M-g M-D" #'dogears-sidebar)

  ;; Persist `dogears-list' between Emacs sessions.
  ;; via <https://github.com/alphapapa/dogears.el/issues/4>
  (after! savehist
    (when (boundp 'savehist-additional-variables)
      (add-to-list 'savehist-additional-variables #'dogears-list))))

;; TODO: provide a little more context in transient (label for dogears, links maybe...)
(after! (transient dogears)
  (transient-define-prefix ceamx/dogears-dispatch ()
    "Transient menu for `dogears' history navigation commands."
    [["Navigate"
      ("b" "back" dogears-back :transient transient--do-stay)
      ("f" "forward" dogears-forward :transient transient--do-stay)]
     ;; TODO: when quit one of these Find commands, return to transient
     ["Find"
      ("d" "go..." dogears-go)
      ("l" "list" dogears-list)
      ("S" "sidebar" dogears-sidebar)]])

  (defer-until! (fboundp 'ceamx/dogears-dispatch)
    (keymap-global-set "M-g d" #'ceamx/dogears-dispatch)))
#+end_src

** ~which-key~

#+begin_src emacs-lisp
(use-feature! which-key
  :hook (ceamx-after-init . which-key-mode)

  :config
  (setopt which-key-compute-remaps t)
  (setopt which-key-idle-delay 1.0)
  (setopt which-key-sort-order 'which-key-prefix-then-key-order
          which-key-sort-uppercase-first nil)

  ;; The default (0) is difficult to read.
  (setopt which-key-add-column-padding 2)

  ;; FIXME: no effect? what does this actually do?
  (setopt which-key-show-remaining-keys t))
#+end_src

** macOS: Remap modifier keys for the Apple keyboard layout

#+begin_src emacs-lisp
(when (and (ceamx-host-macos-p) (display-graphic-p))
  (setopt mac-control-modifier 'control)
  (setopt mac-option-modifier 'meta)
  (setopt ns-option-modifier 'meta)
  (setopt mac-command-modifier 'super)
  (setopt ns-command-modifier 'super)
  ;; Free up the right-side option key for character composition.
  (setopt mac-right-option-modifier 'none)
  (setopt ns-right-option-modifier 'none)
  ;; Common system hotkeys.
  (define-keymap :keymap (current-global-map)
    "s-c" #'kill-ring-save
    "s-v" #'yank
    "s-x" #'kill-region
    "s-q" #'save-buffers-kill-emacs))
#+end_src

** Enable and configure ~repeat-mode~

#+begin_src emacs-lisp
(setopt repeat-exit-timeout 15)
(setopt repeat-on-final-keystroke t)
(setopt repeat-keep-prefix nil)
#+end_src

Allow any key sequence to exit ~repeat-mode~:

#+begin_src emacs-lisp
(setopt repeat-exit-key nil)
#+end_src

Related, but not technically part of ~repeat-mode~:

#+begin_src emacs-lisp
(setopt set-mark-command-repeat-pop t)
#+end_src

Enable ~repeat-mode~, avoiding running mode-hooks too early:

#+begin_src emacs-lisp
(add-hook 'ceamx-after-init-hook #'repeat-mode)
#+end_src

** Provide ~ceamx-init-essentials~ feature

#+begin_src emacs-lisp
(provide 'ceamx-init-essentials)
;;; ceamx-init-essentials.el ends here
#+end_src

* Search :: =search=
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-search.el
:END:

Configuration for search-related utilities like ~isearch~ and
~query-replace~.

See also [[*CONSULTing completing-read]], as ~consult~ often provides a frontend to
these utilities.

- Source :: <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-isearch.el>

** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

** Baseline search configuration

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt find-library-include-other-files nil)

  (keymap-set search-map "r" '("replace..." . ceamx-replace-prefix)))
#+end_src

** Configure interactive searching with ~isearch~

#+begin_src emacs-lisp
(after! isearch
  (blackout 'isearch)

  ;;
  ;; Settings

  (setopt search-highlight t
          isearch-lazy-highlight t
          lazy-highlight-initial-delay 0.5
          lazy-highlight-no-delay-length 4)
  (setopt isearch-lazy-count t
          lazy-count-prefix-format "[%s/%s] "
          lazy-count-suffix-format nil)
  (setopt isearch-allow-scroll 'unlimited)
  (setopt isearch-wrap-pause t
          isearch-repeat-on-direction-change t)

  ;; Allow extending search string by holding shift and using motion
  ;; commands.
  (setopt isearch-yank-on-move 'shift)

  (setopt search-whitespace-regexp ".*?"
          isearch-lax-whitespace t
          isearch-regexp-lax-whitespace nil)

  ;;
  ;; Keybindings

  (defvar-keymap isearch-repeat-map
    :repeat t
    "s" #'isearch-repeat-forward
    "r" #'isearch-repeat-backward)

  (define-keymap :keymap (current-global-map)
    "M-s M-o" #'multi-occur)

  (define-keymap :keymap isearch-mode-map
    "M-<" #'isearch-beginning-of-buffer
    "M->" #'isearch-end-of-buffer
    "M-/" #'isearch-complete
    "M-w" #'isearch-yank-word-or-char

    "M-s <" #'isearch-beginning-of-buffer
    "M-s >" #'isearch-end-of-buffer

    "C-g" #'isearch-cancel              ; orig. `isearch-abort'

    "C-w" nil
    "M-e" nil)

  (keymap-set minibuffer-local-isearch-map "M-/" #'isearch-complete-edit))
#+end_src

** Customize the ~occur~ buffer

#+begin_src emacs-lisp
(after! isearch
  (add-hook 'occur-mode-hook #'ceamx-truncate-lines-silently)

  (setopt list-matching-lines-jump-to-current-line nil)

  (keymap-set occur-mode-map "t" #'toggle-truncate-lines))
#+end_src

** ~substitute~: efficiently replace contextual targets

<https://protesilaos.com/emacs/substitute>

#+begin_src emacs-lisp
(package! substitute
  (define-keymap :keymap ceamx-replace-prefix
    "b" #'substitute-target-in-buffer
    "d" #'substitute-target-in-defun
    "r" #'substitute-target-above-point
    "s" #'substitute-target-below-point)

  (setopt substitute-hightlight t))

(after! substitute
  ;; Provide messages reporting on matches changed in the context.
  (add-hook 'substitute-post-replace-functions #'substitute-report-operation))
#+end_src

** ~wgrep~: writable grep buffers

+ Package :: <https://github.com/mhayashi1120/Emacs-wgrep>

#+begin_src emacs-lisp
(use-package wgrep
  ;; :ensure t

  :bind
  ((nil . nil)
   :map dired-mode-map
   ("C-c C-e" . wgrep-change-to-wgrep-mode)
   :map grep-mode-map
   ("W" . wgrep-change-to-wgrep-mode))

  :config
  (setopt wgrep-auto-save-buffer t))
#+end_src

** TODO Use builtin ~grep-edit-mode~ instead of ~wgrep~ if available

** Configure ~re-builder~, the regular expression builder

<https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder>
<https://francismurillo.github.io/2017-03-30-Exploring-Emacs-rx-Macro/>

Unfortunately, ~re-builder~ itself is poorly-documented.

#+begin_src emacs-lisp
(use-feature! re-builder
  :config
  ;; "string" => recommended: \\(foo\\\|bar\\)
  ;; "rx"     => recommended; advanced sexp regexp engine
  ;; "read"   => default, avoid: backslash hell
  (setopt reb-re-syntax 'string))
#+end_src

** Configure ~xref~

#+begin_src emacs-lisp
(defvar xref-ignored-files '()
  "List of files to be ignored by `xref'.")

(after! xref
  (setopt xref-file-name-display 'project-relative)
  (setopt xref-prompt-for-identifier nil)
  (setopt xref-show-definitions-function #'xref-show-definitions-completing-read)
  (setopt xref-show-xrefs-function #'xref-show-definitions-buffer))
#+end_src

** Provide ~ceamx-init-search~ feature

#+begin_src emacs-lisp
(provide 'ceamx-init-search)
;;; ceamx-init-search.el ends here
#+end_src

* Dired, the Directory Editor :: =dired= :dired:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-dired.el
:END:

** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-dired.el :comments no
;;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

** General Dired customizations

#+begin_src emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  ;; cf. `dired-omit-files', `dired-omit-lines', `dired-omit-extensions'
  (add-hook 'dired-mode-hook #'dired-omit-mode)

  ;; -A => dotfiles without . and ..
  ;; -F => append special chars to special files
  ;; -G => omit group name
  ;; -h => human-readable file sizes
  ;; -l => long listing, required by dired
  ;; -v => sort files by version number, not lexicographic
  (setopt dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso")

  (setopt dired-auto-revert-buffer t)
  (setopt dired-dwim-target t)
  (setopt dired-kill-when-opening-new-dired-buffer t)
  (setopt dired-vc-rename-file t)
  (setopt dired-clean-confirm-killing-deleted-buffers nil)
  (setopt dired-clean-up-buffers-too t)
  (setopt dired-create-destination-dirs 'ask
          dired-create-destination-dirs-on-trailing-dirsep t
          dired-recursive-deletes 'always
          dired-recursive-copies 'always
          dired-backup-overwrite 'always)
  (setopt dired-mouse-drag-files t)

  (setopt delete-by-moving-to-trash t)
  (setopt mouse-drag-and-drop-region-cross-program t))
#+end_src

** ~dired-subtree~ :: insert subdirs arboreally

#+begin_src emacs-lisp
(package! dired-subtree
  (after! dired
    (define-keymap :keymap dired-mode-map
      "<tab>" #'dired-subtree-toggle
      "TAB" #'dired-subtree-toggle
      "<backtab>" #'dired-subtree-remove
      "S-TAB" #'dired-subtree-remove)))

(after! dired-subtree
  (setopt dired-subtree-use-backgrounds nil))
#+end_src

** ~trashed~ :: interact with operating system trash diredly

#+begin_src emacs-lisp
(package! trashed)
(after! trashed
  (setopt trashed-action-confirmer #'y-or-n-p)
  (setopt trashed-use-header-line t)
  (setopt trashed-sort-key '("Date deleted" . t))
  (setopt trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src

** ~diredfl~ :: additional syntax highlighting in dired buffers

+ Package :: <https://github.com/purcell/diredfl>

#+begin_src emacs-lisp
(package! diredfl
  (add-hook 'ceamx-after-init-hook #'diredfl-global-mode)
  (after! diredfl
    (set-face-attribute 'diredfl-dir-name nil :bold t)))
#+end_src

** ~nerd-icons-dired~ :: icons for list items :icons:

#+begin_src emacs-lisp
(package! nerd-icons-dired
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))
#+end_src

** ~dired-preview~ :: a file previewer

+ Website :: <https://protesilaos.com/emacs/dired-preview>

#+begin_src emacs-lisp
(package! dired-preview
  (defer! 3
    (dired-preview-global-mode))
  (after! dired-preview
    (setopt dired-preview-delay 0.7)
    (setopt dired-preview-max-size (expt 2 20))
    (setopt dired-preview-ignored-extensions-regexp
            (concat "\\."
                    "\\(mkv\\|webm\\|mp4\\|mp3\\|ogg\\|m4a"
                    "\\|gz\\|zst\\|tar\\|xz\\|rar\\|zip"
                    "\\|iso\\|epub\\|pdf\\)"))

    (keymap-set dired-mode-map "C-c t p" #'dired-preview-mode)))
#+end_src

** Provide the ~ceamx-init-dired~ feature

#+begin_src emacs-lisp :tangle lisp/ceamx-init-dired.el :comments no
(provide 'ceamx-init-dired)
;;; ceamx-init-dired.el ends here
#+end_src

* Completion :: =completion=
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-completion.el
:END:

** Requirements

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

** Baseline completion settings

#+begin_src emacs-lisp
(use-feature! minibuffer
  :hook ((minibuffer-setup . cursor-intangible-mode)
         (ceamx-after-init . minibuffer-electric-default-mode))

  :config

  (setopt echo-keystrokes 0.25)
  (setopt savehist-save-minibuffer-history t)

  ;; Always resize mini-windows to fit their contents.
  (setopt resize-mini-windows t)
  ;; Hide commands in M-x which do not apply to the current mode.
  (setopt read-extended-command-predicate #'command-completion-default-include-p)

  (setopt minibuffer-prompt-properties
          '(read-only t
            cursor-intangible t         ; see `cursor-intangible-mode'
            face minibuffer-prompt))

  ;; TODO: isn't this handled somewhere else?  case-insensitive until
  ;; proven otherwise?
  ;; (setopt completion-ignore-case t
  ;;         read-buffer-completion-ignore-case t
  ;;         read-file-name-completion-ignore-case t)
  ;; (setq-default case-fold-search t)

  (setopt minibuffer-default-prompt-format " [%s]")

  )

(add-hook 'ceamx-after-init-hook #'minibuffer-depth-indicate-mode)

(after! mb-depth
  (setopt enable-recursive-minibuffers t)
  ;; TODO: evaluate...
  (setopt read-minibuffer-restore-windows nil))
#+end_src

** Add an indicator to the ~completing-read-multiple~ prompt

#+begin_src emacs-lisp
(defvar crm-separator)

(def-advice! ceamx-completion-crm-indicator-a (args)
  :filter-args #'completing-read-multiple
  "Add prompt indicator to `completing-read-multiple' for candidates ARGS.
We display [CRM<separator>], e.g., [CRM,] if the separator is a comma."
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))
#+end_src

** ~orderless~ :: completion-matching multiple regular expressions :search:

+ Package :: <https://github.com/oantolin/orderless>

#+begin_src emacs-lisp
(package! orderless
  (require 'orderless)

  (setopt orderless-matching-styles
          '(orderless-prefixes
            orderless-regexp))

  (setopt orderless-component-separator #'orderless-escapable-split-on-space)
  ;; spaces & dash & slash & underscore
  ;; (setopt orderless-component-separator " +\\|[-/_]")

  ;; [SPC] should never trigger a completion.
  (keymap-set minibuffer-local-completion-map "SPC" nil)
  ;; [?] should not interfere with regexp symbols
  (keymap-set minibuffer-local-completion-map "?" nil))
#+end_src

** Define custom completion styles
*** ~+orderless-fast-dispatch~

- source :: <https://github.com/minad/corfu/blob/main/README.org#auto-completion>

#+begin_src emacs-lisp
(defun +orderless-fast-dispatch (word index total)
  "Fast-dispatch `orderless' completion style for `corfu'."
  (and (= index 0) (= total 1) (length< word 4)
       (cons 'orderless-literal-prefix word)))
#+end_src

#+begin_src emacs-lisp
(after! orderless
  (orderless-define-completion-style +orderless-fast
    "Fast completion style, intended for usage with `corfu'."
    (orderless-style-dispatchers '(+orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp))))
#+end_src

*** ~+orderless-with-initialism~

#+begin_src emacs-lisp
(after! orderless
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism
                                 orderless-literal
                                 orderless-regexp))))
#+end_src

** Configure preferred completion styles

#+begin_src emacs-lisp
;; Make `partial-completion' behave like `substring'.
(setopt completion-pcm-leading-wildcard t)

(after! orderless
  ;; Reset per-category defaults to force the use of the standard
  ;; `completion-styles'.  Customizations can be specified in
  ;; `completion-category-overrides'.
  (setq completion-category-defaults nil)
  (setopt completion-styles '(orderless basic))
  (setopt completion-category-overrides
          '((file (styles partial-completion orderless))
            (bookmark (styles basic substring))
            (library (styles basic substring))
            (imenu (styles orderless substring basic))
            (kill-ring (styles emacs22 orderless))
            ;; enable initialism by default for symbols
            (command (styles +orderless-with-initialism))
            (variable (styles +orderless-with-initialism))
            (symbol (styles +orderless-with-initialism)))))

(after! (consult orderless)
  (add-to-list 'completion-category-overrides
      '(consult-location (styles basic substring orderless))))

(after! eglot
  (add-to-list 'completion-category-overrides '(eglot (styles orderless)))
  ;; FIXME: who provides `eglot-capf'?
  (add-to-list 'completion-category-overrides '(eglot-capf (styles orderless))))

(after! embark
  (add-to-list 'completion-category-overrides
      '(embark-keybinding (styles basic substring))))

(after! (orderless consult)
  (require 'ceamx-completion)

  (setopt orderless-style-dispatchers
          '(ceamx-completion-orderless-consult-dispatch
            orderless-affix-dispatch)))
#+end_src

** ~vertico~ :: [VERT]ical [I]nteractive [CO]mpletion :minibuffer:

+ Package :: <https://github.com/minad/vertico>

#+begin_src emacs-lisp
(package! vertico
  (add-hook 'ceamx-after-init-hook #'vertico-mode)

  (setopt vertico-count 8
          vertico-cycle t
          vertico-resize t
          vertico-scroll-margin 0)

  (after! (vertico savehist)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
    (add-to-list 'savehist-additional-variables #'vertico-repeat-history))

  ;; Tidy shadowed file names -- e.g. cleans `~/foo/bar///' to `/', and `~/foo/bar/~/' to `~/'.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

(after! vertico
  (define-keymap :keymap vertico-map
    "RET" #'vertico-directory-enter
    "DEL" #'vertico-directory-delete-char
    "M-DEL" #'vertico-directory-delete-word
    "M-q" #'vertico-quick-insert
    "C-q" #'vertico-quick-exit))
#+end_src

Fine-tune Vertico appearance per-command or per-category with
~vertico-multiform~:

#+begin_src emacs-lisp
(after! vertico
  ;; NOTE: Takes precedence over `vertico-multiform-categories'.
  (setopt vertico-multiform-commands
          `((consult-line buffer)
           (consult-imenu buffer)
           (consult-org-heading ,(lambda (_) (text-scale-set -1)))))

  (setopt vertico-multiform-categories
          '((buffer flat (vertico-cycle . t))
            (consult-grep buffer)
            (imenu (:not indexed mouse))
            (symbol (vertico-sort-function . vertico-sort-alpha))))

  (vertico-multiform-mode))

(after! vertico-multiform
  (keymap-set vertico-multiform-map "C-l" #'vertico-multiform-vertical))
#+end_src

** ~marginalia~ :: minibuffer completion annotations :minibuffer:

+ Package :: <https://github.com/minad/marginalia>

#+begin_src emacs-lisp
(package! marginalia
  (keymap-set minibuffer-local-map "M-A" #'marginalia-cycle)

  (marginalia-mode))
#+end_src

** ~consult~ :: [CONSULT]ing ~completing-read~ :minibuffer:

- website :: <https://github.com/minad/consult>
- ref :: <https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html>

#+begin_src emacs-lisp
(package! consult
  ;; Improve previews for `consult-register' and other register commands
  (setopt register-preview-delay 0.5)
  (setopt register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Display xref locations with previews
  (setopt xref-show-definitions-function #'consult-xref)
  (setopt xref-show-xrefs-function #'consult-xref))

(after! consult
  (require 'consult-imenu)

  (setopt consult-narrow-key "<")       ; alternative: "C-+"
  (setopt consult-line-numbers-widen t)
  (setopt consult-async-min-input 3
          consult-async-input-debounce 0.5
          consult-async-input-throttle 0.8)

  (after! pulsar
    (setq consult-after-jump-hook nil)
    (dolist (fn '(pulsar-recenter-top pulsar-reveal-entry))
      (add-hook 'consult-after-jump-hook fn))))
#+end_src

Refine preview appearance and behavior:

#+begin_src emacs-lisp
(after! consult
  (setopt consult-preview-key 'any)

  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)

   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any)))
#+end_src

Preview files in =find-file=:

- source :: <https://github.com/minad/consult/wiki#previewing-files-in-find-file>

#+begin_src emacs-lisp
(use-feature! ceamx-completion
  :demand t
  :after consult
  :commands (ceamx-completion/consult-find-file-with-preview)
  :init
  (setq read-file-name-function #'ceamx-completion/consult-find-file-with-preview))
#+end_src

Define commands to search pre-defined sets of Info pages with
~consult-info~:

#+begin_src emacs-lisp
(define-prefix-command 'ceamx-info-prefix 'ceamx-info-prefix-map)

(keymap-global-set "C-h i" (cons "[info]" #'ceamx-info-prefix))

(use-feature! ceamx-completion
  :after consult
  :commands (ceamx/consult-info-dwim
             ceamx/completion-info
             ceamx/emacs-info
             ceamx/org-info)
  :init
  (define-keymap :keymap help-map
    "i i" #'ceamx/consult-info-dwim
    "i c" #'ceamx/completion-info
    "i e" #'ceamx/emacs-info
    "i o" #'ceamx/org-info))
#+end_src

*** Define keybindings for ~consult~ and its extensions :keybinds:

#+begin_src emacs-lisp
(define-keymap :keymap (current-global-map)
  "C-c M-x" #'consult-mode-command

  "<remap> <Info-search>" #'consult-info

  "C-x M-:" #'consult-complex-command ; orig. `repeat-complex-command'
  "C-x b" #'consult-buffer            ; orig. `switch-to-buffer'
  "C-x 4 b" #'consult-buffer-other-window ; orig. `switch-to-buffer-other-window'
  "C-x 5 b" #'consult-buffer-other-frame ; orig. `switch-to-buffer-other-frame'
  "C-x t b" #'consult-buffer-other-tab ; orig. `switch-to-buffer-other-tab'
  "C-x r b" #'consult-bookmark         ; orig. `bookmark-jump'
  "C-x p b" #'consult-project-buffer ; orig. `project-switch-to-buffer'

  ;; [C-h] bindings (`help-map')
  "C-h I" #'consult-info ; orig. `describe-input-method'

  ;; Custom M-# bindings for fast register access
  "M-#"    #'consult-register-load
  "M-'"    #'consult-register-store ; orig. `abbrev-prefix-mark' (unrelated)
  "C-M-#"  #'consult-register

  ;; TODO: reconcile with current binding for `forward-symbol'
  ;; "M-F" #'consult-focus-lines
  "M-K" #'consult-keep-lines
  "M-y" #'consult-yank-pop              ; orig. `yank-pop'

  ;; M-g bindings (`goto-map')
  "M-g e"  #'consult-compile-error
  "M-g f"  #'consult-flymake            ; or: `consult-flycheck'
  "M-g g"  #'consult-goto-line          ; orig. `goto-line'
  "M-g M-g" #'consult-goto-line         ; orig. `goto-line'
  "M-g o"  #'consult-outline            ; or: `consult-org-heading'
  "M-g m"  #'consult-mark
  "M-g k"  #'consult-global-mark
  "M-g i"  #'consult-imenu
  "M-g I"  #'consult-imenu-multi

  ;; M-s bindings (`search-map')
  "M-s d"  #'consult-fd                 ; or `consult-find'
  "M-s c"  #'consult-locate
  "M-s e"  #'consult-isearch-history
  "M-s g"  #'consult-ripgrep
  "M-s G"  #'consult-git-grep
  "M-s k"  #'consult-keep-lines
  "M-s l"  #'consult-line
  "M-s L"  #'consult-line-multi
  "M-s u"  #'consult-focus-lines
  "M-s M-s" #'consult-outline)

(after! isearch
  (define-keymap :keymap isearch-mode-map
    "M-e"   #'consult-isearch-history   ; orig. `isearch-edit-string'
    "M-s e" #'consult-isearch-history   ; orig. `isearch-edit-string'
    "M-s l" #'consult-line              ; needed by `consult-line' to detect `isearch'
    "M-s L" #'consult-line-multi        ; needed by `consult-line' to detect `isearch'
    ))

(keymap-set minibuffer-local-map "M-s" #'consult-history) ; orig. `next-matching-history-element'
(keymap-set minibuffer-local-map "M-r" #'consult-history) ; orig. `previous-matching-history-element'

(after! consult
  ;; Make narrowing help available in the minibuffer.
  (define-keymap :keymap consult-narrow-map
    "?" #'consult-narrow-help)
  (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'embark-prefix-help-command))
#+end_src

** Define the location of the custom template directory :paths:

#+begin_src emacs-lisp :tangle no :noweb-ref config-feature-paths
(defconst ceamx-templates-dir
  (file-name-as-directory (file-name-concat user-emacs-directory "templates"))
  "Directory for user-defined expandable templates.
Templates, in this sense, refer to the primary focus of packages
like \"tempo\", \"tempel\", and \"yasnippet\".")
#+end_src

** Dynamic text expansion with ~dabbrev~

#+begin_src emacs-lisp
(after! dabbrev
  (setopt dabbrev-abbrev-char-regexp "\\sw\\|\\s_"
          dabbrev-abbrev-skip-leading-regexp "[$*/=~']")
  (setopt dabbrev-backward-only nil)
  (setopt dabbrev-case-distinction 'case-replace
          dabbrev-case-fold-search nil
          dabbrev-upcase-means-case-search t)
  (setopt dabbrev-check-other-buffers t)
  (setopt dabbrev-eliminate-newlines t)
  (setopt dabbrev-ignored-buffer-regexps '("\\` ")
          dabbrev-ignored-buffer-modes '(archive-mode doc-view-mode image-mode
                                                      pdf-view-mode tags-table-mode)))
#+end_src

** Static text expansion with ~abbrev~
*** Configure ~abbrev-mode~ settings

#+begin_src emacs-lisp
(use-feature! abbrev
  ;; NOTE: `message-mode' derives from `text-mode', so it does not
  ;; need to be listed for coverage here.
  :hook ((text-mode prog-mode git-commit-mode) . abbrev-mode)

  :config
  (setopt only-global-abbrevs nil)
  (setopt abbrev-suggest t)

  ;; Our abbrevs are defined in configuration, no need to save elsewhere
  (remove-hook 'save-some-buffers-functions #'abbrev--possibly-save)

  ;; Because the *scratch* buffer is produced before we load this, we
  ;; have to explicitly activate the mode there.
  (when-let* ((scratch (get-buffer "*scratch*")))
    (with-current-buffer scratch
      (abbrev-mode 1))))
#+end_src

*** Define the custom ~abbrevs~

#+begin_src emacs-lisp
(abbrevs! text-mode-abbrev-table
  "javascript"		"JavaScript"
  "typescript"		"TypeScript"
  "wordpress"		"WordPress"
  "youtube"		"YouTube")
#+end_src

*** DISABLED Allow abbrevs with a prefix colon, semicolon, or underscore

Disabled to test interference with other completion-at-point behavior wired
together through [[*Completion-At-Point Extensions (Cape)]].

- Source :: <https://github.com/protesilaos/dotfiles/blob/8fc72724cd6debd12c8258bf64adf6822a0bc90c/emacs/.emacs.d/prot-emacs-modules/prot-emacs-completion.el#L215-L225>
- Background :: <https://protesilaos.com/codelog/2024-02-03-emacs-abbrev-mode/>

Adapted from Prot's original version with the following changes:

- Converted the duplicated regexp string into an ~rx~ form via the ~xr~ utility.
- Abstracted the regexp to a variable ~ceamx-abbrev-prefix-regexp~ for reuse
  across =abbrev-table= contexts.

#+begin_src emacs-lisp :tangle no
(defconst ceamx-abbrev-prefix-regexp "\\(?:^\\|[\t\s]+\\)\\(?1:[:_].*\\|.*\\)")

(after! abbrev
  (abbrev-table-put global-abbrev-table :regexp ceamx-abbrev-prefix-regexp)

  (with-eval-after-load 'text-mode
    (abbrev-table-put text-mode-abbrev-table :regexp ceamx-abbrev-prefix-regexp))

  (with-eval-after-load 'org
    (abbrev-table-put org-mode-abbrev-table :regexp ceamx-abbrev-prefix-regexp)))
#+end_src

** ~hippie-expand~

#+begin_src emacs-lisp
(after! hippie-exp
  ;; (defer! 5
  ;;   (require 'hippie-exp))

  (setopt hippie-expand-verbose t
          hippie-expand-dabbrev-skip-space t)

  (setopt hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name

            ;; Remove `try-expand-all-abbrevs' to disable automatic
            ;; abbrev expansion.
            try-expand-all-abbrevs

            try-expand-list

            ;; TODO: enable for shell modes only?
            ;; try-expand-line

            try-expand-dabbrev          ; see: `dabbrev-expand'
            try-expand-dabbrev-all-buffers
            ;; try-expand-dabbrev-from-kill

            ;; Redundant with `completion-at-point'... *except* in the literate
            ;; config file, where elisp symbols won't normally be available.
            ;; TODO: enable for config.org
            ;; try-complete-lisp-symbol-partially ; before `try-complete-lisp-symbol'
            ;; try-complete-lisp-symbol ; after `try-complete-lisp-symbol-partially'
            )))
#+end_src

** ~tempel~ :: simple template expansions

+ Package :: <https://github.com/minad/tempel>
+ Package :: <https://github.com/Crandel/tempel-collection>

- info :: [[info:autotype#Skeleton Language][(autotype) Skeleton Language]]
- Source :: [[https://github.com/minad/tempel/blob/main/README.org#template-syntax][tempel/README.org at main · minad/tempel · GitHub]]

All the Tempo syntax elements are fully supported.  The syntax
elements are described in detail in the docstring of
~tempo-define-template~ in tempo.el.  We document the important ones
here:

- “string” Inserts a string literal.
- =p=  Inserts an unnamed placeholder field.
- =n=  Inserts a newline.
- =>= Indents with ~indent-according-to-mode~ .
- =r=  Inserts the current region. If no region is active, quits the containing template when jumped to.
- =r>= Acts like =r= , but indent region.
- =n>=  Inserts a newline and indents.
- =&=  Insert newline unless there is only whitespace between line start and point.
- =%=  Insert newline unless there is only whitespace between point and line end.
- =o= Like =%=  but leaves the point before newline.
- =(s NAME)=  Inserts a named field.
- =(p PROMPT <NAME> <NOINSERT>)= Insert an optionally named field with a prompt. The =PROMPT= is displayed directly in the buffer as default value. If =NOINSERT= is non-nil, no field is inserted. Then the minibuffer is used for prompting and the value is bound to =NAME= .
- =(r PROMPT <NAME> <NOINSERT>)= Insert region or act like =(p ...)= .
- =(r> PROMPT <NAME> <NOINSERT>)= Act like =(r ...)= , but indent region.

Furthermore Tempel supports syntax extensions:

- =(p FORM <NAME> <NOINSERT>)= Like =p= described above, but =FORM=  is evaluated.
- =(FORM ...)=  Other Lisp forms are evaluated. Named fields are lexically bound.
- =q=  Quits the containing template when jumped to.


#+begin_src emacs-lisp
(package! tempel
  (setopt tempel-path (file-name-concat ceamx-templates-dir "tempel/*.eld"))

  ;; Require this prefix before triggering template name completion.
  (setopt tempel-trigger-prefix "<")

(define-keymap :keymap (current-global-map)
  "M-+" #'tempel-complete
  "M-*" #'tempel-insert)

  ;; Setup completion at point for Tempel templates.
  (def-hook! +tempel-setup-capf-h ()
    '(conf-mode-hook prog-mode-hook text-mode-hook)
    "Add the Tempel Capf to `completion-at-point-functions'.

`tempel-expand' only triggers on exact matches.  Alternatively
use `tempel-complete' if you want to see all matches, but then
you should also configure `tempel-trigger-prefix', such that
Tempel does not trigger too often when you don't expect it.

NOTE: We add `tempel-expand' *before* the main programming mode
Capf, such that it will be tried first."
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions))))

(after! tempel
  (define-keymap :keymap tempel-map
    "TAB" #'tempel-next
    "S-TAB" #'tempel-previous))

(use-feature! ceamx-completion
  :after tempel
  :functions (ceamx-completion--tempel-include)
  :init
  (add-to-list 'tempel-user-elements #'ceamx-completion--tempel-include))

(package! tempel-collection
  (setup tempel-collection
    (:load-after tempel)))
#+end_src

** ~yasnippet~ :: robust template expansions

- Documentation :: <https://github.com/joaotavora/yasnippet/blob/master/README.mdown>

#+begin_src emacs-lisp
(package! yasnippet
  (setopt yas-snippet-dirs
          (list (file-name-concat ceamx-templates-dir "yasnippet")))

  (defer! 3
    (yas-global-mode 1)))

(after! yasnippet
  (defer! 2
    (require 'hippie-exp))

  (setopt yas-prompt-functions '(yas-completing-prompt
                                 yas-no-prompt))

  ;; Insanely helpful when =key= is sensible, but insanely annoying
  ;; if not.  Unless there is an available snippet expansion, the
  ;; key will still call ~self-insert-command~ as usual.  Note that
  ;; `yas-maybe-expand' is indeed a variable, not a function.
  (keymap-set yas-minor-mode-map "SPC" yas-maybe-expand)
  (keymap-set yas-minor-mode-map "RET" yas-maybe-expand))

(after! (yasnippet hippie-exp)
  (add-hook 'hippie-expand-try-functions-list #'yas-hippie-try-expand -80))
#+end_src

Disable automatic whitespace modifications in snippet files:

<https://joaotavora.github.io/yasnippet/faq.html#org64f1b8c>

#+begin_quote
If there is a newline at the end of a snippet definition file, YASnippet will
add a newline when expanding that snippet. When editing or saving a snippet
file, please be careful not to accidentally add a terminal newline.
#+end_quote

#+begin_src emacs-lisp
(defun +yasnippet-snippet-mode-disable-final-newline-h ()
  "Prevent appendage of a final newline in `snippet-mode' files.
A final newline would be inserted literally into the snippet expansion."
  (setq-local require-final-newline nil))

(add-hook 'snippet-mode-hook #'+yasnippet-snippet-mode-disable-final-newline-h nil t)
#+end_src

** ~spdx~ :: insertable SPDX license headers

- src :: <https://github.com/condy0919/spdx.el>

  #+begin_src emacs-lisp
(package! spdx)
#+end_src

** ~corfu~ :: [CO]mpletion in [R]egion [FU]nction

+ Package :: <https://github.com/minad/corfu>
+ Reference :: <https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html>

#+begin_src emacs-lisp
(package! corfu
  (add-hook 'ceamx-after-init-hook #'global-corfu-mode))

(after! corfu
  (setopt corfu-count 12
          corfu-cycle t
          ;; corfu-max-width 80
          corfu-min-width 20
          corfu-scroll-margin 3)
  ;; cf. `orderless-component-separator'
  (setopt corfu-separator ?_)
  (setopt corfu-on-exact-match 'insert
          corfu-preselect 'prompt
          corfu-quit-at-boundary 'separator
          corfu-quit-no-match t)
  (setopt corfu-echo-delay '(0.3 . 0.3))
  (setopt corfu-popupinfo-delay '(1.25 . 0.5))
  (setopt corfu-auto t
          ;; corfu-auto-delay 0.3
          corfu-auto-delay 1.3
          corfu-auto-prefix 3)

  ;; Setting this here again for good measure, just in case it is
  ;; changed elsewhere.
  (setopt tab-always-indent 'complete)

  ;; Prevent excessive completion-spamming.
  ;; Without this, on Emacs 30.0, typing causes constant `corfu' errors.
  ;; <https://github.com/minad/corfu/discussions/457>
  (setopt text-mode-ispell-word-completion nil)

  (keymap-set corfu-map "M-SPC" #'corfu-insert-separator)

  ;; NOTE: Requires `tab-always-indent' to be set to `complete',
  ;; otherwise TAB will *never* indent!
  (keymap-set corfu-map "TAB" #'corfu-complete)

  (corfu-popupinfo-mode 1)
  (corfu-echo-mode -1)

  ;; Sort candidates by input history.
  (after! savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)))

;; FIXME: `ceamx-completion-corfu-minibuffer-enable-p' not a function
;; maybe?  type mismatch
;; (use-feature! ceamx-completion
;;   :after corfu
;;   :functions (ceamx-completion-corfu-minibuffer-enable-p)
;;   :init
;;   (setopt global-corfu-minibuffer #'ceamx-completion-corfu-minibuffer-enable-p))
#+end_src

** ~corfu-terminal~ :: Corfu terminal support

+ Package :: <https://codeberg.org/akib/emacs-corfu-terminal>

Corfu-endorsed solution to making it usable in terminal.

See also ~popon~, the utility library powering the interface.

#+begin_src emacs-lisp
(package! corfu-terminal
  (after! (corfu)
    (unless (display-graphic-p)
      (corfu-terminal-mode 1))))
#+end_src

** ~kind-icon~ :: icons for ~completion-at-point~ candidates :icons:

+ Package :: <https://github.com/jdtsmith/kind-icon>

#+begin_src emacs-lisp
(package! kind-icon
  (require 'kind-icon)

  (setopt kind-icon-use-icons (display-graphic-p))
  (setopt kind-icon-blend-background t)

  (after! corfu
    (setopt kind-icon-default-face 'corfu-default)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src

*** Reduce icon size slightly

If you change this value, make sure to call ~kind-icon-reset-cache~ afterwards,
otherwise the icon size will likely not be accurate.

#+begin_src emacs-lisp
(after! kind-icon
  (plist-put kind-icon-default-style :height 0.9))
#+end_src

*** Update icon apperance after enabling a theme

#+begin_src emacs-lisp
(after! kind-icon
  ;; <https://github.com/jdtsmith/kind-icon/issues/34#issuecomment-1668560185>
  (add-hook 'ceamx-after-enable-theme-hook #'kind-icon-reset-cache))
#+end_src

** ~nerd-icons-completion~ :: icons for minibuffer completions :icons:minibuffer:

#+begin_src emacs-lisp
(package! nerd-icons-completion
  (after! marginalia
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)))
#+end_src

** ~cape~ :: [C]ompletion-[A]t-[P]oint [E]xtensions

#+begin_src emacs-lisp
(package! cape
  ;; Add to the global default value of
  ;; `completion-at-point-functions' which is used by
  ;; `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of
  ;; buffer-local completion functions takes precedence over the
  ;; global list.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  (add-hook 'completion-at-point-functions #'cape-history)

  (after! eglot
    ;; NOTE: This may cause a significant performance hit.  Consider
    ;; enabling per-language-server.
    ;; <https://github.com/minad/corfu/wiki#continuously-update-the-candidates>
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)))
#+end_src
** Add command to export completion candidates to a writable buffer

#+begin_src emacs-lisp
(use-feature! ceamx-completion
  :after minibuffer
  :commands (ceamx-completion/embark-export-write)
  :init
  (keymap-set minibuffer-local-map "C-c C-e" #'ceamx-completion/embark-export-write))
#+end_src
** ~embark~ :: [E]macs [M]ini-[B]uffer [A]ctions [R]ooted in [K]eymaps

- Package :: <https://github.com/oantolin/embark>

#+begin_src emacs-lisp
(package! embark
  ;; Embark is a heavy package.  Load in the background to avoid
  ;; delays upon invoking autoloaded commands.
  (defer! 3
    (require 'embark))

  ;; NOTE: This key might be bound to emoji input in GNOME Desktop.
  ;; However, I have not encountered a conflict on GNOME, so I must be
  ;; doing something conveniently correct in my GNOME configurations.
  ;; FWIW, I have enabled the Emacs-style keybindings there.
  (keymap-global-set "C-." #'embark-act)

  ;; The result of calling `embark-dwim' on a symbol still ends up
  ;; calling `xref-find-definitions' as the default do-what-i-mean
  ;; action.
  (keymap-global-set "M-." #'embark-dwim) ; orig. `xref-find-definitions'

  (keymap-global-set "C-h b" #'embark-bindings) ; orig: `describe-bindings'
  (keymap-global-set "C-h B" #'describe-bindings)

  (unless (bound-and-true-p which-key-mode)
    (setopt prefix-help-command #'embark-prefix-help-command)))

(after! embark
  (setopt embark-indicators '(;; embark--vertico-indicator
                              ;; embark-mixed-indicator
                              embark-minimal-indicator
                              embark-highlight-indicator
                              embark-isearch-highlight-indicator))
  (setopt embark-mixed-indicator-delay 2.0)

  ;; You can reverse the configured behavior at any time by calling `embark-act'
  ;; with a "C-u" prefix argument.
  ;; For finer control, e.g.: `((kill-buffer . t) (t . nil))'
  ;; This only affects the behavior of `embark-act' inside the minibuffer.
  (setopt embark-quit-after-action nil)

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
      '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
        nil
        (window-parameters (mode-line-format . none)))))

(after! vertico
  (add-to-list 'vertico-multiform-categories '(embark-keybinding grid)))

(package! embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

Define Embark actions for acting on tabs:

#+begin_src emacs-lisp
(after! embark
  (defvar-keymap ceamx-embark-tab-actions
    :doc "Keymap for Embark actions for `tab-bar' tabs (when mentioned by name)."
    :parent embark-general-map

    "s" #'tab-bar-select-tab-by-name
    "d" #'tab-bar-close-tab-by-name
    "R" #'tab-bar-rename-tab-by-name)

  (add-to-list 'embark-keymap-alist '(tab . ceamx-embark-tab-actions))

  (push #'embark--confirm
        (alist-get 'tab-bar-close-tab-by-name
                   embark-pre-action-hooks)))
#+end_src

** Provide feature ~ceamx-init-completion~

#+begin_src emacs-lisp
(provide 'ceamx-init-completion)
;;; ceamx-init-completion.el ends here
#+end_src

* Window & Buffer Management :: =window=
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-window.el
:END:

** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-window.el :comments no
;; -*- lexical-binding: t; -*-

(require 'ceamx-simple)
(require 'ceamx-window)
#+end_src

** Define the user option specifying a fallback buffer

#+begin_src emacs-lisp
(defcustom ceamx-fallback-buffer-name "*scratch*"
  "The name of the buffer to fall back to if no other buffers exist.
The buffer will be created if it does not exist."
  :group 'ceamx
  :type '(string))
#+end_src

** Configure window behavior for help buffers

#+begin_src emacs-lisp
;; Focus newly-opened help windows.
(setopt help-window-select t)

;; Also focus newly-opened manpages, which still do not follow `display-buffer'
;; rules (as of <2024-03-06>).
(setopt Man-notify-method 'aggressive)
#+end_src

** Disambiguate/uniquify buffer names

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt uniquify-buffer-name-style 'forward)
  (setopt uniquify-separator "/")

  ;; Rename after killing uniquified buffer.
  (setopt uniquify-after-kill-buffer-p t)

  ;; Don't muck with special buffers.
  (setopt uniquify-ignore-buffers-re "^\\*"))
#+end_src

** General buffer display settings :buffer:frame:display_buffer:

#+begin_src emacs-lisp
(setopt switch-to-buffer-in-dedicated-window 'pop)

;; Ensure interactive buffer switching behaves according to expectations.
(setopt switch-to-buffer-obey-display-actions t)

;; Hide buffer until there's output.
;; Prevents an extra window appearing during init.
(setopt async-shell-command-display-buffer nil)

;; TODO: causes which-key squishing against tiny window maybe?
(setopt fit-window-to-buffer-horizontally t)

;; TODO: this might be a solution to issues with childframes for embark etc.
(setopt fit-frame-to-buffer t)

;; (setopt even-window-sizes nil)
(setopt even-window-sizes 'height-only)
(setopt window-combination-resize t)
(setopt window-sides-vertical nil)
(setopt window-resize-pixelwise t)

(setopt display-buffer-base-action
        '((display-buffer-reuse-window
           display-buffer-in-previous-window)))
#+end_src

** Declare rules for displaying buffers with ~display-buffer-alist~ :display_buffer:

- Source :: <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>

<karthink> has a helpful summary of ~display-buffer~ action functions and
alist entries in their Emacs configuration, which I am also including here
for my own reference. Note that this list is not necessarily complete.

~display-buffer-action-functions~ are:

- ~display-buffer-same-window~ :: Use the selected window
- ~display-buffer-reuse-window~ :: Use a window already showing the buffer
- ~display-buffer-reuse-mode-window~ :: Use a window with the same major-mode
- ~display-buffer-in-previous-window~ :: Use a window that did show the buffer before
- ~display-buffer-use-some-window~ :: Use some existing window
- ~display-buffer-pop-up-window~ :: Pop up a new window
- ~display-buffer-below-selected~ :: Use or pop up a window below the selected one
- ~display-buffer-at-bottom~ :: Use or pop up a window at the bottom of the selected frame
- ~display-buffer-pop-up-frame~ :: Show the buffer on a new frame
- ~display-buffer-in-child-frame~ :: Show the buffer in a child frame
- ~display-buffer-no-window~ :: Do not display the buffer and have ~display-buffer~ return nil immediately

Action alist entries are:

- ~inhibit-same-window~ :: A non-nil value prevents the sam
    window from being used for display
- ~inhibit-switch-frame~ :: A non-nil value prevents any fram
    used for showing the buffer from being raised or selected
- ~reusable-frames~ :: The value specifies the set of frames t
    search for a window that already displays the buffer.
    Possible values are nil (the selected frame), t (any live
    frame), visible (any visible frame), 0 (any visible or
    iconified frame) or an existing live frame.
- ~pop-up-frame-parameters~ :: The value specifies an alist o
    frame parameters to give a new frame, if one is created.
- ~window-height~ :: The value specifies the desired height of th
    window chosen and is either an integer (the total height of
    the window), a floating point number (the fraction of its
    total height with respect to the total height of the frame's
    root window) or a function to be called with one argument -
    the chosen window.  The function is supposed to adjust the
    height of the window; its return value is ignored.  Suitable
    functions are ~shrink-window-if-larger-than-buffer~ and
    ~fit-window-to-buffer~.
- ~window-width~ :: The value specifies the desired width of th
    window chosen and is either an integer (the total width of
    the window), a floating point number (the fraction of its
    total width with respect to the width of the frame's root
    window) or a function to be called with one argument - the
    chosen window.  The function is supposed to adjust the width
    of the window; its return value is ignored.
- ~preserve-size~ :: The value should be either (t . nil) t
    preserve the width of the chosen window, (nil . t) to
    preserve its height or (t . t) to preserve its height and
    width in future changes of the window configuration.
- ~window-parameters~ :: The value specifies an alist of windo
    parameters to give the chosen window.
- ~allow-no-window~ :: A non-nil value means that `display-buffer
    may not display the buffer and return nil immediately.


    <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>


    #+begin_src emacs-lisp
(setopt display-buffer-alist
        `(
          ;; (,(rx "*" (or "Agenda Commands" "Org Select") "*")
          ;;   (display-buffer-below-selected
          ;;     display-buffer-in-side-window)
          ;;   (body-function . select-window)
          ;;   (window-parameters . ((mode-line-format . nil))))

          (,ceamx-simple-checkers-buffer-names-regexp
           (display-buffer-in-direction
            display-buffer-in-side-window)
           (window-parameters . ((no-other-window . t))))

          ;; TODO: is there not a simpler way than using `ceamx-simple-buffer-which-mode'?
          ;; e.g. `derived-mode-p' or similar
          ((lambda (buf act) (member (ceamx-simple-buffer-which-mode buf) ceamx-simple-message-modes-list))
           (display-buffer-at-bottom
            display-buffer-in-side-window))

          (,(rx "*" (group (or "Compile-Log" "Messages" "Warnings")) "*")
           (display-buffer-at-bottom
            display-buffer-in-side-window
            display-buffer-in-direction))

          (,(rx "*Backtrace*")
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . bottom))))
    #+end_src

** ~breadcrumb~ :: header-line wayfinding

- Package :: <https://github.com/joaotavora/breadcrumb>

#+begin_src emacs-lisp
(package! breadcrumb
  (add-hook 'ceamx-after-init-hook #'breadcrumb-mode))
#+end_src

** ~popper~: Summon and dismiss "popup" windows :popups:package:

- Website :: <https://github.com/karthink/popper>

#+begin_src emacs-lisp
(package! popper
  (define-keymap :keymap (current-global-map)
    "C-`" #'popper-toggle
    "C-~" #'popper-cycle
    "C-M-`" #'popper-toggle-type)

  (setopt popper-reference-buffers
          (append
           ceamx-simple-help-modes-list
           ceamx-simple-help-buffer-names-list
           ceamx-simple-manual-modes-list
           ceamx-simple-repl-modes-list
           ceamx-simple-repl-buffer-names-list
           ceamx-simple-grep-modes-list
           '(+popper-current-buffer-popup-p)
           '(Custom-mode
             compilation-mode
             messages-buffer-mode)
           (list
            ceamx-simple-checkers-buffer-names-regexp)

           ;; The "Home" tabspace, if enabled, will display the Messages buffer.
           (unless (fboundp 'ceamx-workspace-open-tabspace-after-init-h)
             '("\\*Messages\\*"))

           `(,(rx "Output*" eol)
             ,(rx "*" (or
                       "Async-native-compile-log"
                       "Backtrace"
                       "Compile-Log"
                       "Completions"
                       "compilation"
                       "elpaca-diff"
                       "Shell Command Output"
                       "vc"
                       "Warnings")
               "*")
             "^\\*Embark Export"
             "^Calc:"
             "\\*Async Shell Command\\*"
             ;; ("\\*Async Shell Command\\*" . hide)
             ("\\*Detached Shell Command\\*" . hide))))

  ;; Load as early as possible to catch popups as early as possible.
  (popper-mode)
  (popper-echo-mode))
#+end_src

*** Configure overrides in ~popper-repeat-map~

#+begin_src emacs-lisp
(after! popper
  (defvar-keymap popper-repeat-map
    :repeat t
    "`" #'popper-cycle
    "~" #'popper-cycle-backwards))
#+end_src

*** DISABLED Configure popup display control rules manually
:PROPERTIES:
:header-args: :tangle no
:END:

<https://github.com/karthink/popper/blob/master/README.org#popup-placement-controlled-using-display-buffer-alist-or-shackleel>

#+begin_src emacs-lisp
(after! popper
  (setopt popper-display-control nil)

  (prependopt! display-buffer-alist
               '((popper-display-control-p
                  (ceamx-window-display-popup)
                  (window-height . ,popper-window-height)))))
#+end_src

** Restore previous window configurations with ~winner-mode~ [builtin] :history:

#+begin_src emacs-lisp
(add-hook 'ceamx-after-init-hook #'winner-mode)
#+end_src

** =golden-ratio=: Automatically resize windows according to Ancient Wisdom :package:

#+begin_src emacs-lisp
(package! golden-ratio
  (setopt golden-ratio-auto-scale t)
  (setopt golden-ratio-max-width 100))
#+end_src

** =ace-window=: Interactively manage windows :package:

<https://github.com/abo-abo/ace-window>

#+begin_src emacs-lisp
(package! ace-window
  ;; Same frame only. While it'd be nice to use the default (global), I really
  ;; dislike that it orders window numbers leads to jarring gaps in window
  ;; numbers in the same frame. For example, frame A might have windows numbered
  ;; 1 and 3 and frame B will have window 2.
  (setopt aw-scope 'frame))
#+end_src

** =transpose-frame=: Transpose and rotate a frame's windows :package:

#+begin_src emacs-lisp
(package! transpose-frame)
#+end_src

** =lentic=: Create decoupled views of the same content

#+begin_src emacs-lisp
(package! lentic
  (global-lentic-mode))

(with-eval-after-load 'lentic
  (add-to-list 'safe-local-variable-values '(lentic-init . lentic-orgel-org-init)))
#+end_src

** ~activites~ :: organize window+buffer by activity :package:tabs:

- Website :: <https://github.com/alphapapa/activities.el>

#+begin_src emacs-lisp
(require 'ceamx-lib)

(package! activities
  (activities-mode)

  (when tab-bar-mode
    (activities-tabs-mode)))
#+end_src

*** Activities.el Keybindings :keybinds:

#+begin_src emacs-lisp
(defun ceamx-after-init-define-activities-keys-h ()
  "Define keybindings for `activities' late to override `edebug'.
Intended for use as a hook on `ceamx-after-init-hook'."
  (setq edebug-inhibit-emacs-lisp-mode-bindings t)

  ;; (keymap-global-unset "C-x C-a" t)
  (keymap-global-set "C-x C-a" (cons "Activities" (define-prefix-command 'ceamx-activities-prefix)))

  ;; TODO: still shares bindings with edebug which is confusing
  (define-keymap :keymap (current-global-map)
    "C-x C-a C-n" #'activities-new
    "C-x C-a C-d" #'activities-define
    "C-x C-a C-a" #'activities-resume
    "C-x C-a C-s" #'activities-suspend
    "C-x C-a C-k" #'activities-kill
    "C-x C-a RET" #'activities-switch

    "C-x C-a b" #'activities-switch-buffer
    "C-x C-a g" #'activities-revert
    "C-x C-a l" #'activities-list))

(add-hook 'ceamx-after-init-hook #'ceamx-after-init-define-activities-keys-h)
#+end_src

** DISABLED ~beframe~ :: scope buffer lists to frame :package:
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
(package! beframe
  ;; (setopt beframe-global-buffers '("*scratch*" "*Messages*" "*Backtrace*"))

  (beframe-mode 1))
#+end_src

*** Provide Consult integration :consult:

- source :: <https://protesilaos.com/emacs/beframe#h:1c2d3d64-aa7b-4585-a418-ccedbb548b38>

#+begin_src emacs-lisp
(defface +beframe-buffer
  '((t :inherit font-lock-string-face))
  "Face for `consult' framed buffers.")

(defun +beframe-buffer-names-sorted (&optional frame)
  "Return the list of buffers from `beframe-buffer-names' sorted by visibility.
With optional argument FRAME, return the list of buffers of FRAME."
  (beframe-buffer-names frame :sort #'beframe-buffer-sort-visibility))

(after! (beframe consult)
  (declare-function consult--buffer-state "consult")

  (defvar +beframe-consult-source
    `(:name "Frame-specific buffers (current frame)"
      :narrow ?F
      :category buffer
      :face +beframe-buffer
      :history beframe-history
      :items ,#'+beframe-buffer-names-sorted
      :action ,#'switch-to-buffer
      :state ,#'consult--buffer-state))

  (add-to-list 'consult-buffer-sources '+beframe-consult-source))
#+end_src

*** Provide ~ibuffer~ integration :ibuffer:

- source :: <https://protesilaos.com/emacs/beframe#h:ae6c4c6b-179a-4d35-86b5-8b63bf614697>

#+begin_src emacs-lisp
(defun +beframe-buffer-in-frame-p (buf frame)
  "Return non-nil if BUF is in FRAME."
  (memq buf (beframe-buffer-list (beframe-frame-object frame))))

(defun +beframe-frame-name-list ()
  "Return list with frame names."
  (mapcar #'car (make-frame-names-alist)))

(defun +beframe-generate-ibuffer-filter-groups ()
  "Create a set of ibuffer filter groups based on the Frame of buffers."
  (mapcar
   (lambda (frame)
     (list (format "%s" frame)
           (list 'predicate '+beframe-buffer-in-frame-p '(current-buffer) frame)))
   (+beframe-frame-name-list)))

(after! (beframe ibuffer)
  (setq ibuffer-saved-filter-groups
        `(("Frames" ,@(+beframe-generate-ibuffer-filter-groups))))

  (define-ibuffer-filter frame
      "Limit current view to buffers in frames."
    (:description "frame")
    (memq buf (beframe-buffer-list))))
#+end_src

** ~ceamx/window-dispatch~: a window-management menu :transient:menu:keybinds:

#+begin_src emacs-lisp
(transient-define-prefix ceamx/window-dispatch ()
  "Window management transient."
  :transient-suffix 'transient--do-stay
  [["Move"
    ("h" "left" windmove-left)
    ("j" "down" windmove-down)
    ("k" "up" windmove-up )
    ("l" "right" windmove-right)
    ("w" "sel" ace-window)]

   ["Resize"
    ("=" "bal" balance-windows)
    ("+" "bal: area" balance-windows-area)
    ("-" "fit: buffer" fit-window-to-buffer)]

   ["Buffer"
    ("b" "buf" consult-buffer)
    ;; ("f" "ff: p" project-find-file)
    ("f" "file" find-file )
    ("F" "file" find-file-other-window)
    ("g" "grep" consult-ripgrep)]

   ["Swarp"
    ("H" "left" ceamx/window-move-left)
    ("J" "down" ceamx/window-move-down)
    ("K" "up" ceamx/window-move-up)
    ("L" "right" ceamx/window-move-right)
    ""
    ("s" "swap" ace-swap-window)
    ("2" "spl: dn" split-window-below)
    ("3" "spl: rt" split-window-right)
    ("SPC" "swap-or-rotate" ceamx/swap-or-rotate-windows)]

   ["Scroll"
    ;; TODO: allow selecting a window (with infix?) to act upon
    ;; NOTE: These are the correct scroll direction commands, which might
    ;; appear to be reversed when comparing with labels.
    ("." "left" scroll-right)
    ("," "right" scroll-left)
    ("SPC" "down" scroll-up)
    ("DEL" "up" scroll-down)]

   ["Lifecycle"
    ("d" "del (this)" delete-window)
    ("D" "del (select)" ace-delete-window)
    ;; ("D" "del: o" delete-other-windows :transient nil)
    ("u" "undo" winner-undo)
    ("U" "redo" winner-redo)
    ""
    ("0" "del" delete-window)
    ("1" "del other" delete-other-windows)
    ""
    ("S" "[ ] sides" window-toggle-side-windows)
    ("`" "[ ] popups" popper-toggle)
    ""
    ("q" "quit" transient-quit-all)]])
#+end_src

** Provide the ~ceamx-init-window~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-window.el :comments no
(provide 'ceamx-init-window)
;;; ceamx-init-window.el ends here
#+end_src

* Version Control :: =vcs= :vcs:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-vcs.el
:END:

** Define the =lisp/ceamx-init-vcs.el= file header

#+begin_src emacs-lisp :tangle lisp/ceamx-init-vcs.el :comments no
;;; ceamx-init-vcs.el --- Version control support  -*- lexical-binding: t;  -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;; Code:

(require 'ceamx-paths)
(require 'ceamx-lib)
#+end_src

** Set up ~ediff~

#+begin_src emacs-lisp
(setup ediff
  (:autoload #'ediff-buffers
             #'ediff-files
             #'ediff-buffers3
             #'ediff-files3)
  (setopt ediff-keep-variants nil
          ediff-make-buffers-readonly-at-startup nil
          ediff-merge-revisions-with-ancestor t
          ediff-show-clashes-only t
          ;; Keep the ~ediff~ control panel in the same frame.
          ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src

** Set up ~diff-mode~

#+begin_src emacs-lisp
(setup diff-mode
  (setopt diff-default-read-only t)
  (setopt diff-advance-after-apply-hunk t)
  (setopt diff-update-on-the-fly t)
  (setopt diff-refine 'font-lock)
  (setopt diff-font-lock-prettify t
          diff-font-lock-syntax 'hunk-also))
#+end_src

** Set up version control integration with ~vc-mode~

#+begin_src emacs-lisp
;; Version control support is essential as soon as possible.
(require 'vc)

(setopt vc-follow-symlinks t)
(setopt vc-handled-backends '(Git))

;; NOTE: According to the documentation for ~diff-hl~, the diff
;; algorithm cannot be determined based on the user's global git
;; config =diff.algorithm= setting.  The website source they linked to
;; has disappeared with no archived page available.  So I have not
;; verified this for certain.
(setopt vc-git-diff-switches '("--histogram"))
#+end_src

** Set up project management with =project.el=

#+begin_src emacs-lisp
(setup project
  (:global "C-x p ." #'project-dired
           "C-x p RET" #'project-dired
           "C-x p DEL" #'project-forget-project)
  (setopt project-vc-extra-root-markers '(".project"))
  (setopt project-key-prompt-style t))
#+end_src

** ~diff-hl~: Display version control status indicators in margins

- Website :: <https://github.com/dgutov/diff-hl>

NOTE: Fringe indicators will conflict with Flycheck.

#+begin_src emacs-lisp
(package! diff-hl
  (add-hook 'ceamx-after-init-hook #'global-diff-hl-mode)

  ;; Display indicators in margins instead of fringes.  This will work
  ;; in terminal sessions and also avoid the fringe conflict with
  ;; other indicators like Flycheck errors.
  (add-hook 'ceamx-after-init-hook #'diff-hl-margin-mode)

  ;; Support mouse click on indicator to show hunk.
  (when (display-graphic-p)
    (add-hook 'ceamx-after-init-hook #'diff-hl-show-hunk-mouse-mode))

  ;; Committing changes using a package other than `vc' requires integration.
  ;; <https://github.com/dgutov/diff-hl#integration>
  (after! magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))

  (after! dired
    (add-hook 'dired-mode-hook #'diff-hl-dired-mode)))
#+end_src

** ~git-modes~ :: major modes for Git-related files

- website :: <https://github.com/magit/git-modes>

#+begin_src emacs-lisp
(package! git-modes)
#+end_src

** ~git-timemachine~: Interactively explore files' Git histories

<https://codeberg.org/pidu/git-timemachine>

#+begin_src emacs-lisp
(package! git-timemachine
  (keymap-global-set "C-x v t" #'git-timemachine))

(after! git-timemachine
  ;; XXX: broken, see `ceamx/git-timemachine-dispatch'
  ;; (add-hook 'git-timemachine-mode-hook #'ceamx/git-timemachine-dispatch)

  (define-keymap :keymap git-timemachine-mode-map
    "M-p" #'git-timemachine-show-previous-revision
    "M-n" #'git-timemachine-show-next-revision
    "M-b" #'git-timemachine-blame
    "M-c" #'git-timemachine-show-commit)

  ;; FIXME: like `ceamx/window-dispatch', this breaks because the commands
  ;; should be run in the original buffer/window
  (transient-define-prefix ceamx/git-timemachine-dispatch ()
    "Transient menu for `git-timemachine-mode'."
    ;; :transient-suffix 'transient--do-stack
    [["Navigation"
      ("p" "previous revision" git-timemachine-show-previous-revision :transient t)
      ("n" "next revision" git-timemachine-show-next-revision :transient t)]
     ["Display"
      ("b" "blame" git-timemachine-blame)
      ("c" "commit" git-timemachine-show-commit )]
     [""
      ("q" "quit" git-timemachine-quit :transient nil)]])

  (declare-function git-timemachine--show-minibuffer-details "git-timemachine")

  ;; via <https://github.com/doomemacs/doomemacs/blob/07fca786154551f90f36535bfb21f8ca4abd5027/modules/emacs/vc/config.el#L76C1-L90C47>
  (def-advice! +git-timemachine--details-in-header-line-a (revision)
    :override #'git-timemachine--show-minibuffer-details
    "Show REVISION details in the header-line instead of the minibuffer."
    (let* ((date-relative (nth 3 revision))
           (date-full (nth 4 revision))
           (author (if git-timemachine-show-author (concat (nth 6 revision) ": ") ""))
           (sha-or-subject (if (eq git-timemachine-minibuffer-detail 'commit) (car revision) (nth 5 revision))))
      (setq header-line-format
            (format "%s%s [%s (%s)]"
                    (propertize author 'face 'git-timemachine-minibuffer-author-face)
                    (propertize sha-or-subject 'face 'git-timemachine-minibuffer-detail-face)
                    date-full date-relative)))))
#+end_src

** ~magit~ :: a Git porcelain inside Emacs

#+begin_src emacs-lisp
(package! magit
  (define-keymap :keymap (current-global-map)
    "C-x g" #'magit-status
    "C-x M-g" #'magit-dispatch))

(after! magit
  (setopt magit-diff-refine-hunk t)
  ;; Avoid side-effects (e.g. formatting-on-save)
  (setopt magit-save-repository-buffers nil)
  (setopt magit-process-finish-apply-ansi-colors t)

  (setopt magit-bury-buffer-function #'magit-restore-window-configuration)
  ;; <https://magit.vc/manual/magit/Switching-Buffers.html#index-magit_002ddisplay_002dbuffer_002dfullframe_002dstatus_002dv1>
  (setopt magit-display-buffer-function
          #'magit-display-buffer-fullframe-status-v1)

  (define-keymap :keymap magit-status-mode-map
    "_" #'magit-revert
    ;; "V" nil
    "x" #'magit-discard)

  (transient-append-suffix 'magit-commit "-n"
    '("-S" "Disable GPG signing" "--no-gpg"))

  (transient-append-suffix 'magit-fetch "-p"
    '("-t" "Fetch all tags" ("-t" "--tags")))

  (transient-append-suffix 'magit-pull "-r"
    '("-a" "Autostash" "--autostash")))
#+end_src

*** Keep ~magit-section~ sections at the top of the window

- Reference :: <https://emacs.stackexchange.com/questions/3380/how-to-scroll-up-when-expanding-a-section-in-magit-status#comment4819_3383>

#+begin_src emacs-lisp
(after! magit
  (remove-hook 'magit-section-movement-hook 'magit-hunk-set-window-start)
  (add-hook 'magit-section-movement-hook #'magit-section-set-window-start))
#+end_src

*** Show ~magit-process~ output popup after N seconds :popups:

This is pretty important when a project has =pre-commit= or =commit-msg=
hooks that are wont to fail.  I also find it helpful for getting
insight into long-running =post-receive= hooks (and similar).

#+begin_src emacs-lisp
(after! magit
  (setopt magit-process-popup-time 3))
#+end_src

*** =alphapapa/magit-todo= :: display codetag comment reminders in ~magit-status~

- Docs :: <https://github.com/alphapapa/magit-todos/blob/master/README.org>

#+begin_src emacs-lisp
(package! magit-todos
  (after! magit
    (require 'magit-todos)
    (magit-todos-mode 1)))
#+end_src

**** TODO Customize appearance to always keep folded, to reduce noise

e.g. "M-4" should not expand this section -- it should only be expanded manually

** ~magit-repos~

#+begin_src emacs-lisp
(setup magit-repos
  ;; FIXME: Make sure feature is available
  ;;  (:load-after magit)
  (:autoload #'magit-list-repositories)
  (setopt magit-repository-directories
          `((,(file-name-concat ceamx-projects-dir "work") . 2)
            (,(file-name-concat ceamx-projects-dir "sources") . 1)
            (,(file-name-concat ceamx-projects-dir "contrib") . 2))))
#+end_src

** DISABLED ~forge~ :: interact with online source code forges through Magit

*Warning*: /development versions of ~forge~ may expect a different ~magit~
version!/ Make sure to pin ~forge~ to a stable tag.  And then, make sure
~magit~ is pinned to a stable tag.  And then, make sure every other
Magit dependency is pinned...

#+begin_src emacs-lisp
;; (package! (forge :tag "v0.4.6"))

;; (after! magit
;;   (require 'forge)

;;   ;; FIXME: not yet released
;;   ;; (keymap-set vc-prefix-map "o" #'forge-browse-commit)

;;   )
#+end_src

Forge will prefer, in order, =upstream= and then =origin=.  I use that convention
for repositories where I am a contributor.  For personal repositories, I tend to
use Git remotes named after the forge.  For example, =github= or =codeberg=.  In
those cases, the recommended option for my setup is to set the Git config
setting =forge.remote= /per repository/ (not globally).

#+begin_src shell :tangle no
git config forge.remote 'github'
#+end_src

*** Set up GitHub token authentication :secrets:

- Docs :: <https://magit.vc/manual/ghub.html#Creating-and-Storing-a-Token>
- Docs :: <https://magit.vc/manual/forge.html#Token-Creation>
- Docs :: [[info:auth#The Unix password store][info "(auth) The Unix password store"]]

Create the token at https://github.com/settings/tokens/new with these scopes:

+ =repo=  grants full read/write access to private and public repositories.
+ =user=  grants access to profile information.
+ =read:org=  grants read-only access to organization membership.

Add the token to the password store:

  #+begin_src shell :tangle no
pass insert api.github.com/montchr^forge
#+end_src

Note that =^forge= is required by the =ghub= backend to denote the package using the
stored token:

#+begin_quote
The default Auth-Source backends only support storing three values per entry;
the "machine", the "login" and the "password". Because Ghub uses separate tokens
for each package, it has to squeeze four values into those three slots, and it
does that by using "USERNAME /^PACKAGE/ " as the "login".
#+end_quote

** Provide the ~ceamx-init-vcs~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-vcs.el :comments no
(provide 'ceamx-init-vcs)
;;; ceamx-init-vcs.el ends here
#+end_src

* Language Support :: =langs=
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-langs.el
:END:

** Requirements

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

** Programming modes

#+begin_src emacs-lisp
(after! prog-mode
  (define-keymap :keymap prog-mode-map
    ;; Move forward out of one sexp level
    "C-M-d" #'up-list))
#+end_src

#+begin_src emacs-lisp
(def-hook! ceamx-init-lang-prog-mode-h ()
  '(prog-mode-hook)
  "Enable load-order-dependent features and defaults for all `prog-mode'-derived major modes.
To ensure a predictable execution order, condition checks on
`boundp'/`fboundp' are preferable to using `after!' or
`with-eval-after-load', as the latter may result in a non-deterministic
execution order."

  ;; `highlight-function-calls-mode' should be enabled after other highlighters
  ;; (e.g. `rainbow-delimiters-mode'), according to its readme.
  (when (fboundp 'highlight-function-calls-mode)
    (highlight-function-calls-mode 1)))
#+end_src

** ~smart-newline~: a newline command for programming modes

#+begin_src emacs-lisp
(use-package smart-newline
  ;; :ensure t
  :hook (prog-mode . smart-newline-mode))
#+end_src

** ~dumb-jump~: multi-lang do-what-i-mean jump-to-definition

- Package :: <https://github.com/jacktasia/dumb-jump>

#+begin_src emacs-lisp
(package! dumb-jump
  ;; Add to end of `xref-backend-functions' as a dumb fallback when
  ;; there are no smart options.
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate 100)

  (after! (hydra)
    ;; via <https://github.com/jacktasia/dumb-jump?tab=readme-ov-file#hydra-for-effieciency>
    (defhydra ceamx-prog-dumb-jump-dispatch (:color blue :columns 3)
      "Jump (dumbly)"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back"))))
#+end_src

** ~rainbow-mode~: Colorize color names and hexcodes in buffers :theme:

<https://elpa.gnu.org/packages/rainbow-mode.html>

#+begin_src emacs-lisp
(package! rainbow-mode)
#+end_src

** DISABLED ~prism~: disperse structural forms into depth-based color strata

Not my cup of tee...

#+begin_src emacs-lisp :tangle no
(use-package prism
  ;; :ensure t
  :hook (((lisp-mode emacs-lisp-mode) . prism-mode)
         ((python-mode yaml-mode) . prism-whitespace-mode))
  :config
  (setopt prism-num-faces 16)
  (after! modus-themes
    (prism-set-colors
      :desaturations '(0)               ; do not change
      :lightens '(0)                    ; do not change

      ;; 4-color:
      ;; :colors (modus-themes-with-colors
      ;;           (list blue
      ;;                 magenta
      ;;                 magenta-cooler
      ;;                 green-warmer))

      ;; 8-color:
      ;; :colors (modus-themes-with-colors
      ;;           (list blue
      ;;                 magenta
      ;;                 magenta-cooler
      ;;                 cyan-cooler
      ;;                 fg-main
      ;;                 blue-warmer
      ;;                 red-cooler
      ;;                 cyan))

      ;; 16-color:
      :colors (modus-themes-with-colors
                (list fg-main
                      magenta
                      cyan-cooler
                      magenta-cooler
                      blue
                      magenta-warmer
                      cyan-warmer
                      red-cooler
                      green
                      fg-main
                      cyan
                      yellow
                      blue-warmer
                      red-warmer
                      green-cooler
                      yellow-faint)))))
#+end_src

** ~hl-todo~: Highlight "TODO" and other codetags in comments and strings

- website :: <https://github.com/tarsius/hl-todo>
- reference :: <https://peps.python.org/pep-0350/#specification>

#+begin_src emacs-lisp
(use-package hl-todo
  ;;:ensure t
  :hook (prog-mode . hl-todo-mode))
#+end_src

** ~devdocs~: Peruse local ~devdocs~ docsets

- Source code :: <https://github.com/astoff/devdocs.el>

NOTE: Must run ~devdocs-install~ before a docset is available for reference.

#+begin_src emacs-lisp
(use-package devdocs
  ;; :ensure t
  :defer t

  :bind
  (:map help-map
        ("D" . devdocs-lookup))

  :init
  (after! popper
    (add-to-list 'popper-reference-buffers "\\*devdocs\\*"))

  :config
  ;; FIXME: on a stale timer! every week! not every session...
  ;; (devdocs-update-all)

  )
#+end_src

WIP: Define some helper functions for installing docsets automatically:

#+begin_src emacs-lisp :noweb-ref lib-prog
(defun +devdocs--doc-directory-exists-p (slug)
  "Whether the directory for the doc SLUG exists."
  (file-directory-p (expand-file-name slug devdocs-data-dir)))

(defun +devdocs--doc-installed-p (slug)
  "Whether the document named SLUG is installed.
Installation can be defined as whether there exists a metadata
file inside a directory named SLUG within `devdocs-data-dir'."
  (defvar devdocs-data-dir)
  (let ((file (expand-file-name (concat slug "/metadata") devdocs-data-dir)))
    (file-exists-p file)))

(defun +devdocs-maybe-install (doc)
  "Install the `devdocs' documentation set for DOC if not already installed.
DOC is as in `devdocs-install'."
  (declare-function devdocs-install "devdocs")
  (unless (+devdocs--doc-installed-p doc)
    (devdocs-install doc)))

(defun +devdocs-maybe-install-docs (docs)
  "Install each `devdocs' documentation set in DOCS if not already installed.
DOCS is a quoted list of `devdocs' documentation identifiers as
accepted by `+devdocs-maybe-install'."
  (dolist (doc docs)
    (+devdocs-maybe-install doc)))

;; FIXME: return t if exists, whatever if new, otherwise throw
(defun ceamx/devdocs-maybe-install (doc)
  "Install the `devdocs' documentation set for DOC if not already installed.
DOC is as in `devdocs-install'."
  ;; TODO: prompt for selecting from available docs (see `devdocs-install')
  (interactive "s")
  (+devdocs-maybe-install doc))
#+end_src

** Display multiple composed messages inside ~eldoc~

#+begin_src emacs-lisp
(setopt eldoc-documentation-function #'eldoc-documentation-compose)
#+end_src

** Linting files with the builtin ~flymake~ feature

#+begin_src emacs-lisp
(setup flymake
  (:hook-into ceamx-after-init-hook)
  ;; Mirror the [C-c !] Flycheck prefix.
  (:bind "C-c ! l" #'flymake-show-buffer-diagnostics
         "C-c ! n" #'flymake-goto-next-error
         "C-c ! p" #'flymake-goto-previous-error
         "C-c ! c" #'flymake-show-buffer-diagnostics)
  (:when-loaded
    (setopt flymake-fringe-indicator-position 'right-fringe)
    (setopt flymake-no-changes-timeout 1.0)
    (setopt flymake-wrap-around t)))
#+end_src

** ~Linting files with the ~flycheck~ package :lint:

#+begin_src emacs-lisp
(package! flycheck
  (add-hook 'ceamx-after-init-hook #'global-flycheck-mode))

(package! consult-flycheck
  (keymap-global-set "M-g f" #'consult-flycheck)

  (after! (consult flycheck)
    (require 'consult-flycheck)))

(after! flycheck
  (setopt flycheck-emacs-lisp-load-path 'inherit)
  (setopt flycheck-idle-change-delay 3.0
          flycheck-display-errors-delay 1.5)
  (setopt flycheck-check-syntax-automatically
          '(save idle-change mode-enabled))
  (setopt flycheck-buffer-switch-check-intermediate-buffers nil)

  ;; Disable Flycheck for modes supported by Flymake
  (setq-default flycheck-disabled-checkers
                (append (default-value 'flycheck-disabled-checkers)
                        '(emacs-lisp
                          emacs-lisp-checkdoc
                          emacs-lisp-package
                          sh-shellcheck))))
#+end_src

** ~jinx~ :: the enchanted spell checker :nixpkgs:
- Refiled on [2025-01-17 Fri 00:48]
- Docs :: <https://github.com/minad/jinx/wiki>

Ideally =emacsPackages.jinx= from Nixpkgs would install the required =enchant=
package, as =jinx= depends on the latter.  Unfortunately, as of
<2024-05-24 Fri 15:21>, the autoloads from the Nixpkgs package are not set up
properly, and even after setting up autoloads manually below, dictionaries are
unavailable.  Apparently =aspell= dictionaries are used behind the scenes, but
they are not detected from within emacs.

Despite all that:

#+begin_src shell :noweb-ref nil :tangle no
enchant-lsmod-2 -list-dicts
#+end_src

#+begin_src emacs-lisp
(autoload 'global-jinx-mode "jinx")
(autoload 'jinx-correct "jinx")
(autoload 'jinx-languages "jinx")

(add-hook 'ceamx-emacs-startup-hook #'global-jinx-mode)

(keymap-global-set "M-$" #'jinx-correct)
(keymap-global-set "C-M-$" #'jinx-languages)

(after! jinx
  (setopt jinx-languages "en"))
#+end_src

** Formatters
*** [[https://github.com/purcell/emacs-reformatter][purcell/emacs-reformatter]]: KISS DIY FMT :package:

#+begin_src emacs-lisp
(package! reformatter
  (require 'reformatter))
#+end_src

**** Configure generalized polyglot formatters

***** =biome=

- Docs :: <https://biomejs.dev/guides/integrate-in-editor/>

This should, possibly more ideally, be run as an LSP client, but AFAIK one does
not yet exist for Eglot (only LSP-Mode).

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define biome-format
    :program "biome"
    :args (list "format" "--stdin-file-path" (buffer-file-name))))
#+end_src

***** =prettier=

- Source :: <https://github.com/akirak/flake-templates/blob/629b04932dc71e3e0213d66a0aa8a08cd0b64922/README.md#emacs>

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define prettier
    :program "prettier"
    :args (list (concat "--plugin-search-dir="
                        (expand-file-name
                         (locate-dominating-file default-directory "package.json")))
                "--stdin-filepath" (buffer-file-name))))
#+end_src

***** treefmt

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define treefmt
    :group 'ceamx
    :program "treefmt"
    :args (list "--stdin" (buffer-file-name))))

(after! popper
  (push "\\*treefmt-errors\\*" popper-reference-buffers))
#+end_src

**** TODO Inhibit on-save formatting with prefix argument

*** [[https://github.com/radian-software/apheleia][radian-software/apheleia]]: opinionated code reformatting :package:

In case you run into issues with ~web-mode~ not updating syntax highlighting after
formatting (or other arbitrary modifications):
<https://github.com/doomemacs/doomemacs/blob/35dc13632b3177b9efedad212f2180f69e756853/modules/editor/format/config.el#L74-L83>

#+begin_src emacs-lisp
(package! apheleia
  ;; (apheleia-global-mode 1)
  )

(after! (apheleia)
  (blackout 'apheleia-mode " Aph"))
#+end_src

*** Use the Biome formatter for supported major modes :lang:

- Reference :: <https://biomejs.dev/internals/language-support/>

As of <2024-05-24 Fri>

#+begin_src emacs-lisp
;; As of <2024-05-24 Fri>
;; <https://biomejs.dev/internals/language-support/>
(defconst ceamx-editor-format-biome-modes-list
  '(javascript-mode js-mode js-ts-mode js3-mode
    typescript-mode typescript-ts-mode
    js-jsx-mode tsx-ts-mode
    json-mode json-ts-mode)
  "List of major-mode symbols for the languages supported by the Biome formatter.")
#+end_src

#+begin_src emacs-lisp
(after! reformatter
  (require 'derived)
  (dolist (hook (mapcar #'derived-mode-hook-name ceamx-editor-format-biome-modes-list))
    (add-hook hook #'biome-format-on-save-mode)))
#+end_src

#+begin_src emacs-lisp
(after! apheleia
  (add-to-list 'apheleia-formatters '(biome "biome" "format" "--stdin-file-path" filepath))

  (dolist (mode ceamx-editor-format-biome-modes-list)
    (add-to-list 'apheleia-mode-alist '(mode . biome))))
#+end_src

*** Define user option to disable format-on-save for some modes

#+begin_src emacs-lisp
(defcustom ceamx-format-on-save-disabled-modes
  '(emacs-lisp-mode                     ; conflict with `lispy' indent
    org-msg-edit-mode)
  "A list of major modes in which to not reformat the buffer upon saving.
When nil, buffers will always be formatted upon save. When
non-nil, buffers will never be formatted upon save."
  :group 'ceamx
  :type '(choice boolean (repeat symbol)))
#+end_src

*** Inhibit automatic formatting in some contexts

Unlike ~reformatter~, ~apheleia~ will /always/ run if it can.  A blessing and a curse.
This section handles the curse.

#+begin_src emacs-lisp
(defun ceamx-editor-format-maybe-inhibit-h ()
  "Check if formatting should be disabled for current buffer."
  (or (eq major-mode 'fundamental-mode)
      (string-blank-p (buffer-name))
      (eq ceamx-format-on-save-disabled-modes t)
      (not (null (memq major-mode ceamx-format-on-save-disabled-modes)))))
#+end_src

#+begin_src emacs-lisp
(after! (apheleia)
  (add-to-list 'apheleia-inhibit-functions #'ceamx-editor-format-maybe-inhibit-h))
#+end_src

*** Inhibit on-save formatting with prefix argument

- Source :: <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L2266-L2270>

#+begin_src emacs-lisp
(after! apheleia
  (def-advice! +apheleia-save-buffer-maybe-reformat-a (func &optional arg)
    :around #'save-buffer
    "Inhibit reformatting-on-save when providing a prefix argument to \\[save-buffer]."
    (let ((apheleia-mode (and apheleia-mode (member arg '(nil 1)))))
      (funcall func))))
#+end_src

** Structural Editing

*** Define the user option for structured editing flavour

#+begin_src emacs-lisp
(defcustom ceamx-structured-editing-style 'lispy
  "The structured editing provider."
  :group 'ceamx
  :type '(choice :tag "Structured editing style" :value lispy
          (const :tag "Lispy" lispy)
          (const :tag "Puni" puni)))
#+end_src

*** ~puni~: versatile structured editing :package:

<https://github.com/AmaiKinono/puni>

#+begin_src emacs-lisp
(package! puni
  ;; (puni-global-mode)
  ;; (add-hook 'prog-mode-hook #'puni-mode)
  ;; (add-hook 'term-mode-hook #'puni-disable-puni-mode)
  )

;; (after! puni
;;     ;; (define-keymap :keymap puni-mode-map
;;   ;;   "C-M-f" #'puni-forward-sexp
;;   ;;   "C-M-b" #'puni-backward-sexp
;;   ;;   "C-M-a" #'puni-beginning-of-sexp
;;   ;;   "C-M-e" #'puni-end-of-sexp
;;   ;;   "C-M-[" #'puni-backward-sexp-or-up-list
;;   ;;   "C-M-]" #'puni-forward-sexp-or-up-list

;;   ;;   "M-(" #'puni-syntactic-forward-punct
;;   ;;   "M-)" #'puni-syntactic-backward-punct
;;   ;;   )

;; )
#+end_src

*** Prepare a prefix commands for binding structural editing commands

#+begin_src emacs-lisp
(define-prefix-command 'ceamx-structural-editing-prefix)
(keymap-global-set "C-c s" #'ceamx-structural-editing-prefix)
#+end_src

*** Structural editing with ~puni~

Work in progress.

This is still not quite usable as a Lispy replacement.  The goal is to use
similar structureal editing keybindings across many major-modes.

Note that this repeat-map should not be used in tandem with ~lispy-mode~ because
its bindings generally would need ~puni-mode~ to be active.

- <https://karthinks.com/software/a-consistent-structural-editing-interface/>
- <https://github.com/suliveevil/emacs.d?tab=readme-ov-file#repeat-repeat-mode>
- <https://github.com/karthink/.emacs.d/blob/master/init.el#L3209-L3241>


- [ ] Disable ~repeat-exit-timeout~ for this map only

#+begin_src emacs-lisp
(after! puni

  (defvar-keymap structural-editing-map
    :repeat t

    "d" #'puni-forward-delete-char
    ;; "DEL" #'puni-backward-delete-char
    ;; "D" #'puni-forward-kill-word
    ;; "M-DEL" #'puni-backward-kill-word
    ;; "C-k" #'puni-kill-line
    ;; "M-k" #'puni-backward-kill-line
    "k" #'kill-sexp

    "f" #'puni-forward-sexp
    "b" #'puni-backward-sexp
    "[" #'puni-backward-sexp-or-up-list
    "]" #'puni-forward-sexp-or-up-list
    "a" #'puni-beginning-of-sexp
    "e" #'puni-end-of-sexp
    "u" #'puni-up-list
    "M-(" #'puni-syntactic-forward-punct
    "M-)" #'puni-syntactic-backward-punct

    "\\" #'indent-region
    "/" #'undo

    ">" #'puni-slurp-forward
    "<" #'puni-slurp-backward
    "}" #'puni-barf-forward
    "{" #'puni-barf-backward
    "R" #'puni-raise
    "t" #'puni-transpose
    "C" #'puni-convolute
    ;; FIXME: avoid meow dependency -- no puni equivalent
    ;; "J" #'meow-join-sexp
    "S" #'puni-split
    ;; FIXME: for `emacs-lisp-mode' only
    "x" #'eval-defun

    ))

;; FIXME: wrong type argument symbolp
;; (map-keymap (lambda (_ cmd)
;;               (put cmd 'repeat-exit-timeout nil)) structural-editing-map)

#+end_src

** Tree-Sitter
:PROPERTIES:
:header-args: :tangle lisp/init-treesitter.el
:END:

#+begin_src emacs-lisp :tangle lisp/init-treesitter.el :comments no
;;; init-treesitter.el --- Tree-Sitter support          -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>
;; Keywords: languages, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
#+end_src

#+begin_src emacs-lisp
;;;; Requirements:

;; Emacs 29+ built with tree-sitter support.
;; If using Nix, this is handled by default, done.
;;
;; Linux: `pkgs.emacs29' or `emacs-overlay.packages.emacs-unstable-pgtk'
;; Darwin: `pkgs.emacs29-macport'

;; Add these to `programs.emacs.extraPackages':
;;
;;  - `epkgs.treesit-auto'
;;  - `epkgs.treesit-grammars.with-all-grammars'
#+end_src

#+begin_src emacs-lisp
;;;; Mode Association:

;; NOTE: This feature is intended to be loaded *after* all other language
;;       packages have been installed so that ~treesit-auto~ it can override ~auto-mode-alist~.

;;  By default, Emacs plays it safe with tree-sitter language support so as not
;;  to override legacy mode file extension associations. This makes sense as a
;;  default, but it's a pain to have to override ~auto-mode-alist~ for every
;;  language individually.
;;
;;  ~treesit-auto~ is pretty smart about how it handles these behaviors; its
;;  readme provides more in-depth details.

;;  In short, ~global-treesit-auto-mode~ will:
;;
;;  - Automatically switch to <name>-ts-mode when the grammar for <name> is installed
;;  - Stick with <name>-mode if the grammar isn’t installed
;;  - Automatically install a grammar before opening a compatible file
;;  - Modify auto-mode-alist for tree-sitter modes

;;  See also <https://github.com/purcell/emacs.d/blob/master/lisp/init-treesitter.el>
;;  for a more manual approach.

;;; Code:
#+end_src

#+begin_src emacs-lisp
(require 'treesit)

(require 'ceamx-lib)
#+end_src

#+begin_src emacs-lisp
;;; Automatically use available ~treesit~ modes via ~treesit-auto~

;; <https://github.com/renzmann/treesit-auto>
#+end_src

#+begin_src emacs-lisp
;; NOTE: This package does *not* automatically manage mode-hook translation.
;; Those should be managed manually on a case-by-case basis. For example,
;; ~nix-ts-mode-hook~ does not currently inherit the value of ~nix-mode-hook~.
;; Some Tree-Sitter modes, however, still derive from their non-Tree-Sitter
;; predecessor, and so will also run that mode's hooks in addition to its own.
#+end_src

#+begin_src emacs-lisp
(package! treesit-auto
  (require 'treesit-auto)

  ;; Grammars should be installed via Nixpkgs.
  (setopt treesit-auto-install nil)

  (treesit-auto-add-to-auto-mode-alist 'all)

  (global-treesit-auto-mode))
#+end_src

Increase the amount of syntax-highlighted structures:

#+begin_src emacs-lisp
(setopt treesit-font-lock-level 4)
#+end_src

#+begin_src emacs-lisp :tangle lisp/init-treesitter.el :comments no
(provide 'init-treesitter)
;;; init-treesitter.el ends here
#+end_src

** Apply ~autoinsert~ skeletons to new files

#+begin_src emacs-lisp
(use-feature! autoinsert
  :config
  (auto-insert-mode 1))
#+end_src

** General LISPs

Configuration for working with Lisps of all kinds.

*** Target Files


**** =lib-lisp.el=

#+begin_src emacs-lisp  :tangle lisp/lib-lisp.el :comments no :noweb yes
<<file-prop-line(feature="lib-lisp",desc="Lisp support functions")>>

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

<<file-license>>

;;; Commentary:
;;; Code:

<<lib-lisp>>

<<file-footer(feature="lib-lisp")>>
#+end_src

*** Code

#+begin_src emacs-lisp
(require 'derived)

(require 'lib-lisp)
#+end_src

**** Configure behavior for all Lisp modes with ~ceamx-lisp-init-hook~

#+begin_src emacs-lisp
(add-hook 'ceamx-lisp-init-hook #'ceamx-enable-check-parens-on-save)

;; Add hooks to supported Lisp modes.
(dolist (mode ceamx-lisp-modes-list)
  (add-hook (derived-mode-hook-name mode) #'ceamx-lisp-init))
#+end_src

**** Configure indentation and formatting

I am honestly surprised at how complex, sometimes-broken, and inconsistent is
the process of formatting Lisp code in Emacs.

***** Always indent Lisp code with two spaces

Even if GNU Emacs defaults sometimes do things differently.

#+begin_src emacs-lisp
(dolist (sym '(add-function add-to-list advice-add plist-put))
  (put sym 'lisp-indent-function 2))
#+end_src

***** DISABLED Prevent ~calculate-lisp-indent~ from indenting quoted lists as functions

[[https://emacs.stackexchange.com/a/52789/40956][indentation - How to indent keywords aligned? - Emacs Stack Exchange]]

#+begin_src emacs-lisp :tangle no
;; (advice-add #'calculate-lisp-indent :override #'ceamx-calculate-lisp-indent)
;; (advice-remove 'calculate-lisp-indent #'ceamx-calculate-lisp-indent)
#+end_src

**** ~lispy~: the structural expression editing experience

- Website :: [[https://github.com/abo-abo/lispy][GitHub - abo-abo/lispy: Short and sweet LISP editing]]
- API Reference :: [[https://oremacs.com/lispy/][lispy.el function reference]]

#+begin_src emacs-lisp
(package! lispy
  (when (eq 'lispy ceamx-structured-editing-style)
    (add-hook 'ceamx-lisp-init-hook #'lispy-mode)))

(after! lispy
    ;; Prevent `lispy' from inserting escaped quotes when already inside a string,
    ;; in favor of just moving past the closing quote as I would expect.
    ;;
    ;; FIXME: This actually results in creating the quote pair *after* the
    ;; closing quote. "for example:"" "
;;    (setopt lispy-close-quotes-at-end-p t)

    (setopt lispy-completion-method 'default)

    (setopt lispy-eval-display-style 'message)

    ;; I have mixed feelings about this one because it can be jarring and easily
    ;; lead to mass-commenting expressions. Default is non-nil.
    (setopt lispy-move-after-commenting t)

    (define-keymap :keymap lispy-mode-map
      "M-j" nil                         ; shadows custom binding

      ;; via <https://github.com/abo-abo/lispy/pull/619>
      "`" #'self-insert-command)

    (after! outli
      ;; `outli-mode' overrides `lispy-mode' outline functionality, so it must
      ;; be activated afterwards.
      (add-hook 'ceamx-lisp-init-hook #'outli-mode))

    (after! macrostep
      (push 'macrostep lispy-compat))

    (after! popper
      (push "\\*lispy-message\\*" popper-reference-buffers)))
#+end_src

**** ~kbd-mode~: syntax support for =kmonad= and =kanata= configs

[[https://github.com/kmonad/kbd-mode][GitHub - kmonad/kbd-mode: Emacs mode for syntax highlighting kmonad's .kbd files.]]

#+begin_src emacs-lisp
(package! (kbd-mode :host github :repo "kmonad/kbd-mode"))
#+end_src

***** Inhibit formatters

Unfortunately, we need to do this because whitespace is used to convey
non-syntactic meaning to the reader.

#+begin_src emacs-lisp
(after! kbd-mode
  (add-to-list 'ceamx-format-on-save-disabled-modes #'kbd-mode)
  (after! lispy
    (add-to-list 'lispy-no-indent-modes #'kbd-mode)))
#+end_src

*** Library
:PROPERTIES:
:header-args: :noweb-ref lib-lisp
:END:

#+begin_src emacs-lisp
;;;; Variables

(defvar ceamx-lisp-modes-list '(emacs-lisp-mode
                                ielm-mode
                                lisp-mode
                                inferior-lisp-mode
                                lisp-interaction-mode)
  "Supported Lisp modes.")

(defvar +emacs-lisp-outline-regexp "[ \t]*;;;\\(;*\\**\\) [^ \t\n]"
  "Regexp to use for `outline-regexp' in `emacs-lisp-mode'.
This marks a foldable marker for `outline-minor-mode' in elisp buffers.")

(defvar ceamx-lisp-init-hook '()
  "Hook to run in all supported Lisp modes.")

;;;; Functions

;;;;; Public

(defun ceamx-lisp-init ()
  "Enable features useful in any Lisp mode."

  (when (and (fboundp 'lispy-mode) (eq 'lispy ceamx-structured-editing-style))
    (lispy-mode))

  ;; `outli' overrides some `lispy' features.
  ;; <https://github.com/jdtsmith/outli?tab=readme-ov-file#configuration>
  (when (fboundp 'outli-mode)
    (outli-mode))

  (run-hooks 'ceamx-lisp-init-hook))
#+end_src

***** Check for unmatched parentheses upon saving files

#+begin_src emacs-lisp
(defun ceamx-enable-check-parens-on-save ()
  "Run `check-parens' when the current buffer is saved."
  (add-hook 'after-save-hook #'check-parens nil t))

(defun +emacs-lisp--in-package-buffer-p ()
  (let* ((file-path (buffer-file-name (buffer-base-buffer)))
         (file-base (if file-path (file-name-base file-path))))
    (and (derived-mode-p 'emacs-lisp-mode)
         (or (null file-base)
             (locate-file file-base (custom-theme--load-path) '(".elc" ".el"))))))
#+end_src

**** ~ceamx/indent-last-sexp~: format the s-expression before point

#+begin_src emacs-lisp
(defun ceamx/indent-last-sexp ()
  "Apply indentation to sexp before point."
  (interactive)
  (save-excursion
    (backward-list)
    (indent-sexp)))
#+end_src

**** ~ceamx-calculate-lisp-indent~: improve indentation logic

- URL :: <https://emacs.stackexchange.com/a/52789/40956>
- SPDX-License-Identifier :: CC-BY-SA-4.0

#+begin_src emacs-lisp
(defun ceamx-calculate-lisp-indent (&optional parse-start)
  "Calculate Lisp indentation from PARSE-START with proper quoted list handling.
Intended as overriding advice to `calculate-lisp-indent'.

This function improves upon `calculate-lisp-indent' by fixing
longstanding bugs with its handling of quoted and backquoted
lists."
  (defvar calculate-lisp-indent-last-sexp)
  (save-excursion
    (beginning-of-line)
    (let ((indent-point (point))
          state
          ;; setting this to a number inhibits calling hook
          (desired-indent nil)
          (retry t)
          calculate-lisp-indent-last-sexp containing-sexp)
      (cond ((or (markerp parse-start) (integerp parse-start))
             (goto-char parse-start))
            ((null parse-start) (beginning-of-defun))
            (t (setq state parse-start)))
      (unless state
        ;; Find outermost containing sexp
        (while (< (point) indent-point)
          (setq state (parse-partial-sexp (point) indent-point 0))))
      ;; Find innermost containing sexp
      (while (and retry
                  state
                  (> (elt state 0) 0))
        (setq retry nil)
        (setq calculate-lisp-indent-last-sexp (elt state 2))
        (setq containing-sexp (elt state 1))
        ;; Position following last unclosed open.
        (goto-char (1+ containing-sexp))
        ;; Is there a complete sexp since then?
        (if (and calculate-lisp-indent-last-sexp
                 (> calculate-lisp-indent-last-sexp (point)))
            ;; Yes, but is there a containing sexp after that?
            (let ((peek (parse-partial-sexp calculate-lisp-indent-last-sexp
                                            indent-point 0)))
              (if (setq retry (car (cdr peek))) (setq state peek)))))
      (if retry
          nil
        ;; Innermost containing sexp found
        (goto-char (1+ containing-sexp))
        (if (not calculate-lisp-indent-last-sexp)
            ;; indent-point immediately follows open paren.
            ;; Don't call hook.
            (setq desired-indent (current-column))
          ;; Find the start of first element of containing sexp.
          (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
          (cond ((looking-at "\\s(")
                 ;; First element of containing sexp is a list.
                 ;; Indent under that list.
                 )
                ((> (save-excursion (forward-line 1) (point))
                    calculate-lisp-indent-last-sexp)
                 ;; This is the first line to start within the
                 ;; containing sexp.  It's almost certainly a function
                 ;; call.
                 (if (or
                      ;; Containing sexp has nothing before this line
                      ;; except the first element.  Indent under that element.
                      (= (point) calculate-lisp-indent-last-sexp)

                      ;; First sexp after `containing-sexp' is a
                      ;; keyword.  This condition is more debatable.
                      ;; It's so that I can have unquoted plists in
                      ;; macros.  It assumes that you won't make a
                      ;; function whose name is a keyword.
                      (when-let (char-after (char-after (1+ containing-sexp)))
                        (char-equal char-after ?:))

                      ;; Check for quotes or backquotes around.
                      (let* ((positions (elt state 9))
                             (last (car (last positions)))
                             (rest (reverse (butlast positions)))
                             (any-quoted-p nil)
                             (point nil))
                        (or
                         (when-let (char (char-before last))
                           (or (char-equal char ?')
                               (char-equal char ?`)))
                         (progn
                           (while (and rest (not any-quoted-p))
                             (setq point (pop rest))
                             (setq any-quoted-p
                                   (or
                                    (when-let (char (char-before point))
                                      (or (char-equal char ?')
                                          (char-equal char ?`)))
                                    (save-excursion
                                      (goto-char (1+ point))
                                      (looking-at-p
                                       "\\(?:back\\)?quote[\t\n\f\s]+(")))))
                           any-quoted-p))))
                     ;; Containing sexp has nothing before this line
                     ;; except the first element.  Indent under that
                     ;; element.
                     nil
                   ;; Skip the first element, find start of second
                   ;; (the first argument of the function call) and
                   ;; indent under.
                   (progn (forward-sexp 1)
                          (parse-partial-sexp (point)
                                              calculate-lisp-indent-last-sexp
                                              0 t)))
                 (backward-prefix-chars))
                (t
                 ;; Indent beneath first sexp on same line as
                 ;; `calculate-lisp-indent-last-sexp'.  Again, it's
                 ;; almost certainly a function call.
                 (goto-char calculate-lisp-indent-last-sexp)
                 (beginning-of-line)
                 (parse-partial-sexp (point) calculate-lisp-indent-last-sexp
                                     0 t)
                 (backward-prefix-chars)))))
      ;; Point is at the point to indent under unless we are inside a
      ;; string.  Call indentation hook except when overridden by
      ;; `lisp-indent-offset' or if the desired indentation has
      ;; already been computed.
      (let ((normal-indent (current-column)))
        (cond ((elt state 3)
               ;; Inside a string, don't change indentation.
               nil)
              ((and (integerp lisp-indent-offset) containing-sexp)
               ;; Indent by constant offset
               (goto-char containing-sexp)
               (+ (current-column) lisp-indent-offset))
              (calculate-lisp-indent-last-sexp
               (or
                ;; try to align the parameters of a known function
                (and lisp-indent-function
                     (not retry)
                     (funcall lisp-indent-function indent-point state))
                ;; If the function has no special alignment or it does
                ;; not apply to this argument, try to align a
                ;; constant-symbol under the last preceding constant
                ;; symbol, if there is such one of the last 2
                ;; preceding symbols, in the previous uncommented
                ;; line.
                (and (save-excursion
                       (goto-char indent-point)
                       (skip-chars-forward " \t")
                       (looking-at ":"))
                     ;; The last sexp may not be at the indentation
                     ;; where it begins, so find that one instead.
                     (save-excursion
                       (goto-char calculate-lisp-indent-last-sexp)
                       ;; Handle prefix characters and whitespace
                       ;; following an open paren.  (Bug#1012)
                       (backward-prefix-chars)
                       (while (not (or (looking-back "^[ \t]*\\|([ \t]+"
                                                     (line-beginning-position))
                                       (and containing-sexp
                                            (>= (1+ containing-sexp) (point)))))
                         (forward-sexp -1)
                         (backward-prefix-chars))
                       (setq calculate-lisp-indent-last-sexp (point)))
                     (> calculate-lisp-indent-last-sexp
                        (save-excursion
                          (goto-char (1+ containing-sexp))
                          (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
                          (point)))
                     (let ((parse-sexp-ignore-comments t)
                           indent)
                       (goto-char calculate-lisp-indent-last-sexp)
                       (or (and (looking-at ":")
                                (setq indent (current-column)))
                           (and (< (line-beginning-position)
                                   (prog2 (backward-sexp) (point)))
                                (looking-at ":")
                                (setq indent (current-column))))
                       indent))
                ;; another symbols or constants not preceded by a constant
                ;; as defined above.
                normal-indent))
              ;; in this case calculate-lisp-indent-last-sexp is nil
              (desired-indent)
              (t
               normal-indent))))))
#+end_src

** Emacs Lisp

#+begin_src emacs-lisp
(require 'ceamx-lib)
(require 'lib-lisp)

;;; Hooks

(defun ceamx-emacs-lisp-init ()
  "Sensible defaults for `emacs-lisp-mode'."
  (ceamx-lisp-init)
  (eldoc-mode 1)
  ;; TODO: do we really want this for `ielm' and other derived modes as well?
  (blackout "EL"))

(add-hook 'emacs-lisp-mode-hook #'ceamx-emacs-lisp-init)
(add-hook 'ielm-mode-hook #'ceamx-emacs-lisp-init)

(when (boundp 'eval-expression-minibuffer-setup-hook)
  (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode))

;;; Advices

;; via <https://github.com/doomemacs/doomemacs/blob/98d753e1036f76551ccaa61f5c810782cda3b48a/modules/lang/emacs-lisp/config.el#L124C1-L138C15>
(def-advice! +elisp-flymake-byte-compile-fix-load-path-a (orig-fn &rest args)
  :around #'elisp-flymake-byte-compile
  "Set load path for the `emacs-lisp' byte compilation `flymake' backend."
  (let ((elisp-flymake-byte-compile-load-path
         (append elisp-flymake-byte-compile-load-path load-path)))
    (apply orig-fn args)))

;; via <https://github.com/doomemacs/doomemacs/blob/98d753e1036f76551ccaa61f5c810782cda3b48a/modules/lang/emacs-lisp/config.el#L124C1-L138C15>
(def-advice! +emacs-lisp-append-value-to-eldoc-a (fn sym)
  :around #'elisp-get-var-docstring
  "Display variable value next to documentation in eldoc."
  (when-let (ret (funcall fn sym))
    (if (boundp sym)
      (concat ret " "
        (let* ((truncated " [...]")
                (print-escape-newlines t)
                (str (symbol-value sym))
                (str (prin1-to-string str))
                (limit (- (frame-width) (length ret) (length truncated) 1)))
          (format (format "%%0.%ds%%s" (max limit 0))
            (propertize str 'face 'warning)
            (if (< (length str) limit) "" truncated))))
      ret)))

;;; Keybinds

(keymap-global-set "<remap> <indent-pp-sexp>" #'ceamx/indent-last-sexp)

(define-keymap :keymap emacs-lisp-mode-map
  "C-:" #'ielm

  "C-S-t" #'transpose-sexps)

(with-eval-after-load 'ielm
  (defvar ielm-map)
  (keymap-set ielm-map "C-:" #'quit-window))

;;; Packages

;;;; ~eros~ :: <https://github.com/xiongtx/eros>

;;  Evaluation Result OverlayS for Emacs Lisp

(use-package eros
  :commands (eros-mode eros-eval-last-sexp)
  :init
  (add-hook 'emacs-lisp-mode-hook #'eros-mode)
  (keymap-set emacs-lisp-mode-map "<remap> <eval-last-sexp>" #'eros-eval-last-sexp)

  (use-feature! lispy
    :autoload (lispy-define-key)
    :config
    (def-hook! +lispy-use-eros-eval-h () 'lispy-mode-hook
      "Use `eros-eval-last-sexp' in place of `lispy-eval' bindings."
      ;; FIXME: there is currently no way to hide lispy-eval output.
      ;;        nil results in an error.
      ;;        because of this, output is duplicated in the minibuffer and the
      ;;        eros overlay...
      ;;
      ;; (setopt lispy-eval-display-style nil)
      (lispy-define-key lispy-mode-map "e" #'eros-eval-last-sexp))))

;;;; ~suggest~ :: <https://github.com/Wilfred/suggest.el>

;;  discover elisp functions that do what you want,
;;  brought to you by enumerative program synthesis

(use-package suggest
  :commands (suggest)
  :init
  (keymap-set emacs-lisp-mode-map "C-c S" #'suggest))

;;;; ~macrostep~ :: <https://github.com/emacsorphanage/macrostep>

;;  "interactive macro-expander for Emacs"

(use-package macrostep
  :commands (macrostep-expand)

  :preface
  ;; <https://github.com/joddie/macrostep/issues/11>
  ;; <https://github.com/emacsorphanage/macrostep/issues/8>
  (defun ceamx/macrostep-expand ()
    "Wrapper for `macrostep-expand' providing workaround for errors.
The original function fails in the presence of whitespace after a sexp."
    (interactive)
    (when (and (= ?\n (char-after))
            (= (point) (cdr (bounds-of-thing-at-point 'sexp))))
      (backward-char))
    (macrostep-expand))

  :init
  (keymap-set emacs-lisp-mode-map "C-c x" #'ceamx/macrostep-expand))

;;; Install ~xr~ to convert string regexps to ~rx~ forms

;; <https://github.com/mattiase/xr>

;; TODO: keybindings...

(package! xr)
#+end_src


*** ~elmacro~: Display keyboard macros or latest interactive commands as Elisp

- Source code :: <https://github.com/Silex/elmacro>

Avoid enabling this mode globally.  It may cause some recurring errors, and
the package has not been updated in years.  By nature, it is also quite
invasive, and should probably only be used as a development tool as needed.

#+begin_src emacs-lisp
(use-package elmacro
  ;; :ensure t
  :config
  (setopt elmacro-show-last-commands-default 30)

  ;; <https://github.com/Silex/elmacro/blob/master/README.md#org-mode-smartparens-etc>
  ;; <https://github.com/Silex/elmacro/blob/master/README.md#elmacro-processor-prettify-inserts>
  (setopt elmacro-processor-prettify-inserts
          (unless (or (bound-and-true-p lispy-mode) ; not actually sure about lispy-mode
                      (bound-and-true-p smartparens-mode)
                      (bound-and-true-p org-mode))))

  ;; "a" "b" "c" => "abc"
  ;; FIXME: maybe causes errors?
  (setopt elmacro-processor-concatenate-inserts t))
#+end_src

*** ~elisp-demos~: Display usage examples for Elisp callables inside their help buffers

- Source code :: <https://github.com/xuchunyang/elisp-demos>

#+begin_src emacs-lisp
(use-package elisp-demos
  ;; :ensure t
  :defer 5
  :after (helpful)
  :functions (elisp-demos-advice-helpful-update)
  :config
  (setopt elisp-demos-user-files (list (expand-file-name  "docs/elisp-demos.org" user-emacs-directory)))

  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

*** Library

#+begin_src emacs-lisp :tangle lisp/lib-elisp.el :comments no
;;; lib-elisp.el --- Helper utilities for Emacs Lisp development and language support  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery
;; Copyright (C) 2018  Adam Porter

;; Author: Chris Montgomery <chmont@protonmail.com>
;;         Adam Porter <adam@alphapapa.net>
;; Keywords: local, lisp, tools, internal, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Sources:

;; <https://github.com/alphapapa/emacs-package-dev-handbook/blob/4a78d753e965bc2cb87f72a72974a4514c4d18dd/README.org#emacs-lisp-macroreplace>

;;; Code:

;;; Functions

;; via <https://emacs.stackexchange.com/a/58078/40956>
(defun ceamx-dev-list-mode-ancestors (mode)
  "Return a list of the ancestor modes that MODE is derived from."
  (let ((modes   ())
        (parent  nil))
    (while (setq parent (get mode 'derived-mode-parent))
      (push parent modes)
      (setq mode parent))
    (setq modes  (nreverse modes))))

;;; Macros

;; via <https://github.com/alphapapa/emacs-package-dev-handbook/blob/master/README.org#debug-warn-macro>
(cl-defmacro debug-warn! (&rest args)
  "Display a debug warning showing the runtime value of ARGS.
The warning automatically includes the name of the containing
function, and it is only displayed if `warning-minimum-log-level'
is `:debug' at expansion time (otherwise the macro expands to nil
and is eliminated by the byte-compiler).  When debugging, the
form also returns nil so, e.g. it may be used in a conditional in
place of nil.

Each of ARGS may be a string, which is displayed as-is, or a
symbol, the value of which is displayed prefixed by its name, or
a Lisp form, which is displayed prefixed by its first symbol.

Before the actual ARGS arguments, you can write keyword
arguments, i.e. alternating keywords and values.  The following
keywords are supported:

  :buffer BUFFER   Name of buffer to pass to `display-warning'.
  :level  LEVEL    Level passed to `display-warning', which see.
                   Default is :debug."
  ;; TODO: Can we use a compiler macro to handle this more elegantly?
  (pcase-let* ((fn-name (when byte-compile-current-buffer
                          (with-current-buffer byte-compile-current-buffer
                            ;; This is a hack, but a nifty one.
                            (save-excursion
                              (beginning-of-defun)
                              (cl-second (read (current-buffer)))))))
                (plist-args (cl-loop while (keywordp (car args))
                              collect (pop args)
                              collect (pop args)))
                ((map (:buffer buffer) (:level level)) plist-args)
                (level (or level :debug))
                (string (cl-loop for arg in args
                          concat (pcase arg
                                   ((pred stringp) "%S ")
                                   ((pred symbolp)
                                     (concat (upcase (symbol-name arg)) ":%S "))
                                   ((pred listp)
                                     (concat "(" (upcase (symbol-name (car arg)))
                                       (pcase (length arg)
                                         (1 ")")
                                         (_ "...)"))
                                       ":%S "))))))
    ;; FIXME: ensure available (from where?) or just defvar
    (when (eq :debug warning-minimum-log-level)
      `(let ((fn-name ,(if fn-name
                         `',fn-name
                         ;; In an interpreted function: use `backtrace-frame' to get the
                         ;; function name (we have to use a little hackery to figure out
                         ;; how far up the frame to look, but this seems to work).
                         `(cl-loop for frame in (backtrace-frames)
                            for fn = (cl-second frame)
                            when (not (or (subrp fn)
                                        (special-form-p fn)
                                        (eq 'backtrace-frames fn)))
                            return (make-symbol (format "%s [interpreted]" fn))))))
         (display-warning fn-name (format ,string ,@args) ,level ,buffer)
         nil))))

;;; Commands

;;;###autoload
(defun ceamx/emacs-lisp-macroreplace ()
  "Replace macro form before or after point with its expansion."
  (interactive)
  (if-let* ((beg (point))
             (end t)
             (form (or (ignore-errors
                         (save-excursion
                           (prog1 (read (current-buffer))
                             (setq end (point)))))
                     (ignore-errors
                       (forward-sexp -1)
                       (setq beg (point))
                       (prog1 (read (current-buffer))
                         (setq end (point))))))
             (expansion (macroexpand-all form)))
    ;; FIXME: replace obsolete function with what?
    (setf (buffer-substring beg end) (pp-to-string expansion))
    (user-error "Unable to expand")))

(provide 'lib-elisp)
;;; lib-elisp.el ends here
#+end_src

** Language Server and Debugger Protocol Support :lsp:lang:

#+begin_src emacs-lisp
(defcustom ceamx-lsp-client 'eglot
  "The preferred LSP client."
  :group 'ceamx
  :type '(choice :tag "LSP client" :value eglot
          (const :tag "Eglot [builtin]" eglot)
          (const :tag "LSP-Mode" lsp-mode)))

(defvar ceamx-lsp-mode-cache-dir (file-name-as-directory (concat ceamx-var-dir "lsp")))
#+end_src

*** Eglot

#+begin_src emacs-lisp :noweb-ref config-feature-paths
(defvar ceamx-eglot-storage-dir (file-name-as-directory (concat ceamx-var-dir "eglot")))
#+end_src

#+begin_src emacs-lisp
(setopt eglot-sync-connect 1)
(setopt eglot-autoshutdown t)
(setopt eglot-send-changes-idle-time 0.5)

;; Disable events buffer, which poses performance issues over time as the
;; buffer grows in a longer-running Emacs instance.
(setopt eglot-events-buffer-size 0)

;; Prevent frequent focus-stealing.
(setopt eglot-auto-display-help-buffer nil)
#+end_src

**** Use =emacs-lsp-booster= via ~eglot-booster~ :perf:

- Website :: <https://github.com/jdtsmith/eglot-booster>
- Website :: <https://github.com/blahgeek/emacs-lsp-booster>

Requires =emacs-lsp-booster= to be installed into the environment.  Available by that name in Nixpkgs.

#+begin_src emacs-lisp
(use-package eglot-booster
  :ensure (:host github :repo "jdtsmith/eglot-booster")
  :commands (eglot-booster-mode)
  :init
  (after! eglot
    (eglot-booster-mode)))
#+end_src

Though I have not tried it, I am thinking that using =lsp-booster= over TRAMP is
not worth the trouble of ensuring that the executable is available on every
remote server.  At least not as a default behavior.  Consider enabling this
per-project or server as desired.

elsp
#+begin_src emacs-lisp
(setopt eglot-booster-no-remote-boost t)
#+end_src

**** Run language servers automatically in supported major modes

The timing here may be delicate...

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'eglot-ensure)

(after! eglot
  (defvar eglot-server-programs)

  (def-advice! +eglot--ensure-available-mode (fn)
    :around #'eglot-ensure
    "Run `eglot-ensure' in supported modes."
    (when (alist-get major-mode eglot-server-programs nil nil
                     (lambda (modes key)
                       (if (listp modes)
                           (member key modes)
                         (eq key modes))))
      (funcall fn))))
#+end_src

**** Define helper functions for specifying server configurations

#+begin_src emacs-lisp :noweb-ref lib-prog
(defvar ceamx-eglot-server-configurations-alist '()
  "Alist of language server initialization options as accepted in `eglot-server-programs'.")
#+end_src

#+begin_src emacs-lisp :noweb-ref lib-prog
(defun ceamx-eglot-server-default-settings (name)
  "Return the custom initialization options for the NAME language server."
  (alist-get name ceamx-eglot-server-configurations-alist nil nil #'string=))

(defun ceamx-eglot-server-contact (name &optional program &rest args)
  "Return a contact specification for the language server NAME.
NAME is a string of the \"<lang>-<program>\" format for naming
language servers in Ceamx.  This format is based on the format
commonly used by `lsp-mode'.

PROGRAM and ARGS are as in `eglot-server-programs', which see.

Unless PROGRAM is provided, the program name used in
`eglot-server-programs' will be the value of NAME."
  (let ((options (ceamx-eglot-server-default-settings name))
        (program (or program (string-trim-left name "[[:alpha:]]+-"))))
    ;; The use of `append' here is significant because it will filter out a nil
    ;; value for `options'.
    (append (ensure-list program)
            args
            (when options (list :initializationOptions options)))))
#+end_src

**** Declare some Eglot buffers as popup windows

#+begin_src emacs-lisp
(after! (eglot popper)
  (defvar popper-reference-buffers)
  (add-to-list 'popper-reference-buffers "^\\*eglot-help"))
#+end_src

**** Configure ~flycheck-eglot~ integration

#+begin_src emacs-lisp
(package! flycheck-eglot
  (add-hook 'eglot-managed-mode-hook #'flycheck-eglot-mode))
#+end_src

**** Add workspace symbols as Consult datasource with ~consult-eglot~

<https://github.com/mohkale/consult-eglot>

#+begin_src emacs-lisp
(package! consult-eglot
  (defalias 'ceamx/list-workspace-symbols #'consult-eglot-symbols))
#+end_src

**** Keybindings

#+begin_src emacs-lisp
(keymap-global-set "C-c l a" '("action.." . eglot-code-actions))
(keymap-global-set "C-c l r" '("rename..." . eglot-rename))
(keymap-global-set "C-c l o" #'consult-eglot-symbols)

(after! eglot
  ;; Override the default binding for `xref-find-apropos'.
  (keymap-set eglot-mode-map "C-M-." #'consult-eglot-symbols))

(after! lsp-mode
    (keymap-global-set "C-c l o" #'consult-lsp-symbols)
    ;; Override the default binding for `xref-find-apropos'.
    (keymap-set lsp-mode-map "C-M-." #'consult-lsp-symbols))
#+end_src

*** TODO Debugging with ~dap-mode~ and the Debug Adapter Protocol (DAP)
:PROPERTIES:
:header-args: :tangle no
:END:

- website :: <https://github.com/emacs-lsp/dap-mode>
- spec :: <https://microsoft.github.io/debug-adapter-protocol/>

  This might be dependent on LSP-Mode?

#+begin_src emacs-lisp
(package! dap-mode
  (dap-auto-configure-mode))
#+end_src

** Data Formats (JSON, TOML, YAML, XML, CSV...)
:PROPERTIES:
:ID:       137d1e04-d0dc-4512-a450-fbafeef65804
:END:

*** TOML
**** Register =taplo= formatter

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define toml-taplo-fmt
    :group 'ceamx
    :program "taplo"
    :args (list "format" "--diff"
                "--stdin-filepath" (buffer-file-name)
                "-"))

  (add-hook 'conf-toml-mode-hook #'toml-taplo-fmt-on-save-mode)
  (add-hook 'toml-ts-mode-hook #'toml-taplo-fmt-on-save-mode))
#+end_src

**** LSP-Mode: Use the correct cache base directory

#+begin_src emacs-lisp
(when (featurep 'lsp-toml)
  (setopt lsp-toml-cache-path (file-name-as-directory
                               (concat ceamx-lsp-mode-cache-dir "server/toml"))))
#+end_src

*** YAML

**** Install the =yaml-mode= package

#+begin_src emacs-lisp
(package! yaml-mode)
#+end_src

**** TODO Start the LSP server

- Note taken on [2024-12-26 Thu 21:21] \\
  Needs eglot
Install the =yaml-language-server= from Nixpkgs first.

#+begin_src emacs-lisp
(when (eq 'lsp ceamx-lsp-client)
  (after! (yaml-mode)
    (add-hook 'yaml-mode-hook #'lsp-deferred)
    (add-hook 'yaml-ts-mode-hook #'lsp-deferred)))
#+end_src

**** Add support for YAML Schema validation

#+begin_src emacs-lisp
(when (eq 'lsp ceamx-lsp-client)
  (setopt lsp-yaml-schemas nil)

  ;; Keep this cached file with all of the other LSP server caches.
  (setopt lsp-yaml-schema-store-local-db
          (file-name-concat ceamx-lsp-mode-cache-dir "server/yaml/lsp-yaml-schemas.json"))

  ;; Download the YAML Schema Store database if not present.
  ;; FIXME: handle periodic updates of cached data
  (after! lsp-yaml
    (defer! 2
      (unless (file-exists-p lsp-yaml-schema-store-local-db)
        (lsp-yaml-download-schema-store-db)))))
#+end_src

*** XML [builtin]

#+begin_src emacs-lisp
(use-feature! nxml-mode
  :mode "\\.p\\(?:list\\|om\\)\\'"      ; plist, pom
  :mode "\\.xs\\(?:d\\|lt\\)\\'"        ; xslt, xsd
  :mode "\\.rss\\'"

  :config
  (setq nxml-slash-auto-complete-flag t)
  (setq nxml-auto-insert-xml-declaration-flag t))
#+end_src

*** CSV + TSV

#+begin_src emacs-lisp
(package! csv-mode)

(after! csv-mode
  (define-keymap :keymap csv-mode-map
    "a" #'csv-align-fields
    "u" #'csv-unalign-fields
    "s" #'csv-sort-fields
    "S" #'csv-sort-numeric-fields
    "k" #'csv-kill-fields
    "t" #'csv-transpose))
#+end_src

** Web-Mode

#+begin_src emacs-lisp
(package! web-mode
  ;; TODO: refactor
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

  (setopt web-mode-engines-alist
          '(("php" . "\\.phtml\\'")
            ("blade" . "\\.blade\\.")))

  ;; Defer to `electric-pair-mode' or similar.
  (setopt web-mode-enable-auto-pairing nil)

  (setopt web-mode-enable-css-colorization t
          web-mode-enable-block-face t
          web-mode-enable-part-face t
          web-mode-enable-current-element-highlight t))
#+end_src

#+begin_src emacs-lisp
;;; emmet-mode

;; - website :: <https://github.com/smihica/emmet-mode>
;; - reference ::
;; - <https://github.com/smihica/emmet-mode/blob/master/README.md#usage>

;; NOTE: This package is unmaintained!

(package! emmet-mode
  (setopt emmet-move-cursor-between-quotes t)

  (add-hook 'css-mode-hook #'emmet-mode)
  (after! web-mode
    (add-hook 'web-mode-hook #'emmet-mode)))
#+end_src

** JavaScript

#+begin_src emacs-lisp
;; TODO: try <https://github.com/llemaitre19/jtsx> but it's not in melpa or nixpkgs yet

(defun ceamx-init-javascript-modes ()
  (setopt js-indent-level 2)

  (after! lsp-mode
    (lsp-deferred)
    (lsp-lens-mode)
    (dolist (hook '(lsp-format-buffer
                     lsp-organize-imports))
      (add-hook 'before-save-hook hook nil t))))

;; TODO: must happen before `treesit-auto' so it can override
;; (add-to-list 'auto-mode-alist '("\\.js\\'"     . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.[cm]js\\'" . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.pac\\'"    . js2-mode))
;; (add-to-list 'interpreter-mode-alist '("node"  . js2-mode))

(use-feature! typescript-ts-mode
  :init
  (add-hook 'typescript-ts-base-mode #'ceamx-init-javascript-modes))
#+end_src

** Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :config
  (setq-default lua-indent-level 2))
#+end_src

** Markdown


*** Customization

#+begin_src emacs-lisp
(package! markdown-mode
  (setopt markdown-enable-wiki-links t)
  (setopt markdown-italic-underscore t)
  (setopt markdown-asymmetric-header t)
  (setopt markdown-gfm-additional-languages '("sh"))
  (setopt markdown-make-gfm-checkboxes-buttons t)
  (setopt markdown-fontify-whole-heading-line t)

  ;; HACK Due to jrblevin/markdown-mode#578, invoking `imenu' throws a
  ;;      'wrong-type-argument consp nil' error if you use native-comp.
  ;;      <https://github.com/jrblevin/markdown-mode/issues/578>
  (setopt markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p))))

  ;; This is set to `nil' by default, which causes a wrong-type-arg error
  ;; when you use `markdown-open'. These are more sensible defaults.
  (setopt markdown-open-command (cond
                                 ((ceamx-host-macos-p) "open")
                                 ((ceamx-host-gnu-linux-p) "xdg-open")))

  (with-eval-after-load 'org-src
    (add-to-list 'org-src-lang-modes '("md" . markdown))))

(with-eval-after-load 'markdown-mode
  (defvar markdown-mode-map)
  (declare-function markdown-match-generic-metadata "markdown-mode")
  (declare-function markdown-insert-link "markdown-mode")
  (declare-function markdown-insert-blockquote "markdown-mode")

  (define-keymap :keymap markdown-mode-map
    "C-c i l" #'markdown-insert-link
    "C-c i q" #'markdown-insert-blockquote)

  ;; <https://github.com/jrblevin/markdown-mode/issues/328#issuecomment-405361296>
  ;; <https://github.com/radian-software/radian/blob/b2fac3a615186f77de0bdc7e4f06e9aa46c222bb/emacs/radian.el#L3199-L3206>.
  (def-advice! +markdown-disable-front-matter-fontification-a (&rest _)
    :override #'markdown-match-generic-metadata
    "Prevent fontification of YAML metadata blocks in `markdown-mode'.
This prevents a mis-feature wherein if the first line of a
Markdown document has a colon in it, then it's distractingly and
usually wrongly fontified as a metadata block."
    (ignore (goto-char (point-max)))))
#+end_src


*** =lisp/lib-lang-markdown.el= :: Language: Markdown: Library

#+begin_src emacs-lisp :tangle lisp/lib-lang-markdown.el :comments no
;;; lib-lang-markdown.el --- Markdown helpers        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>
;; Keywords: languages, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;;;###autoload
(defun ceamx-markdown-compile (beg end output-buffer)
  "Compile Markdown with pandoc if available.
Returns process exit code."
  (when (executable-find "pandoc")
    (call-process-region beg end "pandoc" nil output-buffer nil
      "-f" "markdown"
      "-t" "html"
      "--highlight-style=pygments")))

(provide 'lib-lang-markdown)
;;; lib-lang-markdown.el ends here
#+end_src

** Nix
*** Install and configure ~nix-mode~ :package:

<https://github.com/NixOS/nix-mode>

NOTE: ~nix-mode~ should not be loaded when using ~nix-ts-mode~.

#+begin_src emacs-lisp
(package! nix-mode
  (when (eq 'eglot ceamx-lsp-client)
    (add-hook 'nix-mode-hook #'eglot-ensure))
  (when (eq 'lsp-mode ceamx-lsp-client)
    (add-hook 'nix-mode-hook #'lsp-deferred)))
#+end_src

*** Install and configure ~nix-ts-mode~ :package:

<https://github.com/remi-gelinas/nix-ts-mode>

#+begin_src emacs-lisp
(package! nix-ts-mode
  (when (eq 'eglot ceamx-lsp-client)
    (add-hook 'nix-ts-mode-hook #'eglot-ensure))
  (when (eq 'lsp-mode ceamx-lsp-client)
    (add-hook 'nix-ts-mode-hook #'lsp-deferred)))
#+end_src

*** Configure formatters :formatting:
**** Set the official formatter (=nixfmt=) as the default formatter

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define nixfmt-format
    :group 'ceamx
    :program "nixfmt")

  (add-hook 'nix-mode-hook #'nixfmt-format-on-save-mode)
  (add-hook 'nix-ts-mode-hook #'nixfmt-format-on-save-mode))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  (add-to-list 'safe-local-variable-values '(apheleia-formatter . nixfmt))
  (add-to-list 'apheleia-mode-alist '(nix-mode . nixfmt))
  (add-to-list 'apheleia-mode-alist '(nix-ts-mode . nixfmt)))
#+end_src

**** Register =alejandra= as an additional formatter

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define alejandra-format
    :group 'ceamx
    :program "alejandra"))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  (add-to-list 'safe-local-variable-values '(apheleia-formatter . alejandra))
  (add-to-list 'apheleia-formatters '(alejandra "alejandra")))
#+end_src

*** Configure Nix language servers :lsp:

#+begin_src emacs-lisp
;; TODO: defcustom
(defvar ceamx-lsp-server-nix-lang "nix-nixd")

(defvar ceamx-lsp-nix-nixd-default-config
  `(:nixpkgs (:expr "import (builtins.getFlake \"/etc/nix/inputs/nixpkgs\") { } ")
    :formatting (:command ["nixfmt"])
    :options (:nixos (:expr ,(format "import (builtins.getFlake \"%s\").%s.\"%s\".options"
                              "/etc/nixos"
                              "nixosConfigurations"
                              (system-name)))
              :home-manager (:expr ,(format "import (builtins.getFlake \"%s\").%s.%s.config.home-manager.users.%s"
                                     "/etc/nixos"
                                     "nixosConfigurations"
                                     (system-name)
                                     (user-login-name))))))
#+end_src

#+begin_src emacs-lisp
(require 'lib-prog)

(add-to-list 'ceamx-eglot-server-configurations-alist '("nix-nil" . nil))
(add-to-list 'ceamx-eglot-server-configurations-alist
             (cons "nix-nixd" ceamx-lsp-nix-nixd-default-config))

(with-eval-after-load 'eglot
  (defvar eglot-server-programs)

  (add-to-list 'eglot-server-programs
               (cons '(nix-mode nix-ts-mode)
                     (ceamx-eglot-server-contact ceamx-lsp-server-nix-lang))))
#+end_src

#+begin_src emacs-lisp
(after! lsp-nix
  (setopt lsp-nix-nil-formatter nil)

  (when (string= "nix-nixd" ceamx-lsp-server-nix-lang)
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "nixd")
                      :major-modes '(nix-mode nix-ts-mode)
                      :priority 0
                      :server-id 'nixd))))
#+end_src

*** Install ~devdocs~ Nix docset :docs:

#+begin_src emacs-lisp
(require 'lib-prog)

(def-hook! +devdocs-install-nix-docs ()
  '(nix-mode-hook nix-ts-mode-hook)
  "Install `devdocs' documents for the Nix language."
  (+devdocs-maybe-install "nix"))
#+end_src

*** Keybindings :keybinds:

#+begin_src emacs-lisp
(after! nix-mode
  (keymap-set nix-mode-map "C-:" #'nix-repl))

(after! (nix-mode tempel)
  (tempel-key "C-c i t a" modargs nix-mode-map))

(after! nix-ts-mode
  (keymap-set nix-ts-mode-map "C-:" #'nix-repl))

(after! nix-repl
  (keymap-set nix-repl-mode-map "C-:" #'quit-window))
#+end_src

** Language Support for PHP

*** Feature Settings

#+begin_src emacs-lisp
(defconst ceamx-lang-php-extension-regexp "\\.\\(php\\|phtml\\)\\'"
  "Pattern matching files with PHP syntax.")
#+end_src

*** Ignore PHP-specific directories and files

#+begin_src emacs-lisp
(appendq! xref-ignored-files
          '("_ide_helper_models.php"
            "_ide_helper.php"))
#+end_src

*** Install a PHP major-mode... but which one?

**** [[https://github.com/emacs-php/php-mode][emacs-php/php-mode]] :package:

#+begin_src emacs-lisp
(package! php-mode
  ;; PHP is not a templating language and it never was.  `web-mode' does
  ;; templates better.  Furthermore, as of <2024-06-18 Tue 22:37> `php-ts-mode'
  ;; does not currently support embedded HTML syntax, so disabling this feature
  ;; of `php-mode' adds consistency.
  (setopt php-mode-template-compatibility nil))
  #+end_src

**** DISABLED ~php-ts-mode~ [builtin]

~php-ts-mode~ is part of Emacs 30.

Unfortunately, as of <2024-06-18 Tue 18:22>, I am missing the
[[https://github.com/claytonrcarter/tree-sitter-phpdoc][=tree-sitter-phpdoc= grammar]], and it is not yet available in Nixpkgs.  I was
able to run ~php-ts-mode-install-parsers~ as suggested in the error message, but
the missing grammar should really be added to Nixpkgs and the current stateful
installation might get confusing.

#+begin_src emacs-lisp :tangle no
(when (and (fboundp 'php-ts-mode)
           (treesit-language-available-p 'php))
  (add-to-list 'major-mode-remap-alist '(php-mode . php-ts-mode))
  (add-to-list 'major-mode-remap-alist '(php-mode-maybe . php-ts-mode)))
#+end_src

*** Display line numbers in PHP buffers

#+begin_src emacs-lisp
(add-hook 'php-mode-hook #'display-line-numbers-mode)
#+end_src

*** [[https://github.com/Fuco1/neon-mode][Fuco1/neon-mode]]: major-mode for NEON, the PHP-centric franken-YAML DSL :package:

- Reference :: <https://ne-on.org/>

I have never ever encountered NEON in any context other than a =phpstan.neon=
PHPStan configuration file.  This kind of bizarre decision perpetuates PHP's
terrible backwards ecosystem.  All that said, I very much appreciate that
<Fuco1> has provided this package!  Reality strikes again.

#+begin_src emacs-lisp
(package! neon-mode)
#+end_src

*** Debugging with Xdebug and ~dap-mode~

+ ref :: <https://emacs-lsp.github.io/dap-mode/page/configuration/#php>

Requires:

+ [[https://github.com/xdebug/vscode-php-debug?tab=readme-ov-file][GitHub - xdebug/vscode-php-debug: PHP Debug Adapter for Visual Studio Code]]

#+begin_src emacs-lisp
(after! (:or php-mode phps-mode php-ts-mode)
  (when (featurep 'dap)
    (require 'dap-php)))
#+end_src

*** [[https://github.com/emacs-php/phpstan.el][emacs-php/phpstan.el]]: Provide PHPStan checks :linter:package:

#+begin_src emacs-lisp
(package! flycheck-phpstan
  (def-hook! +php-mode-load-flycheck-phpstan-h ()
    '(php-mode-hook php-ts-mode-hook)
    "Load the Flycheck checker for PHPStan in PHP buffers."
    (require 'flycheck-phpstan)))
#+end_src

#+begin_src emacs-lisp :tangle no
(package! flymake-phpstan
  (when (featurep 'flymake-flycheck)
    (add-hook 'php-mode-hook #'flymake-phpstan-turn-on)
    (after! flycheck
      (add-to-list 'flycheck-disabled-checkers 'phpstan))))
#+end_src

*** Configure formatters :formatting:
**** =ecs=

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define php-ecs-fmt
    :group 'ceamx
    :program (format "%s/vendor/bin/ecs" (getenv "PRJ_ROOT"))
    ;; XXX: Flags are very broken upstream <https://github.com/easy-coding-standard/easy-coding-standard/issues/213>
    :args `("check" "--no-ansi" "--no-progress-bar" "--no-interaction" "--quiet" "--fix" "--" ,input-file)
    :stdin nil
    :stdout nil))
#+end_src

**** =php-cs-fixer=

#+begin_src emacs-lisp
;; php-cs-fixer pretends to be a patch-output-friendly formatter, but there's no
;; way to stop it from outputting extraneous garbage.  and "--quiet" literally
;; silences everything, even the diff output.  based on similar output issues
;; with ECS (and identically-named flags), i suspect this the fault of the
;; Symfony Console library, which is unfortunately quite widely used.
(after! reformatter
  (reformatter-define php-cs-fixer-fmt
    :group 'ceamx
    :program (format "%s/vendor/bin/php-cs-fixer" (getenv "PRJ_ROOT"))
    :args `("fix" "--using-cache=no" "--sequential" "--no-interaction"
            "--" ,input-file)
    ;; FIXME: symfony/console yet again
    ;; :args `("fix" "--diff" "--using-cache=no" "--show-progress=no"
    ;;         ,(format "--config=%s/%s"
    ;;                  (getenv "PRJ_ROOT")
    ;;                  (or (and (boundp 'ceamx-php-cs-fixer-config-file-path)
    ;;                           ceamx-php-cs-fixer-config-file-path)
    ;;                      ".php-cs-fixer.php"))
    ;;         "--show-progress=none"
    ;;         "-")
    :stdin nil
    :stdout nil))
#+end_src

**** =phpcbf=

#+begin_src emacs-lisp
(defun +reformatter--phpcbf-fmt-exit-code-success-p (exit-code)
  "Handle PHPCBF non-standard exit codes."
  (or (= 0 exit-code)
      (= 1 exit-code)))

;; FIXME: phpcbf is really finicky and doesn't play nice with the usual
;; formatter standards.
;; + the exit codes are nonsense -- if there are any unfixed errors left in
;;   the file, phpcbf will still return non-zero.
;; + i wonder if the stupid exit codes mean that the patch/diff is output to
;;   stderr instead of stdout as expected by `reformatter-define'?
(after! reformatter
  (reformatter-define phpcbf-fmt
    :program (format "%s/vendor/bin/phpcbf" (getenv "PRJ_ROOT"))
    :args (list "--stdin-path" input-file
                "-q"
                "-")
    ;; XXX: apparently `:exit-code-success-p' does not really accept a lambda? maybe report upstream?
    ;; :exit-code-success-p +reformatter--phpcbf-fmt-exit-code-success-p
    ))
#+end_src

*** Projectile integration

#+begin_src emacs-lisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-directories "vendor"))
#+end_src

*** TODO ~ceamx-php-wordpress-spaghetti-template-p~: legacy theme template detection

#+begin_src emacs-lisp
;; (defconst ceamx-php-wordpress-template-names-regexp
;;   (rx))

;; (defun ceamx-php-wordpress-spaghetti-template-p (file)
;;   "Whether a file matches the pattern for a WordPress classic theme template."
;;   )
#+end_src

*** TODO Change buffer behavior based on ~ceamx-php-wordpress-spaghetti-template-p~ return value
*** Register Twig (=*.twig=) and Blade (=*.blade.php=) templates to open in ~web-mode~

#+begin_src emacs-lisp
(after! web-mode
  ;; Blade: Override the default engine in case `web-mode' is associated with the php extension by default.
  (add-to-list 'web-mode-engines-alist '("blade"  . "\\.blade\\."))
  (add-to-list 'auto-mode-alist '("\\.blade\\.php'" . web-mode))
  ;; Twig
  (add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode)))
#+end_src

*** TODO PHP enhancements from Doom

#+begin_example
;; TODO: from doom
  ;; (set-docsets! 'php-mode "PHP" "PHPUnit" "Laravel" "CakePHP" "CodeIgniter" "Doctrine_ORM")
  ;; (set-repl-handler! 'php-mode #'+php/open-repl)
  ;; (set-lookup-handlers! 'php-mode :documentation #'php-search-documentation)
  ;; (set-ligatures! 'php-mode
  ;;   ;; Functional
  ;;   :lambda "function()" :lambda "fn"
  ;;   :def "function"
  ;;   ;; Types
  ;;   :null "null"
  ;;   :true "true" :false "false"
  ;;   :int "int" :float "float"
  ;;   :str "string"
  ;;   :bool "list"
  ;;   ;; Flow
  ;;   :not "!"
  ;;   :and "&&" :and "and"
  ;;   :or "||" :or "or"
  ;;   :for "for"
  ;;   :return "return"
  ;;   :yield "use")
  #+end_example

** Shell scripts

Make sure ~flycheck-mode~ is not enabled in shell script buffers, as
~flymake~ will handle it just fine.

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  ;; Make files executable if their first line has a shebang.
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))

(after! eglot
  (add-to-list 'eglot-server-programs '((sh-mode bash-ts-mode) . ("bash-language-server" "start"))))

(let ((lsp-fn (if (eq 'lsp-mode ceamx-lsp-client)
                  #'lsp-deferred
                #'eglot-ensure)))
  (add-hook 'sh-mode-hook lsp-fn)
  (add-hook 'bash-ts-mode-hook lsp-fn))

(use-feature! flymake
  :config
  (add-hook 'sh-mode-hook #'flymake-mode)
  (add-hook 'bash-ts-mode-hook #'flymake-mode))
#+end_src

** ~apache-mode~: Language support for Apache Web Server configuration files

#+begin_src emacs-lisp
(use-package apache-mode
  ;; :ensure t
  )
#+end_src

** ~just-mode~: Language support for the Just task runner configuration files

#+begin_src emacs-lisp
(use-package just-mode
  ;;:ensure t
  )
#+end_src

** ~vimrc-mode~: Language support for =vimrc= syntax

#+begin_src emacs-lisp
(package! vimrc-mode
  (add-to-list 'auto-mode-alist '("\\.(idea)?vim\\(rc\\)?\\'" . vimrc-mode)))
#+end_src

** ~dotenv-mode~: Language support for Dotenv environment configuration files :package:major_mode:

- src :: <https://github.com/preetpalS/emacs-dotenv-mode>

#+begin_src emacs-lisp
(package! dotenv-mode)
#+end_src

** =ceamx-init-langs=: File Footer

#+begin_src emacs-lisp :tangle lisp/ceamx-init-langs.el :comments no
(provide 'ceamx-init-langs)
;;; ceamx-init-langs.el ends here
#+end_src

* TODO Outlines :: =outline= :outline:
:PROPERTIES:
:header-args: :noweb-ref init-outline
:END:

** TODO Expand the existing repeat map for outline navigation

I think this needs to be /contracted/ a bit.  Some of these aren't even real commands.

#+begin_src emacs-lisp
(after! (repeat outline)
  (define-keymap :keymap outline-navigation-repeat-map
    "C-x" #'foldout-exit-fold
    "x" #'foldout-exit-fold
    "C-z" #'foldout-zoom-subtree
    "z" #'foldout-zoom-subtree
    "C-a" #'outline-show-all
    "a" #'outline-show-all
    "C-c" #'outline-hide-entry
    "c" #'outline-hide-entry
    "C-d" #'outline-hide-subtree
    "C-e" #'outline-show-entry
    "e" #'outline-show-entry
    "TAB" #'outline-show-children
    "C-k" #'outline-show-branches
    "k" #'outline-show-branches
    "C-l" #'outline-hide-leaves
    "l" #'outline-hide-leaves
    "RET" #'outline-insert-heading
    "C-o" #'outline-hide-other
    "o" #'outline-hide-other
    "C-q" #'outline-hide-sublevels
    "q" #'outline-hide-sublevels
    "C-s" #'outline-show-subtree
    "s" #'outline-show-subtree
    "C-t" #'outline-hide-body
    "t" #'outline-hide-body
    "@" #'outline-mark-subtree)

  (ceamx-repeatify-keymap 'outline-navigation-repeat-map))
#+end_src


** ~outli~: Enable simple comment-based outline features in many modes

- Source code :: <https://github.com/jdtsmith/outli>

#+begin_src emacs-lisp
;; NOTE: In `emacs-lisp-mode' buffers, `outli-mode' should be enabled *after*
;; `lispy-mode'. See the package configuration for `lispy'.

(package! (outli :host github :repo "jdtsmith/outli")
  (def-hook! +outli-mode-maybe-enable-h ()
    '(prog-mode-hook text-mode-hook)
    "Enable `outli-mode' conditionally, excluding some modes.
Note that `emacs-lisp-mode' is excluded here due to a conflict with
`lispy-mode'.  `outli-mode' must be loaded after `lispy-mode'."
    (let ((exclude-modes '(emacs-lisp-mode))
          (excludep (lambda (excluded-mode)
                      (eq major-mode excluded-mode))))
      (unless (seq-some excludep exclude-modes)
        (outli-mode)))))

(with-eval-after-load 'outli
  (defvar outli-mode-map)
  (declare-function outline-next-heading "outline")
  (declare-function outline-previous-heading "outline")
  (declare-function outline-promote "outline")
  (declare-function outline-demote "outline")

  ;; FIXME: this example from the readme results in errors due to mismatched signature
  ;; (advice-add 'load-theme :after #'outli-reset-all-faces)
  ;; (advice-remove 'load-theme #'outli-reset-all-faces)

  (define-keymap :keymap outli-mode-map
    "C-c C-n" #'outline-next-heading
    "C-c C-p" #'outline-previous-heading
    ;; "C-c C-p" #'outline-back-to-heading
    "C-c M-h" #'outline-promote
    "C-c M-l" #'outline-demote))
#+end_src


** TODO A transient menu for outline navigation

#+begin_src emacs-lisp
;; (after! (transient outline)
;;   (transient-define-prefix ceamx/outline-dispatch ()
;;     "Outline navigation transient menu."
;;     [["Navigate"
;;       ("u" "up" outline-up-heading)
;;       ("n" "next" outline-next-visible-heading)
;;       ("p" "prev" outline-previous-visible-heading)
;;       ("f" "forward" outline-forward-same-level)
;;       ("b" "backward" outline-backward-same-level)]]))

;; (after! (hydra outline)
;;   (defhydra ceamx/outline-hydra ( :color red)
;;     "
;; ^Navigate^            ^Subtree^        ^Metadata^
;; ^--------^----------  ^-------^-----  ^---------^--
;; _n_ext visible        _I_: drag up    _t_odo-state
;; _p_revious visible    _J_: promote    _d_eadline
;; _f_orward same level  _K_: drag down  _s_chedule
;; _b_ack same level     _L_: demote
;; _u_p level            _N_: narrow     _xp_: set property
;;                       _W_: widen
;; "))
#+end_src


* TODO Notetaking :: =notes= :notes:writing:
:PROPERTIES:
:header-args: :noweb-ref init-notes
:END:

** Define locations for important directories and files

#+begin_src emacs-lisp :noweb-ref config-feature-paths
(defconst ceamx-notes-dir
  (file-name-as-directory (concat ceamx-home-dir "Documents/notes"))
  "Base directory for note storage.")

(defconst ceamx-agenda-dir
  (file-name-as-directory (concat ceamx-notes-dir "g2d")))

(defconst ceamx-dailies-dir
  (file-name-as-directory (concat ceamx-notes-dir "daily")))

(defconst ceamx-notes-default-dir
  (file-name-as-directory (concat ceamx-notes-dir "default")))

(defconst ceamx-journal-dir
  (file-name-as-directory (concat ceamx-notes-dir "journal")))

(defconst ceamx-work-notes-dir
  (file-name-as-directory (concat ceamx-notes-dir "work")))
#+end_src

Create the directories if they don't already exist (to prevent errors):

#+begin_src emacs-lisp
(require 'f)
(require 'ceamx-paths)

(dolist (dir (list ceamx-notes-dir ceamx-journal-dir ceamx-agenda-dir))
  (f-mkdir-full-path dir))
#+end_src

** =consult-notes= :: provide notes as a Consult datasource :package:consult:

- website :: <https://github.com/mclear-tools/consult-notes>

#+begin_src emacs-lisp
(package! consult-notes)

(after! consult-notes
  (setopt consult-notes-file-dir-sources
          `(("Default" ?D ,ceamx-notes-default-dir)
            ("Org" ?o ,org-directory)))

  (setopt consult-notes-org-headings-files org-agenda-files)
  (consult-notes-org-headings-mode)

  ;; Integrate with Denote if available.
  (when (locate-library "denote")
    (consult-notes-denote-mode))
  (setopt consult-notes-denote-files-function (lambda () (denote-directory-files nil t t))))
#+end_src

** TODO Embark integration for ~consult-notes~ :embark:
#+begin_src emacs-lisp
;; via <https://github.com/mclear-tools/consult-notes#embark-support>
;; (after! (consult-notes embark)
;; 	(defun ceamx/consult-notes-embark-action (cand)
;;     "Do something with CAND."
;;     (interactive "fNote: ")
;;     ;; FIXME: needs function
;;     ;;
;;     ;; > Note that Embark will run on the CAND at point, which will often return
;;     ;; > either a file name, or a file name plus other annotations, depending on
;;     ;; > what your sources are. So you’ll have to write a function to manipulate
;;     ;; > CAND to give you a viable path to the file or a directory containing
;;     ;; > the file.
;;     (my-function))

;;   (defvar-keymap consult-notes-map
;;     :doc "Keymap for Embark notes actions."
;;     :parent embark-file-map
;;     "m" #'ceamx/consult-notes-embark-action)

;;   (add-to-list 'embark-keymap-alist `(,consult-notes-category . consult-notes-map))

;;   ;; Make `embark-export' use dired for notes.
;;   (setf (alist-get consult-notes-category embark-exporters-alist) #'embark-export-dired))
#+end_src

** Denote (denote.el)

- website :: <https://protesilaos.com/emacs/denote>

#+begin_src emacs-lisp
(require 'ceamx-paths)

(package! denote
  (require 'denote)

  ;; Integrations

  (add-hook 'find-file-hook #'denote-fontify-links-mode)
  (after! dired
    (add-hook 'dired-mode-hook #'denote-dired-mode))
  (after! mouse
    (add-hook 'context-menu-functions #'denote-context-menu))

  ;; Customizations

  (setopt denote-directory ceamx-notes-default-dir)
  (setopt denote-save-buffers nil)
  (setopt denote-known-keywords '("emacs" "philosophy" "correspondence" "language" "work"))
  (setopt denote-infer-keywords t)
  (setopt denote-sort-keywords t)
  (setopt denote-file-type nil)         ; Org is the default
  (setopt denote-prompts '(title keywords))
  (setopt denote-excluded-directories-regexp "\\.archive")
  (setopt denote-rename-confirmations '(modify-file-name
                                        rewrite-front-matter))

  ;; Pick dates, where relevant, with Org's advanced interface.
  (setopt denote-date-prompt-use-org-read-date t)

  ;; Use a file-type-specific date format.
  (setopt denote-date-format nil)

  ;; also: `denote-link-backlinks-display-buffer-action'
  (setopt denote-backlinks-show-context t)

  (setopt denote-dired-directories
          (list denote-directory
                (thread-last denote-directory (expand-file-name "attachments"))))

  ;; Automatically rename Denote buffers using the
  ;; `denote-rename-buffer-format'.
  (denote-rename-buffer-mode 1))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (define-keymap :keymap dired-mode-map
    "C-c C-d C-i" #'denote-link-dired-marked-notes
    "C-c C-d C-r" #'denote-dired-rename-marked-files
    "C-c C-d C-k" #'denote-dired-rename-marked-files-with-keywords
    "C-c C-d C-R" #'denote-dired-rename-marked-files-using-front-matter))

(with-eval-after-load 'org-capture
  (setopt denote-org-capture-specifiers "%l\n%i\n%?")
  (add-to-list 'org-capture-templates
      '("n" "New note (with denote.el)" plain
        (file denote-last-path)
        #'denote-org-capture
        :no-save t
        :immediate-finish nil
        :kill-buffer t
        :jump-to-captured t)))
#+end_src

* =org= :: Org-Mode
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-org.el
:END:

** Requirements

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

** Set up essential files & directories :paths:

These must be set before loading Org-Mode or any of its sub-features
are used.

Most notes will be stored in ~ceamx-notes-dir~, defined in ~ceamx-paths~.

Because these directories are managed by Syncthing, creating them
automatically is not a great idea if they do not already exist.  A
better workaround to the issue of Org-Mode failing to load might be
setting the default target to a subdirectory of ~user-emacs-directory~.

Why?  Because you do not want to end up with two Syncthing entries
with the same intended target path but with different IDs.  If
Syncthing is not set up yet, then any directory created via the Emacs
configuration will probably result in a conflict when Syncthing tries
to take control of these paths.

#+begin_src emacs-lisp :tangle no :noweb-ref config-feature-paths
(defconst ceamx-default-agenda-files
  (file-expand-wildcards (file-name-concat ceamx-agenda-dir "*.org"))
  "List of absolute paths of all files that should be included in the agenda.")

(defconst ceamx-default-todo-file
  (expand-file-name "todo.org" ceamx-agenda-dir)
  "Absolute path to default file for active G2D.")

(defconst ceamx-default-capture-file
  (expand-file-name "inbox.org" ceamx-agenda-dir)
  "Absolute path to default inbox file for new G2D waiting to be processed.")
#+end_src

The value of ~org-directory~ will be used as a default destination for
new notes, especially as they relate to tasks and agendas.  For that
reason, use the ~ceamx-agenda-dir~.

#+BEGIN_SRC emacs-lisp
(defvar org-directory ceamx-agenda-dir)

;; TODO: I would prefer to check for the directory's existence
;; explicitly -- this feels strange at the top-level.  Maybe move this
;; to the section where `ceamx-agenda-dir' is defined.
(f-mkdir-full-path org-directory)

(setopt org-agenda-files ceamx-default-agenda-files)
#+END_SRC

** Baseline customizations

#+begin_src emacs-lisp
(after! org
  (setopt org-blank-before-new-entry '((heading . auto)
                                       (plain-list-item . nil)))
  (setopt org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  ;;
  ;; Editing

  (setopt org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-special-ctrl-o t)
  (setopt org-ctrl-k-protect-subtree t)
  (setopt org-M-RET-may-split-line '((default . nil)))
  (setopt org-insert-heading-respect-content t)
  (setopt org-reverse-note-order nil)
  (setopt org-list-use-circular-motion t)

  ;;
  ;; Tags

  (setopt org-auto-align-tags nil
          org-tags-column 0)

  ;;
  ;; Folding

  (setopt org-cycle-emulate-tab t)
  (setopt org-startup-folded 'content)
  (setopt org-fold-catch-invisible-edits 'show-and-error)

  ;;
  ;; Priority

  (setopt org-priority-start-cycle-with-default nil)

  ;;
  ;; Workflow states

  (setopt org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t)
  (setopt org-log-done 'time
          org-log-redeadline 'time
          org-log-refile 'time)
  (setopt org-log-into-drawer t
          org-log-states-order-reversed nil)
  (setopt org-todo-keywords '((sequence
                               "TODO(t)"
                               "INPRG(i@/!)"
                               "BLOCKED(b@)"
                               "HOLD(h@)"
                               "PROJ(p)"
                               "|"
                               "DONE(d!)"
                               "CANCELLED(x@/!)")))

  ;;
  ;; Rich media & attachments

  (setopt org-image-actual-width 480)
  (setopt org-startup-with-inline-images t)

  ;;
  ;; Miscellaneous

  (setopt org-structure-template-alist
          '(("s" . "src")
            ("e" . "src emacs-lisp")
            ("E" . "src emacs-lisp :results value code :lexical t")
            ("t" . "src emacs-lisp :tangle FILENAME")
            ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
            ("x" . "example")
            ("X" . "export")
            ("q" . "quote"))))
#+end_src

** Enforce the correct ~tab-width~ to prevent errors :hack:formatting:

<https://github.com/doomemacs/doomemacs/commit/43870bf8318f6471c4ce5e14565c9f0a3fb6e368>

#+BEGIN_SRC emacs-lisp
(defun +org-mode--local-set-tab-width-h ()
  "Set the `tab-width' in `org-mode' buffers to 8 columns.
Any `tab-width' value other than 8 will result in an error.

This should be set as late as possible, after all other
`org-mode-hook' functions added by packages and
configurations.  Hence the use of `after-change-major-mode-hook',
which runs at the very end of major-mode activation.

Intended for use as a local hook function on
`after-change-major-mode-hook' as added within `org-mode-hook'."

  ;; This check is necessary to handle, for example, `org-edit-src-code', which
  ;; clones the `org-mode' buffer and changes its major-mode.
  (when (derived-mode-p 'org-mode)
    (setq tab-width 8)))

(def-hook! +org-mode-enforce-tab-width-h ()
  'org-mode-hook
  "Add a local hook to control `tab-width' on `after-change-major-mode-hook'."
  (add-hook 'after-change-major-mode-hook #'+org-mode--local-set-tab-width-h 0 t))
#+END_SRC

** Appearance

+ Package :: <https://github.com/minad/org-modern>
+ Package :: <https://github.com/awth13/org-appear>

#+begin_src emacs-lisp
(package! org-modern
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
  (after! org
    (keymap-set org-mode-map "C-c t p" #'org-modern-mode))
  (after! org-agenda
    (keymap-set org-agenda-mode-map "C-c t p" #'org-modern-mode)))

(package! org-appear
  (add-hook 'org-mode-hook #'org-appear-mode))

(after! org
  (add-hook 'org-mode-hook #'prettify-symbols-mode)

  (setopt org-auto-align-tags nil
          org-tags-column 0
          org-agenda-tags-column 0)
  (setopt org-pretty-entities t
          org-pretty-entities-include-sub-superscripts nil)
  (setopt org-src-fontify-natively t)
  ;; TODO: show markers for bold and italic, hide everything else
  (setopt org-hide-emphasis-markers t)
  (setopt org-link-descriptive t)
  (setopt org-ellipsis " ⇢")            ; prefix is nbsp

  ;; Bring attention when point is on `org-ellipsis'.
  ;; FIXME: not correct
  (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))

(after! org-appear
  (setopt org-appear-autoemphasis t
          org-appear-autolinks t
          org-appear-autosubmarkers t
          org-appear-autoentities t
          org-appear-autokeywords t
          org-appear-inside-latex t)
  (setopt org-appear-delay 0.25)
  (setopt org-appear-trigger 'always))
#+end_src

** Appearance: Create the effect of visual indentation

~org-modern~ is incompatible with Org indentation.  But we can pretend.

#+begin_src emacs-lisp :tangle no
(after! org
  (setopt org-indent-indentation-per-level 2)
  (setopt org-startup-indented nil))

(after! org-modern
  ;; Emulate "indentation" by replacing leading stars with whitespace.
  ;; One space will replace one star.  Additional spaces will appear
  ;; as whitespace, creating the effect of visual indentation.
  (setopt org-modern-hide-stars "   ")
  (setopt org-modern-star nil))
#+end_src

** Appearance: Display visual feedback after actions

- Source :: <https://github.com/protesilaos/dotfiles/blob/4d4e82fc63dd74971a7bf7895e4e0e24c3d446da/emacs/.emacs.d/prot-emacs-modules/prot-emacs-org.el#L112-L115>

#+begin_src emacs-lisp
(after! (org pulsar)
  (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
    (add-hook hook #'pulsar-recenter-center)
    (add-hook hook #'pulsar-reveal-entry)))
#+end_src

** ~doct~ :: a template engine for ~org-capture~

- Source code :: <https://github.com/progfolio/doct>

#+BEGIN_SRC emacs-lisp
(use-package doct
  ;; :ensure t
  :demand t
  :functions (doct))
#+END_SRC

** ~org-ql~ :: a query-builder for ~org-mode~ elements

- Source code :: <https://github.com/alphapapa/org-ql>

#+BEGIN_SRC emacs-lisp
(use-package org-ql
  ;; :ensure t
  )
#+END_SRC

** ~org-contrib~ :: a library of unmaintained community packages

- Website :: <https://orgmode.org/worg/org-contrib/>

#+begin_src emacs-lisp
(use-package org-contrib
  ;; :ensure t
  :after (org)

  :init
  (require 'org-checklist)
  (require 'org-choose)
  (add-to-list 'org-modules 'org-checklist)
  (add-to-list 'org-modules 'org-choose))
#+end_src

** Navigation & Refiling

#+begin_src emacs-lisp
(defvar ceamx-org-outline-search-max-level 5)

(after! org
  (setopt org-imenu-depth ceamx-org-outline-search-max-level))

(after! org-goto
  (setopt org-goto-interface 'outline-path-completion
          org-goto-max-level ceamx-org-outline-search-max-level))

(after! org-refile
  (setopt org-outline-path-complete-in-steps nil)

  (setopt org-refile-use-outline-path 'file)
  (setopt org-refile-allow-creating-parent-nodes 'confirm)
  (setopt org-refile-use-cache nil)

  (setopt org-refile-targets `((,ceamx-default-todo-file . (:level . 2))
                               ;; (org-agenda-files . (:maxlevel . 1))
                               (nil . (:maxlevel . ,ceamx-org-outline-search-max-level))))

  ;; TODO: how to accept any value of `:maxlevel'?
  (add-to-list 'safe-local-variable-values
      '(org-refile-targets (nil :maxlevel . 4)))
  (add-to-list 'safe-local-variable-values
      '(org-refile-targets (nil :maxlevel . 6))))
#+end_src

** Archiving

#+begin_src emacs-lisp
(after! org-archive
  (setopt org-archive-save-context-info
          '(time file category todo itags olpath ltags)))
#+end_src

** TODO Refiling: Append not prepend when working on Ceamx config
** Capture

Define the Org-Capture templates:

#+begin_src emacs-lisp
(after! (org-capture doct)
  (setopt org-capture-templates
          (doct `(("Inbox"
                   :keys "t"
                   ;; TODO: make sure this icon spec is up to date with 2024
                   :icon ("checklist" :set "octicon" :color "green")
                   ;; TODO: should this be evaled/expanded?
                   :file ceamx-default-capture-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a"))))))
#+end_src

** Agenda

#+BEGIN_SRC emacs-lisp
(after! org-agenda
  (setopt org-agenda-tags-column 0)
  (setopt org-agenda-block-separator ?─)
  (setopt org-agenda-time-grid
          '((daily today require-timed)
            (800 1000 1200 1400 1600 1800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (setopt org-agenda-current-time-string
          "⭠ now ─────────────────────────────────────────────────"))

(package! org-super-agenda)
#+END_SRC

** Literate programming

#+BEGIN_SRC emacs-lisp
  (after! org-src
    ;; Changing the indentation of source code is unhelpful and destructive.
    (setopt org-edit-src-content-indentation 0)

    (setopt org-edit-src-persistent-message nil)
    (setopt org-src-ask-before-returning-to-edit-buffer nil)
    (setopt org-src-preserve-indentation t)
    (setopt org-src-tab-acts-natively t)

    ;; TODO: current window when narrow/short frame, but otherwise reorganize-frame is good
    ;; (setopt org-src-window-setup 'other-window)
    (setopt org-src-window-setup 'current-window))

  (after! org
    ;; Ensure common languages are loaded.
    (setopt org-babel-load-languages '((emacs-lisp . t)
                                       (shell . t)
                                       (sql . t))))
#+END_SRC

** Org-Babel: Load other supported languages on-demand during execution

+ source :: <https://github.com/Icy-Thought/emacs.d/blob/e9c75d87bf61c456b26332787cde27bdfc188830/config.org#org-babel-language-on-demand>

#+begin_src emacs-lisp
(after! ob-core
  (def-advice! +org-babel-load-language-on-demand-a (orig-fun &rest args)
    :around #'org-babel-execute-src-block
    "Load language if needed before executing a source block."
    (let ((language (org-element-property :language (org-element-at-point))))
      (unless (cdr (assoc (intern language) org-babel-load-languages))
        (add-to-list 'org-babel-load-languages (cons (intern language) t))
        (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
      (apply orig-fun args))))
#+end_src

** TODO Provide commands to archive DONE tasks

| Author | Sacha Chua                                                                                 |
| URL    | <https://pages.sachachua.com/.emacs.d/Sacha.html#quick-way-to-archive-all-done-from-inbox> |

I don't think this is working properly...

#+begin_src emacs-lisp :tangle no
(require 'ceamx-paths)

(defun ceamx/org-clean-up-inbox ()
  "Archive all DONE tasks and sort the remainder by TODO order."
  (interactive)
  (with-current-buffer (find-file ceamx-default-capture-file)
    (ceamx/org-archive-done-tasks 'file)
    (goto-char (point-min))
    (if (org-at-heading-p) (save-excursion (insert "\n")))
    (org-sort-entries nil ?p)
    (goto-char (point-min))
    (org-sort-entries nil ?o)
    (save-buffer)))

(defun ceamx/org-archive-done-tasks (&optional scope)
  "Archive finished or cancelled tasks.
       SCOPE can be 'file or 'tree."
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "TODO=\"DONE\"|TODO=\"CANCELLED\"" (or scope (if (org-before-first-heading-p) 'file 'tree))))
#+end_src

** ~org-download~ :: support dragging-and-dropping images into Org buffers :media:network:package:

<https://github.com/abo-abo/org-download>

#+BEGIN_SRC emacs-lisp
(package! org-download
  (require 'org-download)
  (add-hook 'dired-mode-hook #'org-download-enable))
#+END_SRC

** ~org-web-tools~ :: view, capture, and archive webpages in org-mode :package:network:web:

#+BEGIN_SRC emacs-lisp
(package! org-web-tools
  (keymap-set org-mode-map "C-c i l" #'org-web-tools-insert-link-for-url))
#+END_SRC

** ~org-sidebar~ :: provide a sidebar for Org buffers :package:

<https://github.com/alphapapa/org-sidebar>

#+BEGIN_SRC emacs-lisp
(package! org-sidebar)
#+END_SRC

** ~org-bookmark-heading~ :: Support heading bookmarks :bookmarks:package:

#+begin_src emacs-lisp
(package! org-bookmark-heading
  (after! org
    (require 'org-bookmark-heading)))
#+end_src

** TODO ~org-remark~

#+begin_src emacs-lisp
(use-package org-remark
  ;; :ensure t
  )
#+end_src

** Exporters
*** =ox-gfm= :: org-export to GitHub Flavored Markdown (GFM) :package:

#+begin_src emacs-lisp
(package! ox-gfm
  (after! org
    (require 'ox-gfm))

  (add-to-list 'safe-local-variable-values
      '(eval add-hook 'after-save-hook #'org-gfm-export-to-markdown t t)))
#+end_src

** ~auto-tangle-mode~ :: a minor-mode to automatically tangle Org files

#+BEGIN_SRC emacs-lisp
(use-package auto-tangle-mode
  :ensure (auto-tangle-mode :host github :repo "progfolio/auto-tangle-mode.el")
  :commands (auto-tangle-mode))
#+END_SRC

** TODO Org-Mode: electric-pair for equals-sign and tilde
** Footer: Provide the =ceamx-init-org= feature

#+begin_src emacs-lisp :tangle lisp/ceamx-init-org.el :comments no
(provide 'ceamx-init-org)
;;; ceamx-init-org.el ends here
#+end_src

* TODO Printing :: =printing=

#+begin_src emacs-lisp :tangle lisp/init-printing.el :comments no
;;; init-printing.el --- Support for printing documents  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; FIXME: prints raw PDF data

;;; Code:

(require 'ceamx-lib)

(use-feature! printing
  :defer 10
  :commands (pr-update-menus)
  :config
  ;; EPSON WF-3520
  (setopt printer-name "LABORTTY")
  ;; (setopt lpr-switches '())
  (pr-update-menus))

(provide 'init-printing)
;;; init-printing.el ends here
#+end_src

* TODO Newsreader :: =news= :news:

#+begin_src emacs-lisp :tangle lisp/init-news.el :comments no
;;; init-news.el --- News feed (RSS/Atom) subscription support  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>
;; Keywords: news, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; But do I really want to know what's happening outside of Emacs?

;; FIXME: use <https://github.com/skeeto/elfeed>
;; FIXME: OPML instead of weird lists

;;; Code:

(defconst ceamx-reading-dir (concat ceamx-home-dir "Documents/reading/"))

(package! elfeed)

(package! elfeed-org
  (require 'elfeed-org)

  ;; When `elfeed' starts, `elfeed-org' will read the configuration.
  (elfeed-org)

  (setopt rmh-elfeed-org-files (list (locate-user-emacs-file "feeds.org")
                                     ;; (file-name-concat ceamx-reading-dir "000-feeds.org")
                                     )))



(provide 'init-news)
;;; init-news.el ends here
#+end_src


** DONE Feature name ~init-feeds~ does not match the filename =init-news.el=
CLOSED: [2024-07-16 Tue 00:00]


- State "DONE"       from "TODO"       [2024-07-16 Tue 00:00]

* TODO Web Browsing :: =eww= :web:

#+begin_src emacs-lisp :tangle lisp/init-eww.el :comments no
;;; init-eww.el --- Surfing the Wild Web of Words  -*- lexical-binding: t; -*-

;; TODO: headers

;;; Commentary:

;;; Code:

;;; Requirements

(require 'ceamx-lib)
(require 'lib-eww)

(autoload 'eww "eww")

;;; Configuration
#+end_src


** Tell Emacs we want its Web Wowser to handle URL browsing by default

#+begin_src emacs-lisp
(setopt browse-url-browser-function 'eww-browse-url)
#+end_src


*** TODO Use a different browser for some domains


** Configure EWW settings before loading

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(setopt shr-use-colors t)
(setopt shr-folding-mode t)
(setopt shr-bullet "• ")

(setopt eww-search-prefix "https://duckduckgo.com/html?q=")

;; HTTP headers may contain user information, which we can limit as needed.
;; When providing a list of symbols, the symbols indicate what NOT to send.
;; TODO: Move this elsewhere, as it probably affects other HTTP requests.
(setopt url-privacy-level '(email lastloc))
#+end_src


** EWW: Keybindings

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(after! eww
  (define-keymap :keymap eww-mode-map
    "," '("scroll down" . scroll-up-command)
    "." '("scroll up" . scroll-down-command)
    "o" '("open link" . link-hint-open-link)))
#+end_src

** Cleanup the rendering of some pages

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(add-hook 'eww-after-render-hook #'ceamx-eww-rerender)
#+end_src

** File Footers

#+begin_src emacs-lisp :tangle lisp/init-eww.el :comments no
(provide 'init-eww)
;;; init-eww.el ends here
#+end_src

** EWW: Library

#+begin_src emacs-lisp :tangle lisp/lib-eww.el :comments no
;;; lib-eww.el --- Helpers for Ceamx EWW  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery
;; Copyright (C) 2018  Howard X. Abrams

;; Author: Chris Montgomery <chmont@protonmail.com>
;;         Howard X. Abrams <howard.abrams@workday.com>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.

;;; Commentary:

;;; Sources:

;; - <https://gitlab.com/howardabrams/spacemacs.d/-/blob/51196e861da9a76a02f1159397ba85b936cdfe27/layers/ha-eww/funcs.el>
;; - <https://writequit.org/org/settings.html#sec-1-61>

;;; Code:

;;; Requirements

(require 'cl-lib)
(require 'url)

;;; Variables

(defun ceamx/eww-wiki (text)
  "Search Wikipedia for TEXT."
  (interactive (list (read-string "Wiki for: ")))
  (eww (format "https://en.m.wikipedia.org/wiki/Special:Search?search=%s"
               (url-encode-url text))))

(defconst ceamx-eww-reddit-comment-header-regexp
  (rx "level "
      (one-or-more digit)
      (zero-or-more anything)
      line-end

      (group (one-or-more anything))
      line-end

      (one-or-more digit)
      " points"
      (one-or-more anything)
      line-end)
  "Regular expression for matching Reddit comments.")

(defconst ceamx-eww-github-repo-landing-readme-header-regexp
  (rx line-start
      "• "
      (one-or-more anything) ; SVG icon for the readme
      "README"
      line-end)
  "Regular expression matching the header for the README file content.")

(defconst ceamx-eww-github-begin-file-content-regexp
  (rx
   (one-or-more digit)
   " lines ("
   (one-or-more digit)
   " sloc) "
   (one-or-more digit)
   " ")
  "Regular expression for matching the start of a repo file on GitHub.")

;; TODO: support formats other than markdown too
(defconst ceamx-eww-github-footer-text-regexp
  (rx line-start
      (one-or-more anything)            ; SVG of GitHub logo
      " © "
      (one-or-more digit)
      " GitHub, Inc."
      line-end)
  "GitHub's copyright line is a good indication of the end of the content.
Note that as of 2024-03-13, repo file views no longer have a footer.")

;;; Functions

(defun ceamx/eww-clean-reddit ()
  "Remove a lot of the cruft in a rendered Reddit page."
  (interactive)
  (read-only-mode -1)

  ;; 2 comments
  ;; 79% Upvoted
  ;; What are your thoughts? Log in or Sign uplog insign up
  ;; Sort by

  ;; level 1
  ;; vale_fallacia
  ;; 1 point · 12 hours ago

  (flush-lines (rx line-start
                   (zero-or-more whitespace)
                   "Submit"))
  (while (re-search-forward ceamx-eww-reddit-comment-header-regexp nil t)
    (replace-match (concat "** " (match-string 1))))
  (read-only-mode 1))

(defun ceamx/eww-clean-github ()
  "Jump to the beginning of the content on a GitHub repo page."
  (interactive)
  (when (re-search-forward ceamx-eww-github-footer-text-regexp nil t)
    (read-only-mode -1)
    ;; (previous-line 2) ; "interactive use only"
    (forward-line -2)
    (delete-region (point) (point-max))
    (goto-char (point-min)))

  (when (or (re-search-forward ceamx-eww-github-begin-file-content-regexp nil t)
            (re-search-forward ceamx-eww-github-repo-landing-readme-header-regexp nil t))
    (forward-line 2)
    (recenter-top-bottom 0)))

(defun ceamx/eww-clean-stackoverflow ()
  "Jump to the start of interesting content on a Stack Overflow page."
  (interactive)
  (read-only-mode -1)

  ;; (mapcar (lambda (regex) (flush-lines regex))
  ;;         '("^up vote "
  ;;           "^answered "
  ;;           "^asked [A-Z]" "^edited [A-Z]"
  ;;           "^add a comment "
  ;;           "^share|"
  ;;           "^active oldest"))
  (mapc (lambda (regex) (flush-lines regex))
        '("^up vote "
          "^answered "
          "^asked [A-Z]" "^edited [A-Z]"
          "^add a comment "
          "^share|"
          "^active oldest"))

  (goto-char 0)
  (re-search-forward "Ask Question" nil t)
  (backward-paragraph 2)
  (forward-line)
  (recenter-top-bottom 0)

  (flush-lines "^Ask Question")
  (read-only-mode 1))

(defun ceamx-eww-rerender ()
  "Invoke a rerenderer function based on the URL to be displayed."
  (declare-function eww-current-url "eww")
  (declare-function eww-readable "eww")

  (let* ((url  (url-generic-parse-url (eww-current-url)))
         (host (url-host url))
         (path (car (url-path-and-query url)))
         (bits (split-string host "\\."))
         (site (cl-first (last bits 2))))
    (cond
     ((equal site "google")        (eww-readable))
     ((equal site "reddit")        (ceamx/eww-clean-reddit))
     ((equal site "github")        (ceamx/eww-clean-github))
     ((equal site "stackoverflow") (ceamx/eww-clean-stackoverflow)))))

;; FIXME: dependency i am not using -- replace function
;; (defun ceamx/eww-copy-feed-url ()
;;   "Take the EWW's current URL location and pass it to the `feed-discovery' function."
;;   (interactive)
;;   (feed-discovery-copy-feed-url (eww-current-url)))

(provide 'lib-eww)
;;; lib-eww.el ends here
#+end_src

** EWW: Sources

*** [[https://gitlab.com/howardabrams/spacemacs.d/-/blob/51196e861da9a76a02f1159397ba85b936cdfe27/layers/ha-eww/funcs.el][layers/ha-eww/funcs.el · 51196e861da9a76a02f1159397ba85b936cdfe27 · Howard Abrams / spacemacs.d · GitLab]]

* Tools :: =tools= :tools:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-tools.el
:END:

** The =lisp/ceamx-init-tools.el= file header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-tools.el :comments no
;;; ceamx-init-tools.el --- Tools and utilities  -*- lexical-binding: t;  -*-

;; Copyright (c) 2023-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;; Code:

(require 'seq)

(require 'ceamx-lib)
#+end_src

** Set up ~eshell~, the Emacs-Lisp shell

#+begin_src emacs-lisp
(after! eshell
  (setopt eshell-scroll-to-bottom-on-input 'this))
#+end_src

** ~eat~ :: [E]mulate [A] [T]erminal

+ Package :: <https://codeberg.org/akib/emacs-eat/>

#+begin_src emacs-lisp
(package! eat
  (after! eshell
    (add-hook 'eshell-load-hook #'eat-eshell-mode)
    (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode))
  (after! popper
    (setopt popper-reference-buffers
            (append popper-reference-buffers '("\\*eat\\*")))))
#+end_src

** [[https://joostkremers.github.io/pandoc-mode/][Pandoc-mode]]: filetype conversion multitool

#+begin_src emacs-lisp
(package! pandoc-mode
  (add-hook 'markdown-mode-hook #'pandoc-mode)

  (add-hook 'pandoc-mode-hook #'pandoc-load-default-settings))
#+end_src
** [[https://github.com/hniksic/emacs-htmlize][hniksic/emacs-htmlize]]: Convert buffer text and decorations to HTML

#+begin_src emacs-lisp
(package! htmlize
  ;; FIXME: conflicts with `beframe'
  ;; (keymap-global-set "C-c b h" #'htmlize-buffer)
  )
#+end_src
** [[https://github.com/alphapapa/unpackaged.el][alphapapa/unpackaged.el]]: a library of useful yet "unsubstantial" Emacs Lisp code

#+begin_src emacs-lisp
(package! (unpackaged :host github :repo "alphapapa/unpackaged.el"))
#+end_src

** ~mugur~: a configurator for QMK keyboards

#+begin_src emacs-lisp
(package! mugur)
#+end_src

** ~free-keys~: Show free keybindings for modkeys or prefixes

+ Package :: <https://github.com/Fuco1/free-keys>

#+begin_src emacs-lisp
(package! free-keys)
#+end_src

** ~uuidgen~: Generate and insert UUIDs

#+begin_src emacs-lisp
(package! uuidgen)
#+end_src

** Augementated Intelligentry (AI)

Providing integrations with LLMs and other simulation machines.

M is not eager to board the train bound for Hype City.

** Personal Finance with =hledger=

- Website :: <https://hledger.org/>
- Docs :: <https://hledger.org/1.30/hledger.html#journal>
- Package :: <https://github.com/narendraj9/hledger-mode>

*** Define important feature paths :paths:

#+begin_src emacs-lisp :noweb-ref config-feature-paths
(defconst ceamx-ledger-dir (expand-file-name "~/ledger"))
(defconst ceamx-ledger-main-journal-file (file-name-concat ceamx-ledger-dir "main.journal"))
#+end_src

*** Install ~hledger-mode~ :package:

#+begin_src emacs-lisp
(require 'ceamx-paths)

(package! hledger-mode
  (setopt hledger-jfile ceamx-ledger-main-journal-file))
#+end_src

*** Register ~hledger-mode~ buffers as popups :window:

#+begin_src emacs-lisp
(after! popper
  (add-to-list 'popper-reference-buffers "\\*Personal Finance\\*"))
#+end_src

*** Register the =hledger= checker for =Flycheck= :checkers:

#+begin_src emacs-lisp
(package! flycheck-hledger
  (when (fboundp 'flycheck-mode)
    (add-hook 'hledger-mode-hook #'flycheck-mode))

  (setopt flycheck-hledger-strict t))
#+end_src

** PDF-Tools

- website :: <https://github.com/vedang/pdf-tools>
- ref :: <https://github.com/jwiegley/dot-emacs/blob/master/init.org>

~pdf-tools~ should be installed installed via Nixpkgs because it requires
some separate binaries.

#+begin_src emacs-lisp
(require 'ceamx-lib)

(defvar pdf-tools-handle-upgrades nil)

(after! pdf-tools
  (dolist
      (pkg
       '(pdf-annot pdf-cache pdf-dev pdf-history pdf-info pdf-isearch
         pdf-links pdf-misc pdf-occur pdf-outline pdf-sync
         pdf-util pdf-view pdf-virtual))
    (require pkg))
  (pdf-tools-install))
#+end_src

** TODO <https://github.com/doomemacs/doomemacs/blob/master/modules/tools/pdf/config.el>
** TODO =saveplace-pdf-view=
** Yijing aka I Ching

Unfortunately, due to copyright restrictions, there are no modern translations
available for legal distribution.

*** DISABLED [[https://github.com/zzkt/i-ching][zzkt/i-ching]] (via MELPA)
:PROPERTIES:
:header-args: :tangle no
:END:

Does not support changing line commentaries!

#+begin_src emacs-lisp
(package! i-ching
  (setopt i-ching-hexagram-size 18
          i-ching-hexagram-font "DejaVu Sans"
          i-ching-divination-method '3-coins
          i-ching-randomness-source 'pseudo)

  (keymap-set ceamx-insert-prefix "h" #'i-ching-insert-hexagram))
#+end_src

*** emacswiki:i-ching.el

+ src :: https://www.emacswiki.org/emacs/i-ching.el

This package is generally more *interesting* than the simpler and
more-discoverable [[https://github.com/zzkt/i-ching][=i-ching= package on MELPA]].  It also, most
importantly, supports the display of commentaries on individual
changing lines.


#+begin_src emacs-lisp
(use-feature! i-ching
  :commands (i-ching/lookup
             i-ching/cast))
#+end_src
** Provide the ~ceamx-init-tools~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-tools.el :comments no
(provide 'ceamx-init-tools)
;;; ceamx-init-tools.el ends here
#+end_src

* TODO "Fun" :: =fun= :fun:

#+begin_src emacs-lisp :tangle lisp/init-fun.el :comments no
;;; init-fun.el --- Configure the fun                -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; It's fun.

;;; Code:

(require 'ceamx-lib)

;;;; ~zone~ [builtin]

;; <https://www.emacswiki.org/emacs/ZoneMode>

(use-feature! zone
  :autoload (zone-when-idle)
  :defines (zone-timer)

  :config
  ;; TODO: verify
  (def-hook! ceamx-zone-when-idle-h ()
    'ceamx-emacs-startup-hook
    "Zone out when idle.
Return the new `zone' timer."
    (zone-when-idle (* 60 10))))

;; FIXME: broken: wrong type argument arrayp (for pgm arg)
;;        (where did this even come from? emacswiki?)
;; (defun zone-choose (pgm)
;;   "Choose a PGM to run for `zone'."
;;   (interactive
;;     (list
;;       (completing-read
;;         "Program: "
;;         (mapcar 'symbol-name zone-programs))))
;;   (let ((zone-programs (list (intern pgm))))
;;     (zone)))

(provide 'init-fun)
;;; init-fun.el ends here
#+end_src

* =init.el=: Load Features
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
(require 'ceamx-init-ui)
(require 'ceamx-init-essentials)
(require 'ceamx-init-completion)
(require 'ceamx-init-search)
(require 'ceamx-init-dired)
(require 'ceamx-init-window)
(require 'init-workspace)
(require 'ceamx-init-vcs)
(require 'ceamx-init-langs)
#+end_src

#+begin_src emacs-lisp
;;;; Outlines & Memex

(require 'init-notes)
(require 'init-outline)
(require 'ceamx-init-org)
#+end_src

#+begin_src emacs-lisp
;;;; Tree-Sitter

(require 'init-treesitter)
#+end_src

#+begin_src emacs-lisp
;;;; Language/syntax support

(require 'lib-prog)
#+end_src

#+begin_src emacs-lisp
;;;; Miscellaneous

(require 'ceamx-init-tools)

(require 'init-news)
(require 'init-eww)
(require 'init-printing)

(require 'init-fun)
#+end_src

* =init.el=: The Bucket of Uncertainty
:PROPERTIES:
:header-args: :tangle init.el
:END:

Stuff that doesn't fit anywhere else and easily hides amongst the mess of files.

Or, perhaps more accurately: stuff that needs a better home.

* =init.el=: Keybindings
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp

;;
;;;; Command Bindings

;;;;; Prefix: [C-c]

(define-keymap :keymap (current-global-map)
  "C-c a" #'org-agenda
  "C-c b" (cons "[ BUFFER   ]" #'ceamx-buffer-prefix)
  "C-c c" #'org-capture
  ;; "C-c d"
  ;; "C-c e"
  "C-c f" (cons "[ FILE     ]" #'ceamx-file-prefix)
  "C-c g" #'magit-dispatch
  "C-c G" #'magit-file-dispatch
  "C-c h" #'consult-history
  "C-c i" (cons "[ INSERT   ]" #'ceamx-insert-prefix)
  ;; "C-c j"
  "C-c k" #'consult-kmacro
  "C-c l" (cons "[ CODE     ]" #'ceamx-code-prefix)
  ;; "C-c m"
  ;; "C-c n"
  "C-c o" (cons "[ LAUNCH   ]" #'ceamx-launch-prefix)
  "C-c q" (cons "[ SESSION  ]" #'ceamx-session-prefix)
  ;; "C-c r"
  ;; "C-c s"
  "C-c t" (cons "[ TOGGLE   ]" #'ceamx-toggle-prefix)
  ;; "C-c u"
  ;; "C-c v"
  "C-c w" (cons "[ WINDOW   ]" #'ceamx-window-prefix)
  ;; "C-c x"
  ;; "C-c y"
  ;; "C-c z"

  "C-c [" #'previous-buffer
  "C-c ]" #'next-buffer
  "C-c `" #'mode-line-other-buffer)

(after! cape
  (keymap-global-set "C-c p" (cons "[ COMPLETE ]" cape-prefix-map)))

;;;;; Prefix: [C-x]

(define-keymap :keymap (current-global-map)

  "C-x n n" #'logos-narrow-dwim
  "C-x o" #'ace-window
  ;; "C-x o" #'ceamx/other-window
  "C-x O" #'ace-window

  "C-x =" #'balance-windows
  "C-x +" #'balance-windows-area
  "C-x ]" #'logos-forward-page-dwim
  "C-x [" #'logos-backward-page-dwim
  "C-x SPC" #'hydra-rectangle/body

  "C-x C-b" #'ibuffer
  "C-x C-n" #'next-buffer
  "C-x C-p" #'previous-buffer

  "C-x M-r" #'rectangle-mark-mode

  "C-x <up>" #'enlarge-window           ; also: C-x ^
  "C-x <down>" #'shrink-window
  "C-x <left>" #'shrink-window-horizontally
  "C-x <right>" #'enlarge-window-horizontally)

;;;;; Modifier: [M-]

(define-keymap :keymap (current-global-map)
  "M-]" #'logos-forward-page-dwim
  "M-[" #'logos-backward-page-dwim
  "M-j" #'avy-goto-char-timer
  "M-w" #'easy-kill)

(after! (avy lispy)
  ;; Prevent conflict with newly-added M-j binding.
  (keymap-set lispy-mode-map "M-J" #'lispy-join))

;;;;; [C-c b] :: Buffer

(define-keymap :keymap ceamx-buffer-prefix
  "b" #'consult-buffer
  "k" #'ceamx-simple/kill-current-buffer)

;;;;; [C-c f] :: File

(define-keymap :keymap ceamx-file-prefix
  ;; TODO
  ;; "y" #'+yank-this-file-name

  "c" '("copy..." . ceamx-simple/copy-current-file)
  "d" '("delete" . ceamx-simple/delete-current-file)
  "f" #'find-file
  "F" #'find-file-other-window
  "r" '("move..." . ceamx-simple/move-current-file)
  "s" #'save-buffer
  "U" #'ceamx-simple/sudo-find-file

  "C-d" '("diff with..." . ceamx-simple/diff-with-file))

;;;;; [C-c i] :: Insert

(define-keymap :keymap ceamx-insert-prefix
  "d" #'ceamx-simple/insert-date
  ;; "h" #'i-ching-insert-hexagram
  "L" #'spdx-insert-spdx
  "s" #'yas-insert-snippet
  "u" #'uuidgen

  "U" (cons "uuid" (define-prefix-command 'ceamx-insert-uuid-prefix))
  "U 1" #'uuidgen-1
  "U 3" #'uuidgen-3
  "U 4" #'uuidgen-4
  "U 5" #'uuidgen-5)

;;;;; [C-c l] :: Code

(define-keymap :keymap ceamx-code-prefix
  "a" #'eglot-code-actions
  "d" #'xref-find-definitions
  "j" #'ceamx-prog-dumb-jump-dispatch/body
  "o" #'consult-eglot-symbols
  "r" #'eglot-rename
  )

;;;;; [C-c n] :: Note

(define-keymap :keymap ceamx-note-prefix
  "n" #'denote

  "c" #'denote-region                   ; "contents"
  "C" #'denote-type
  "s" #'denote-subdirectory
  "t" #'denote-template
  "z" #'denote-signature                ; "zettelkasten"

  "i" #'denote-link                     ; "insert link"
  "I" #'denote-add-links
  "b" #'denote-backlinks

  "f" (cons "find..." (define-prefix-command 'ceamx-find-notes-prefix))
  "f f" #'denote-find-link
  "f b" #'denote-find-backlink

  "r" #'denote-rename-file
  "R" #'denote-rename-file-using-front-matter)


;;;;; [C-c o] :: Launch

(define-keymap :keymap ceamx-launch-prefix
  "a" #'org-agenda
  "b" #'eww
  "c" #'org-capture
  "f" #'elfeed
  "s" #'scratch-buffer
  "t" #'eat
  "W" #'ceamx/eww-wiki)

;;;;; [C-c q] :: Session

(define-keymap :keymap ceamx-session-prefix
  "a c" #'cursory-set-preset
  "a d" #'ceamx-ui/dark
  "a f" #'fontaine-set-preset
  "a l" #'ceamx-ui/light
  "a o" #'olivetti-mode

  "p f" #'elpaca-fetch-all
  "p m" #'elpaca-merge-all
  "p t" #'elpaca-try

  "q" #'save-buffers-kill-emacs
  "Q" #'kill-emacs
  "r" #'restart-emacs)

;; (use-feature! ceamx-ui
;;   :commands (ceamx-ui/dark ceamx-ui/light)
;;   :config
;;   (define-keymap :keymap ceamx-session-prefix
;;     "a d" #'ceamx-ui/dark
;;     "a l" #'ceamx-ui/light))

;;;;; [C-c t] :: Toggle

(define-keymap :keymap ceamx-toggle-prefix
  "f" #'flycheck-mode
  "k" #'keycast-mode-line-mode
  "l" #'display-line-numbers-mode
  "M" #'menu-bar-mode
  "T" #'tab-bar-mode
  "w" #'window-toggle-side-windows
  "W" #'toggle-window-dedicated
  "z" #'logos-focus-mode)

;;;;; Window

(define-keymap :keymap ceamx-window-prefix
  "w" #'ceamx/window-dispatch)

(define-keymap :keymap window-prefix-map
  "w" #'ace-window

  "d" #'ace-delete-window
  "p" #'popper-toggle
  "P" #'popper-toggle-type
  "u" #'winner-undo
  "U" #'winner-redo

  "h" #'windmove-left
  "H" #'ceamx/window-move-left
  "j" #'windmove-down
  "J" #'ceamx/window-move-down
  "k" #'windmove-up
  "K" #'ceamx/window-move-up
  "l" #'windmove-right
  "L" #'ceamx/window-move-right

  "SPC" #'transpose-frame
  "=" #'balance-windows
  "<" #'flip-frame
  ">" #'flop-frame
  "[" #'rotate-frame-clockwise
  "]" #'rotate-frame-anticlockwise
  "{" #'rotate-frame
  "}" #'rotate-frame)

(define-keymap :keymap resize-window-repeat-map
  "<up>" #'enlarge-window
  "<down>" #'shrink-window
  "<left>" #'shrink-window-horizontally
  "<right>" #'enlarge-window-horizontally)

(defvar-keymap ceamx-window-transposition-repeat-map
  :repeat t

  "SPC" #'transpose-frame
  "<" #'flip-frame
  ">" #'flop-frame
  "[" #'rotate-frame-clockwise
  "]" #'rotate-frame-anticlockwise)

(defvar-keymap ceamx-window-lifecycle-repeat-map
  :repeat t

  "2" #'split-window-below
  "3" #'split-window-right
  "o" #'ace-window)
#+end_src

* =init.el=: Postlude
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Start the Emacs server process if not already running

#+begin_src emacs-lisp
(def-hook! ceamx-init-maybe-start-server-h ()
  'ceamx-emacs-startup-hook
  "Allow this Emacs process to act as server if a server is not already running."
  (require 'server)
  (unless (server-running-p)
    (server-start)))
#+end_src

** macOS: Restart Yabai after init

Otherwise, =yabai= will not "see" the Emacs GUI window.

#+begin_src emacs-lisp
(when (and (ceamx-host-macos-p) (display-graphic-p))
  (def-hook! ceamx-after-init-restart-yabai-h ()
    'ceamx-after-init-hook
    "Restart the yabai service after init."
    (after! exec-path-from-shell
      (async-shell-command "yabai --restart-service"))))
#+end_src

** Optionally load the ~custom-file~

#+begin_src emacs-lisp
(when ceamx-load-custom-file
  (load custom-file t))
#+end_src
** Re-enable theme

 #+begin_src emacs-lisp :tangle init.el
;; FIXME: wrong num args
;; (ceamx-ui-re-enable-theme-in-frame)
 #+end_src

* Libraries
:PROPERTIES:
:VISIBILITY: folded
:END:

** The ~ceamx-ui~ library
:PROPERTIES:
:header-args: :tangle site-lisp/ceamx-ui.el
:END:

#+begin_src emacs-lisp :tangle site-lisp/ceamx-ui.el :comments no
;;; ceamx-ui.el --- Ceamx: User interface & appearance library  -*- lexical-binding: t;  -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;; Code:

;;;; Requirements

(eval-when-compile
  (require 'ceamx-lib))

;;;; Variables

(defvar ceamx-ui-dark-themes-list nil)
(defvar ceamx-ui-light-themes-list nil)

(after! modus-themes
  (appendq! ceamx-ui-dark-themes-list
            ;; `modus-vivendi' variants
            (seq-filter
             (lambda (sym) (string-prefix-p "modus-vivendi" (symbol-name sym)))
             modus-themes-items))

  (appendq! ceamx-ui-light-themes-list
            ;; `modus-operandi' variants
            (seq-filter
             (lambda (sym) (string-prefix-p "modus-operandi" (symbol-name sym)))
             modus-themes-items)))

;;;; Customization

(defcustom ceamx-ui-theme-family 'modus
  "Set of themes to load.
Valid values are the symbols `ef', `modus', and `standard', which
reference the `ef-themes', `modus-themes', and `standard-themes',
respectively.

A nil value does not load any of the above (use Emacs without a
theme)."
  :group 'ceamx
  :type '(choice :tag "Set of themes to load" :value modus
          (const :tag "The `ef-themes' module" ef)
          (const :tag "The `modus-themes' module" modus)
          (const :tag "The `standard-themes' module" standard)
          (const :tag "Do not load a theme module" nil)))

(defcustom ceamx-ui-theme-light 'modus-operandi
  "The default light theme."
  :group 'ceamx
  :type 'symbol)

(defcustom ceamx-ui-theme-dark 'modus-vivendi
  "The default dark theme."
  :group 'ceamx
  :type 'symbol)

(defcustom ceamx-ui-theme-circadian-interval nil
  "The circadian theme switching interval.
Value may be `period', `solar', or nil, corresponding
respectively to period-based switching with `theme-buffet' or
sunrise/sunset toggling from the combination of the `solar'
library and the `circadian' package.

A nil value means to disable automatic theme switching.
Theme-switching commands `ceamx/light' and `ceamx/dark' will
unconditionally use `ceamx-ui-theme-default-light' and
`ceamx-ui-theme-default-dark', respectively."
  :group 'ceamx
  :type '(choice :tag "Circadian theme switching interval" :value nil
          (const :tag "Time periods via `theme-buffet'" :value buffet)
          (const :tag "Sunrise or sunset via `solar' and `circadian'" :value solar)))

(defcustom ceamx-modeline-provider nil
  "Modeline provider to load.
Valid values are the symbols `doom', `nano', and `telephone'
which reference the `doom-modeline', `nano-modeline', and
`telephone-line' modules respectively.

A nil value will not load any modeline customizations (use Emacs
with its default modeline)."
  :group 'ceamx
  :type '(choice :tag "Modeline to load" :value nil
          (const :tag "The `doom-modeline' module" doom)
          (const :tag "The `nano-modeline' module" nano)
          (const :tag "The `telephone-line' module" telephone)
          (const :tag "Do not load a modeline module" nil)))

;;;; Functions

;;;;; Public

(defun ceamx-ui-load-theme (theme)
  "Load THEME after resetting any previously-loaded themes.
See also `modus-themes-load-theme'."
  (mapc #'disable-theme (remq theme custom-enabled-themes))
  (load-theme theme :no-confirm))

;;;;; Private

;;;; Commands

;;;###autoload
(defun ceamx-ui/gsettings-set-theme (theme)
  "Set the GNOME/GTK theme to THEME."
  ;; FIXME: prompt with completion
  (interactive "s")
  (let* ((value (pcase theme
                  ((rx (optional "prefer-") "dark")
                   "prefer-dark")
                  ((rx (optional "prefer-") "light")
                   "prefer-light")
                  (_ "prefer-dark")))
         (cmd (format "gsettings set %s color-scheme %s"
                      ceamx-ui-gsettings-ui-namespace
                      value)))
    (shell-command cmd)))

;;;###autoload
(defun ceamx-ui/gsettings-dark-theme ()
  "Enable the dark GNOME/GTK theme."
  (interactive)
  (ceamx-ui/gsettings-set-theme "dark"))

;;;###autoload
(defun ceamx-ui/gsettings-light-theme ()
  "Enable the light GNOME/GTK theme."
  (interactive)
  (ceamx-ui/gsettings-set-theme "light"))

;;;###autoload
(defun ceamx-ui/load-dark-theme ()
  "Load a random dark theme."
  (interactive)
  (pcase ceamx-ui-theme-circadian-interval
    ('buffet
     (+theme-buffet--load-random-from-periods
      ceamx-ui-theme-buffet-dark-periods))
    (_
     (load-theme ceamx-ui-theme-dark :no-confirm))))

;;;###autoload
(defun ceamx-ui/load-light-theme ()
  "Load a random light theme."
  (interactive)
  (pcase ceamx-ui-theme-circadian-interval
    ('buffet
     (+theme-buffet--load-random-from-periods
      ceamx-ui-theme-buffet-light-periods))
    (_
     (load-theme ceamx-ui-theme-light :no-confirm))))

;;;###autoload
(defun ceamx-ui/light ()
  "Activate a light theme globally."
  (interactive)
  (ceamx-ui/gsettings-light-theme)
  (ceamx-ui/load-light-theme))

;;;###autoload
(defun ceamx-ui/dark ()
  "Activate a dark theme globally."
  (interactive)
  (ceamx-ui/gsettings-dark-theme)
  (ceamx-ui/load-dark-theme))

;;;; Footer

(provide 'ceamx-ui)
;;; ceamx-ui.el ends here
#+end_src


** The =ceamx-simple= library: Common utility commands

#+begin_src emacs-lisp :tangle lisp/ceamx-simple.el :comments no
;;; ceamx-simple.el --- Common utility commands        -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery
;; Copyright (C) 2020-2024  Protesilaos Stavrou
;; Copyright (c) 2023  Bruno Boal <egomet@bboal.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;;         Protesilaos Stavrou <info@protesilaos.com>
;;         Bruno Boal <egomet@bboal.com>
;; Keywords: local, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;;; Sources

;; <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/ceamx-lisp/ceamx-simple.el>
;; <https://github.com/BBoal/emacs-config/blob/95520648c5f2ed0784d42e98afff035a6964fd2f/bb-lisp/bb-simple.el>

;;; Code:

;;;; Requirements

(require 'ceamx-lib)

;;;; Variables

(defgroup ceamx-simple ()
  "Generic utilities for editing."
  :group 'editing)

(defcustom ceamx-simple-date-specifier "%F"
  "Date specifier for `format-time-string'.
Used by `ceamx/insert-date'."
  :type 'string
  :group 'ceamx-simple)

(defcustom ceamx-simple-time-specifier "%R %z"
  "Time specifier for `format-time-string'.
Used by `ceamx/insert-date'."
  :type 'string
  :group 'ceamx-simple)

(defvar ceamx-simple-point-in-comment-functions ()
  "List of functions to run to determine if point is in a comment.
Each function takes one argument: the position of the point.  Stops on the first
function to return non-nil.")

(defvar ceamx-simple-checkers-buffer-names-regexp
  (rx "*" (or "Flycheck" "Package-Lint")))

(defvar ceamx-simple-grep-modes-list
  '(occur-mode
    grep-mode
    xref--xref-buffer-mode
    flymake-diagnostics-buffer-mode)
  "List of major-modes used in occur-type buffers.")

(defvar ceamx-simple-repl-modes-list
  '(eshell-mode
    inferior-emacs-lisp-mode            ; ielm
    shell-mode
    eat-mode
    nix-repl-mode)
  "List of major-modes used in REPL buffers.")

(defvar ceamx-simple-repl-buffer-names-list
  '("^\\*\\(?:.*?-\\)\\{0,1\\}e*shell[^z-a]*\\(?:\\*\\|<[[:digit:]]+>\\)$"
    "\\*.*REPL.*\\*"
    "\\*Inferior .*\\*$"
    "\\*ielm\\*"
    "\\*edebug\\*")
  "List of buffer names used in REPL buffers.")

(defvar ceamx-simple-help-modes-list
  '(helpful-mode
    help-mode
    eldoc-mode)
  "List of major-modes used in documentation buffers.")

(defvar ceamx-simple-help-buffer-names-list
  '("^\\*Apropos"
    "^\\*eldoc\\*")
  "List of buffer names used in help buffers.")

(defvar ceamx-simple-manual-modes-list '(Man-mode woman-mode)
  "List of major-modes used in Man-type buffers.")

(defvar ceamx-simple-message-modes-list
  '(compilation-mode
    edebug-eval-mode)
  "List of major-modes used in message buffers.")


;;;; Functions

;;;;; Public

(defun ceamx-simple-buffer-which-mode (&optional buffer-or-name)
  "Return the major mode associated with a buffer.
If BUFFER-OR-NAME is nil, return the current buffer's mode."
  (buffer-local-value 'major-mode
                      (if buffer-or-name
                          (get-buffer buffer-or-name)
                        (current-buffer))))

(defun ceamx-simple-point-in-comment-p (&optional pos)
  "Return non-nil if POS is in a comment.
POS defaults to the current position."
  (let ((pos (or pos (point))))
    (if ceamx-simple-point-in-comment-functions
        (run-hook-with-args-until-success 'ceamx-point-in-comment-functions pos)
      (nth 4 (syntax-ppss pos)))))

;;;;; Private

(defun ceamx-simple--pos-url-on-line (char)
  "Return position of `ceamx-url-regexp' at CHAR."
  (when (integer-or-marker-p char)
    (save-excursion
      (goto-char char)
      (re-search-forward ceamx-url-regexp (line-end-position) :noerror))))

;; FIXME: is this supposed to work on save? not working in either magit or projectile
;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L369-L391>
(defun ceamx-simple--update-file-refs (&rest files)
  "Ensure FILES are updated in `recentf', `magit' and `save-place'."
  (let (toplevels)
    (dolist (file files)
      (when (featurep 'vc)
        (vc-file-clearprops file)
        (when-let (buffer (get-file-buffer file))
          (with-current-buffer buffer
            (vc-refresh-state))))
      (when (featurep 'magit)
        (when-let (default-directory (magit-toplevel (file-name-directory file)))
          (cl-pushnew default-directory toplevels)))
      (unless (file-readable-p file)
        (when (bound-and-true-p recentf-mode)
          (recentf-remove-if-non-kept file))
        (when (and
               (bound-and-true-p projectile-mode)
               ;; FIXME: de-doom
               ;; (doom-project-p)
               ;; (projectile-file-cached-p file (doom-project-root))
               )
          (projectile-purge-file-from-cache file)))
      )
    (dolist (default-directory toplevels)
      (magit-refresh))
    (when (bound-and-true-p save-place-mode)
      (save-place-forget-unreadable-files))))

(defun ceamx-simple--mark (bounds)
  "Mark between BOUNDS as a cons cell of beginning and end positions."
  (push-mark (car bounds))
  (goto-char (cdr bounds))
  (activate-mark))

;;; Commands

;;;###autoload
(defun ceamx-simple/new-line-below (n)
  "Create N empty lines below the current one.
When called interactively without a prefix numeric argument, N is
1."
  (interactive "p")
  (goto-char (line-end-position))
  (dotimes (_ n) (insert "\n")))

;;;###autoload
(defun ceamx-simple/new-line-above (n)
  "Create N empty lines above the current one.
When called interactively without a prefix numeric argument, N is
1."
  (interactive "p")
  (let ((point-min (point-min)))
    (if (or (bobp)
            (eq (point) point-min)
            (eq (line-number-at-pos point-min) 1))
        (progn
          (goto-char (line-beginning-position))
          (dotimes (_ n) (insert "\n"))
          (forward-line (- n)))
      (forward-line (- n))
      (ceamx-simple/new-line-below n))))

;;;###autoload
(defun ceamx-simple/copy-line ()
  "Copy the current line to the `kill-ring'."
  (interactive)
  (copy-region-as-kill (line-beginning-position) (line-end-position)))

;;;###autoload
(defun ceamx-simple/kill-ring-save (beg end)
  "Copy the current region or line.
When the region is active, use `kill-ring-save' between the BEG and END
positions.  Otherwise, copy the current line."
  (interactive "r")
  (if (region-active-p)
      (kill-ring-save beg end)
    (ceamx-simple/copy-line)))

(defun ceamx-simple--duplicate-buffer-substring (boundaries)
  "Duplicate buffer substring between BOUNDARIES.
BOUNDARIES is a cons cell representing buffer positions."
  (unless (consp boundaries)
    (error "`%s' is not a cons cell" boundaries))
  (let ((beg (car boundaries))
        (end (cdr boundaries)))
    (goto-char end)
    (newline)
    (insert (buffer-substring-no-properties beg end))))

;;;###autoload
(defun ceamx-simple/duplicate-line-or-region ()
  "Duplicate the current line or active region."
  (interactive)
  (unless mark-ring                  ; needed when entering a new buffer
    (push-mark (point) t nil))
  (ceamx-simple--duplicate-buffer-substring
   (if (region-active-p)
       (cons (region-beginning) (region-end))
     (cons (line-beginning-position) (line-end-position)))))

;;;###autoload
(defun ceamx-simple/yank-replace-line-or-region ()
  "Replace line or region with latest kill.
This command can then be followed by the standard
`yank-pop' (default is bound to \\[yank-pop])."
  (interactive)
  (if (use-region-p)
      (delete-region (region-beginning) (region-end))
    (delete-region (line-beginning-position) (line-end-position)))
  (yank))

;;;###autoload
(defun ceamx-simple/mark-sexp ()
  "Mark symbolic expression at or near point.
Repeat to extend the region forward to the next symbolic
expression."
  (interactive)
  (if (and (region-active-p)
           (eq last-command this-command))
      (ignore-errors (forward-sexp 1))
    (when-let* ((thing (cond
                        ((thing-at-point 'url) 'url)
                        ((thing-at-point 'sexp) 'sexp)
                        ((thing-at-point 'string) 'string)
                        ((thing-at-point 'word) 'word))))
      (ceamx-simple--mark (bounds-of-thing-at-point thing)))))

;;;###autoload
(defun ceamx-simple/insert-date (&optional arg)
  "Insert the current date as `ceamx-simple-date-specifier'.

With optional prefix ARG (\\[universal-argument]) also append the
current time understood as `ceamx-simple-time-specifier'.

When region is active, delete the highlighted text and replace it
with the specified date."
  (interactive "P")
  (let* ((date ceamx-simple-date-specifier)
         (time ceamx-simple-time-specifier)
         (format (if arg (format "%s %s" date time) date)))
    (when (use-region-p)
      (delete-region (region-beginning) (region-end)))
    (insert (format-time-string format))))

;;;###autoload
(defun ceamx-simple/escape-url-line (char)
  "Escape all URLs or email addresses on the current line.
When called from Lisp CHAR is a buffer position to operate from
until the end of the line.  In interactive use, CHAR corresponds
to `line-beginning-position'."
  (interactive
   (list
    (if current-prefix-arg
        (re-search-forward
         ceamx-url-regexp
         (line-end-position) :no-error
         (prefix-numeric-value current-prefix-arg))
      (line-beginning-position))))
  (when-let* ((regexp-end (ceamx-simple--pos-url-on-line char)))
    (goto-char regexp-end)
    (unless (looking-at ">")
      (insert ">")
      (when (search-backward "\s" (line-beginning-position) :noerror)
        (forward-char 1))
      (insert "<"))
    (ceamx-simple/escape-url-line (1+ regexp-end)))
  (goto-char (line-end-position)))

;;;###autoload
(defun ceamx-simple/escape-url-region (&optional beg end)
  "Apply `ceamx/escape-url-line' on region lines between BEG and END."
  (interactive
   (if (region-active-p)
       (list (region-beginning) (region-end))
     (error "There is no region!")))
  (let ((beg (min beg end))
        (end (max beg end)))
    (save-excursion
      (goto-char beg)
      (setq beg (line-beginning-position))
      (while (<= beg end)
        (ceamx-simple/escape-url-line beg)
        (beginning-of-line 2)
        (setq beg (point))))))

;;;###autoload
(defun ceamx-simple/escape-url-dwim ()
  "Escape URL on the current line or lines implied by the active region.
Call the commands `ceamx/escape-url-line' and
`ceamx/escape-url-region' ."
  (interactive)
  (if (region-active-p)
    (ceamx-simple/escape-url-region (region-beginning) (region-end))
    (ceamx-simple/escape-url-line (line-beginning-position))))

;;;###autoload
(defun ceamx-simple/zap-to-char-backward (char &optional arg)
  "Backward `zap-to-char' for CHAR.
Optional ARG is a numeric prefix to match ARGth occurance of
CHAR."
  (interactive
   (list
    (read-char-from-minibuffer "Zap to char: " nil 'read-char-history)
    (prefix-numeric-value current-prefix-arg)))
  (zap-to-char (- arg) char t))

;; TODO: support point at bol
;; via <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L1781-L1797>
;;;###autoload
(defun ceamx-simple/continue-comment ()
  "Continue current comment, preserving trailing whitespace.
This differs from `default-indent-new-line' in the following way:

If you have a comment like \";; Some text\" with point at the end of the
line, then running `default-indent-new-line' will get you a new line
with \";; \", but running it again will get you a line with only
\";;\" (no trailing whitespace).  This is annoying for inserting a new
paragraph in a comment.  With this command, the two inserted lines are
the same."
  (interactive)
  ;; `default-indent-new-line' uses `delete-horizontal-space'
  ;; because in auto-filling we want to avoid the space character at
  ;; the end of the line from being put at the beginning of the next
  ;; line.  But when continuing a comment it's not desired.
  (cl-letf (((symbol-function #'delete-horizontal-space) #'ignore))
    (default-indent-new-line)))

;;;;; Buffers

(defun ceamx-simple--buffer-major-mode-prompt ()
  "Prompt of `ceamx-simple/buffers-major-mode'.
Limit list of buffers to those matching the current
`major-mode' or its derivatives."
  (let ((read-buffer-function nil)
        (current-major-mode major-mode))
    (read-buffer
     (format "Buffer for %s: " major-mode)
     nil
     :require-match
     (lambda (pair) ; pair is (name-string . buffer-object)
       (with-current-buffer (cdr pair)
         (derived-mode-p current-major-mode))))))

;;;###autoload
(defun ceamx-simple/buffers-major-mode ()
  "Select BUFFER matching the current one's major mode."
  (interactive)
  (switch-to-buffer (ceamx-simple--buffer-major-mode-prompt)))

(defun ceamx-simple--buffer-vc-root-prompt ()
  "Prompt of `ceamx-simple/buffers-vc-root'."
  (let ((root (or (vc-root-dir)
                  (locate-dominating-file "." ".git")))
        (read-buffer-function nil))
    (read-buffer
     (format "Buffers in %s: " root)
     nil t
     (lambda (pair) ; pair is (name-string . buffer-object)
       (with-current-buffer (cdr pair) (string-match-p root default-directory))))))

;;;###autoload
(defun ceamx-simple/buffers-vc-root ()
  "Select buffer matching the current one's VC root."
  (interactive)
  (switch-to-buffer (ceamx-simple--buffer-vc-root-prompt)))

;; FIXME: this does not actually kill its buffers -- buffer must be deleted manually
;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L397-L424>
(defun ceamx-simple/delete-current-file (&optional path force-p)
  "Delete PATH, kill its buffers and expunge it from vc/magit cache.
If PATH is not specified, default to the current buffer's file.
If FORCE-P, delete without confirmation."
  (interactive
   (list (buffer-file-name (buffer-base-buffer))
         current-prefix-arg))
  (let* ((path (or path (buffer-file-name (buffer-base-buffer))))
         (short-path (and path (abbreviate-file-name path))))
    (unless path
      (user-error "Buffer is not visiting any file"))
    (unless (file-exists-p path)
      (error "File doesn't exist: %s" path))
    (unless (or force-p (y-or-n-p (format "Really delete %S?" short-path)))
      (user-error "Aborted"))
    (let ((buf (current-buffer)))
      (unwind-protect
          (progn (delete-file path t) t)
        (if (file-exists-p path)
            (error "Failed to delete %S" short-path)
          ;; Ensures that windows displaying this buffer will be switched to
          ;; real buffers (`doom-real-buffer-p')
          ;; FIXME: implement -- invent the universe -- but the stuff within is very useful to us (e.g. doom-real-buffer-p and filtering buffers)...
          ;; (doom/kill-this-buffer-in-all-windows buf t)
          ;; TODO: remove when the above is implemented -- `kill-this-buffer' only removes the one buffer
          (kill-this-buffer)
          (ceamx-simple--update-file-refs path)
          (message "Deleted %S" short-path))))))

;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L427-L441>
(defun ceamx-simple/copy-current-file (new-path &optional force-p)
  "Copy current buffer's file to NEW-PATH.
If FORCE-P, overwrite the destination file if it exists, without confirmation."
  (interactive
   (list (read-file-name "Copy file to: ")
         current-prefix-arg))
  (unless (and buffer-file-name (file-exists-p buffer-file-name))
    (user-error "Buffer is not visiting any file"))
  (let ((old-path (buffer-file-name (buffer-base-buffer)))
        (new-path (expand-file-name new-path)))
    (make-directory (file-name-directory new-path) 't)
    (copy-file old-path new-path (or force-p 1))
    (ceamx-simple--update-file-refs old-path new-path)
    (message "File copied to %S" (abbreviate-file-name new-path))))

;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L427-L441>
(defun ceamx-simple/move-current-file (new-path &optional force-p)
  "Move current buffer's file to NEW-PATH.
If FORCE-P, overwrite the destination file if it exists, without confirmation."
  (interactive
   (list (read-file-name "Move file to: ")
         current-prefix-arg))
  (unless (and buffer-file-name (file-exists-p buffer-file-name))
    (user-error "Buffer is not visiting any file"))
  (let ((old-path (buffer-file-name (buffer-base-buffer)))
        (new-path (expand-file-name new-path)))
    (when (directory-name-p new-path)
      (setq new-path (concat new-path (file-name-nondirectory old-path))))
    (make-directory (file-name-directory new-path) 't)
    (rename-file old-path new-path (or force-p 1))
    (set-visited-file-name new-path t t)
    (ceamx-simple--update-file-refs old-path new-path)
    (message "File moved to %S" (abbreviate-file-name new-path))))

;; via <https://protesilaos.com/emacs/dotemacs#h:f15bc843-2dd1-4792-95ec-9b7b6e561804>
;;;###autoload
(defun ceamx-simple/kill-buffer (buffer)
  "Kill BUFFER without confirmation.
When called interactively, prompt for BUFFER.  Otherwise, kill the
current buffer."
  (interactive (list (read-buffer "Select buffer: ")))
  (let ((kill-buffer-query-functions nil))
    (kill-buffer (or buffer (current-buffer)))))

;; via prot-emacs
;;;###autoload
(defun ceamx-simple/kill-current-buffer (&optional arg)
  "Kill current buffer.
With optional prefix ARG (\\[universal-argument]) delete the
buffer's window as well.  Kill the window regardless of ARG if it
satisfies `ceamx-window-small-p' and it has no previous
buffers in its history."
  (interactive "P")
  (let ((kill-buffer-query-functions nil))
    (if (or (and (ceamx-window-small-p)
                 (null (window-prev-buffers)))
            (and arg (not (one-window-p))))
        (kill-buffer-and-window)
      (kill-buffer))))

;;;###autoload
(defun ceamx-simple/diff-with-file (&optional arg)
  (interactive "P")
  (let ((buffer (when arg (current-buffer))))
    (diff-buffer-with-file buffer)))

;; via <https://github.com/tarsius/fwb-cmds/blob/88e823809067983acfaeafa57d0bb6e889429ad2/fwb-cmds.el#L140C1-L156C78>
;;;###autoload
(defun ceamx-simple/sudo-find-file (&optional arg)
  "Edit the visited file as \"root\".
If the current buffer does not visit a file, the visited file is
writable or with a prefix argument, then read a file to visit."
  (interactive "P")
  (require 'tramp)
  (if (or arg
          (not buffer-file-name)
          (file-writable-p buffer-file-name))
      (let ((default-directory
             (concat "/sudo:root@localhost:" default-directory)))
        (apply #'find-file
               (find-file-read-args
                "Find file: "
                (confirm-nonexistent-file-or-buffer))))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

;;;; Movement

;;;###autoload
(defun ceamx-simple/multi-line-below ()
  "Move half a screen below."
  (interactive)
  (forward-line (floor (window-height) 2))
  (setq this-command 'scroll-up-command))

;;;###autoload
(defun ceamx-simple/multi-line-above ()
  "Move half a screen above."
  (interactive)
  (forward-line (- (floor (window-height) 2)))
  (setq this-command 'scroll-down-command))

;;;###autoload
(defun ceamx-simple/kill-line-backward ()
  "Kill from point to the beginning of the line."
  (interactive)
  (kill-line 0))

(provide 'ceamx-simple)
;;; ceamx-simple.el ends here
#+end_src


** The =ceamx-window.el= library

#+begin_src emacs-lisp :tangle lisp/ceamx-window.el :comments no :noweb yes
;;; ceamx-window.el --- Window management support library  -*- lexical-binding: t;  -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>
;; Copyright (C) 2023 Free Software Foundation, Inc.
;; Copyright (C) 2024  Protesilaos Stavrou

;; Author: Chris Montgomery <chmont@protonmail.com>
;;         Vegard Øye <vegard_oye at hotmail.com>
;;         Karthik Chikmagalur <karthik.chikmagalur@gmail.com>
;;         Protesilaos Stavrou <public@protesilaos.com>

<<file-license>>

;;; Commentary:
;;; Code:

;;
;;;; Dependencies

(require 'windmove)

;;
;;;; Functions

;;
;;;;; `display-buffer' functions

;; <https://github.com/karthink/popper/blob/570b0820f884a9c0e3d9cb07e7f7f523b39b836f/popper.el#L265-L283>

(defun ceamx-window-display-popup-at-bottom (buffer &optional alist)
  "Display popup-buffer BUFFER at the bottom of the screen.
ALIST is an association list of action symbols and values.  See
Info node `(elisp) Buffer Display Action Alists' for details of
such alists."
  (display-buffer-in-side-window
   buffer
   (append alist
           `((side . bottom)
             (slot . 1)))))

(defun ceamx-window-display-popup (buffer &optional alist)
  "Display and switch to popup-buffer BUFFER at the bottom of the screen.
ALIST is an association list of action symbols and values.  See
Info node `(elisp) Buffer Display Action Alists' for details of
such alists."
  (let ((window (ceamx-window-display-popup-at-bottom buffer alist)))
    (select-window window)))

;; via <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>
(defun +display-buffer-reuse-minor-mode-window (buffer alist)
  "Return a window sharing a minor mode with BUFFER.
ALIST is an association list of action symbols and values.  See
Info node \"(elisp) Buffer Display Action Alists\" for details of
such alists."
  (let* ((alist-entry (assq 'reusable-frames alist))
         (alist-mode-entry (assq 'minor-mode alist))
         (frames (cond (alist-entry (cdr alist-entry))
                       ((if (eq pop-up-frames 'graphic-only)
                            (display-graphic-p)
                          pop-up-frames)
                        0)
                       ;; TODO: remove or note the intention here -- not a call but
                       ;; a condition check to maintain support for the deprecated
                       ;; function. but really should be removed.
                       ;; (display-buffer-reuse-frames 0)
                       (t (last-nonminibuffer-frame))))
         (inhibit-same-window-p (cdr (assq 'inhibit-same-window alist)))
         (windows (window-list-1 nil 'nomini frames))
         (allowed-modes (if alist-mode-entry
                            (cdr alist-mode-entry)))
         (curwin (selected-window))
         (curframe (selected-frame)))
    (unless (listp allowed-modes)
      (setq allowed-modes (list allowed-modes)))
    (let ((same-mode-same-frame)
          (same-mode-other-frame))
      (dolist (window windows)
        (let ((mode?
               (with-current-buffer (window-buffer window)
                 (cl-some (lambda (m) (and (boundp m) (symbol-value m) 'same))
                          allowed-modes))))
          (when (and mode? (not (and inhibit-same-window-p (eq window curwin))))
            (push window (if (eq curframe (window-frame window))
                             same-mode-same-frame
                           same-mode-other-frame)))))
      (let ((window (car (nconc same-mode-same-frame
                                same-mode-other-frame))))
        (when (window-live-p window)
          (prog1 (window--display-buffer buffer window 'reuse alist)
            (unless (cdr (assq 'inhibit-switch-frame alist))
              (window--maybe-raise-frame (window-frame window)))))))))

;;;;; Popups

;; <https://github.com/karthink/popper/blob/master/popper.el#L265-L283>

(defun +popper-current-buffer-popup-p (buf)
  "Whether the buffer BUF should be considered a popup.
This is intended for use as a predicate in `popper-reference-buffers'."
  (with-current-buffer buf
    (and (derived-mode-p 'fundamental-mode)
         (not (bound-and-true-p scratch-buffer))
         ;; Less than `max-lines' but not empty.
         (let ((lines (count-lines (point-min) (point-max)))
               (max-lines 10))
           (and (not (zerop lines))
                (< lines max-lines))))))

(defun +popper-close-focused (&rest _)
  "Close any focused `popper' popup.
Intended as a general hook function."
  (declare-function popper-toggle "popper")
  (when (bound-and-true-p popper-popup-status)
    (popper-toggle)))

(defun +popper-select-below-fn (buffer &optional _alist)
  (funcall (if (> (frame-width) 170)
               ;; #'display-buffer-in-direction
               #'popper-select-popup-at-bottom
             #'display-buffer-at-bottom)
           buffer
           `((window-height . ,popper-window-height)
             (direction . below)
             (body-function . ,#'select-window))))


;;
;;;; Macros

(defmacro with-safe-side-windows! (&rest body)
  "Toggle side windows, evaluate BODY, restore side windows.
Copied from the `evil' macro `evil-save-side-windows'."
  (declare (indent defun)
           (debug (&rest form)))
  (let ((sides (make-symbol "sidesvar")))
    `(let ((,sides (and (fboundp 'window-toggle-side-windows)
                    (window-with-parameter 'window-side))))
      ;; (declare-function window-toggle-side-windows "window")
      (when ,sides
       (window-toggle-side-windows))
      (unwind-protect
          (progn ,@body)
        (when ,sides
         (window-toggle-side-windows))))))


;;
;;;; Commands

;;;;; Window Management

;; <https://github.com/emacs-evil/evil/blob/5995f6f21f662484440ed67a28ce59e365feb9ad/evil-commands.el>

;; FIXME: "display-buffer" name is misleading
;; via <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>
;;;###autoload
(defun ceamx/display-buffer-at-bottom ()
  "Move the current buffer to the bottom of the frame.
This is useful to take a buffer out of a side window.

The window parameters of this function are provided mostly for
didactic purposes."
  (interactive)
  (let ((buffer (current-buffer)))
    (with-current-buffer buffer
      (delete-window)
      (display-buffer-at-bottom
       buffer '((window-height .
                 (lambda (win)
                   (fit-window-to-buffer
                    win (/ (frame-height) 3)))))))))

;; TODO: this seems very similar to `windmove-swap-states-in-direction'...?
(defun ceamx-move-window (side)
  "Move the `selected-window' to SIDE.
The state of the `selected-window' is saved along with the state
of the window tree consisting of all the other windows. Then, all
windows are deleted, the remaining window is split according to
DIRECTION, the state of the window in DIRECTION is replace with
the saved state of the `selected-window', and, finally, the state
of the saved window tree is reconstructed on the opposite side.

SIDE has the same meaning as in `split-window'.

Copied from the `evil' function `evil-move-window'."
  (with-safe-side-windows!
    (unless (one-window-p)
      (save-excursion
        (let ((this-window-state (window-state-get (selected-window))))
          (delete-window)
          (let ((window-tree (window-state-get)))
            (delete-other-windows)
            (let ((sub-window (selected-window))
                  (new-window (ceamx--split-window-in-direction side)))
              (window-state-put window-tree sub-window)
              (window-state-put this-window-state new-window)
              (select-window new-window)))))
      (balance-windows))))

;; via <https://github.com/doomemacs/doomemacs/blob/ff33ec8f7a89d168ca533612e2562883c89e029f/modules/editor/evil/autoload/evil.el#L42-L73>
(defun ceamx--window-swap-or-split (direction)
  "Move current window to the next window in DIRECTION.
If there are no windows in DIRECTION and there is only one window
in the current frame, split the window in DIRECTION and place
this window there."
  (let* ((this-window (selected-window))
         (that-window (window-in-direction direction this-window)))
    (unless that-window
      (setq that-window (split-window this-window nil direction))
      (with-selected-window that-window
        (switch-to-buffer ceamx-fallback-buffer-name)))
    (window-swap-states this-window that-window)
    (select-window that-window)))

(defun ceamx/window-move-left ()
  "Swap or move selected window to the left."
  (interactive)
  (ceamx--window-swap-or-split 'left))

(defun ceamx/window-move-right ()
  "Swap or move selected window to the right."
  (interactive)
  (ceamx--window-swap-or-split 'right))

(defun ceamx/window-move-up ()
  "Swap or move selected window upwards."
  (interactive)
  (ceamx--window-swap-or-split 'up))

(defun ceamx/window-move-down ()
  "Swap or move selected window downwards."
  (interactive)
  (ceamx--window-swap-or-split 'down))

(defun ceamx/split-window (&optional count direction file)
  "TODO"
  (interactive "P\nS\nf")
  (select-window
   (split-window (selected-window)
                 (when count (- count))
                 direction))
  ;; (when (and (not count)
  ;;         ceamx-window-auto-balance)
  ;;   (balance-windows (window-parent)))
  (when file
    (find-file file)))

(defun ceamx/split-window-with-buffer (buffer)
  "Split window and switch to BUFFER.
If BUFFER is not the name of an existing buffer, then a new
buffer will be created with that name."
  (interactive "b")
  (ceamx/split-window)
  (switch-to-buffer buffer))

(defun ceamx/split-window-with-next-buffer ()
  "Split window and switch to the next buffer in the buffer list."
  (interactive)
  (ceamx/split-window-with-buffer (next-buffer)))

(defun ceamx/split-window-with-prev-buffer ()
  "Split window and switch to the previous buffer in the buffer list."
  (interactive)
  (ceamx/split-window-with-buffer (previous-buffer)))

(defun ceamx/buffer-create (&optional file)
  "Edit a new unnamed buffer or open FILE.
When called interactively, prompt the user for FILE."
  (interactive "F")
  (if file
      (find-file file)
    (let ((buffer (generate-new-buffer "*new*")))
      (set-buffer-major-mode buffer)
      (set-window-buffer nil buffer))))

(defun ceamx/window-increase-height (count)
  "Increase window height by COUNT."
  (interactive "p")
  (enlarge-window count))

(defun ceamx/window-decrease-height (count)
  "Decrease window height by COUNT."
  (interactive "p")
  (enlarge-window (- count)))

(defun ceamx/window-increase-width (count)
  "Increase window width by COUNT."
  (interactive "p")
  (enlarge-window count t))

(defun ceamx/window-decrease-width (count)
  "Decrease window width by COUNT."
  (interactive "p")
  (enlarge-window (- count) t))

;; via <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/prot-lisp/prot-simple.el#L800C1-L814C68>
;;;###autoload
(defun ceamx/swap-or-rotate-windows (counter)
  "Swap states of live buffers.
With two windows, transpose their buffers.  With more windows,
perform a clockwise rotation.  Do not alter the window layout.
Just move the buffers around.

With COUNTER as a prefix argument, do the rotation
counter-clockwise."
  (interactive "P")
  (when-let* ((winlist (if counter (reverse (window-list)) (window-list)))
              (wincount (count-windows))
              ((> wincount 1)))
    (dotimes (i (- wincount 1))
      (window-swap-states (elt winlist i) (elt winlist (+ i 1))))))

;; via <https://github.com/protesilaos/dotfiles/blob/24670bf47f7aaefc9bb2613d090cc9113acd6d48/emacs/.emacs.d/prot-lisp/prot-simple.el#L590C1-L601C41>
;;;###autoload
(defun ceamx/other-window ()
  "Switch window in a multi-window frame or to a window in another frame.
If there is only one window and multiple frames, call
`next-multiframe-window'.  Otherwise, call `other-window' or, if
available, `switchy-window'."
  (interactive)
  (if (and (one-window-p) (length> (frame-list) 1))
      (progn
        (call-interactively #'next-multiframe-window)
        (setq this-command #'next-multiframe-window))
    (let ((other-window-command (or (and (fboundp 'switchy-window)
                                         (function switchy-window))
                                    (function other-window))))
      (call-interactively other-window-command)
      (setq this-command other-window-command))))

(provide 'ceamx-window)
;;; ceamx-window.el ends here
#+end_src


** The =ceamx-completion.el= library

#+begin_src emacs-lisp :tangle site-lisp/ceamx-completion.el :comments no
;;; ceamx-completion.el --- Ceamx: Completions Library  -*- lexical-binding: t;  -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;; Code:

;;;; Requirements

(require 'ceamx-lib)

(autoload #'consult-info "consult")
(autoload #'consult--file-preview "consult")
(autoload #'consult--read "consult")
(autoload #'embark-export "embark")
(autoload #'wgrep-change-to-wgrep-mode "wgrep")


;;;; Variables

;;;; Customization

;;;; Functions

;;;;; Public

(defun ceamx-completion-corfu-minibuffer-enable-p ()
  "Whether to enable `corfu' completion in a currently-active minibuffer."
  (not (or (bound-and-true-p mct--active)
           (bound-and-true-p vertico--input)
           (eq (current-local-map) read-passwd-map))))

;;;###autoload
(defun ceamx-completion--tempel-include (elt)
  "Tempel user element ELT to include a nested template."
  (when (eq (car-safe elt) 'i)
    (if-let (template (alist-get (cadr elt) (tempel--templates)))
        (cons 'l template)
      (message "Template %s not found" (cadr elt))
      nil)))

;;;###autoload
(defun ceamx-completion-orderless-consult-dispatch (word _index _total)
  "Orderless dispatcher for Consult with support for custom syntax.
Recognizes the following patterns:

    ,* .ext (file extension)
    ,* regexp$ (regexp matching at end)

Sourced from the Consult Wiki."
  (cond
   ;; Ensure that $ works with Consult commands, which add
   ;; disambiguation suffixes.
   ((string-suffix-p "$" word)
    `(orderless-regexp . ,(concat (substring word 0 -1)
                                  (ceamx-completion-orderless--consult-suffix))))
   ;; File extensions
   ((and (or minibuffer-completing-file-name
             (derived-mode-p 'eshell-mode))
         (string-match-p "\\`\\.." word))
    `(orderless-regexp . ,(concat "\\."
                                  (substring word 1)
                                  (ceamx-completion-orderless--consult-suffix))))))


;;;;; Private

 (defun ceamx-completion-orderless--consult-suffix ()
    "Regexp which matches the end of string with Consult tofu support."
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))


;;;; Commands

;; via <https://github.com/minad/consult?tab=readme-ov-file#help>
;;;###autoload
(defun ceamx/emacs-info ()
  "Search through common Emacs info pages."
  (interactive)
  (consult-info "emacs" "efaq" "elisp" "cl"))

;;;###autoload
(defun ceamx/org-info ()
  "Search through the Org-Mode info page."
  (interactive)
  (consult-info "org"))

;;;###autoload
(defun ceamx/completion-info ()
  "Search through completion info pages."
  (interactive)
  (consult-info "vertico" "consult" "marginalia" "orderless" "embark"
                "corfu" "cape" "tempel"))

;;;###autoload
(defun ceamx/consult-info-dwim (&optional buffer)
  "Search Info manuals appropriate to BUFFER's major-mode."
  (interactive)
  (with-current-buffer (or buffer (current-buffer))
    (let* ((mode major-mode)
           (fn (pcase mode
                 ((pred (lambda (x) (memq x '(emacs-lisp-mode))))
                  #'ceamx/emacs-info)
                 ((pred (lambda (x) (memq x '(org-mode org-agenda-mode))))
                  #'ceamx/org-info)
                 (_ #'consult-info))))
      (command-execute fn))))

;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/modules/completion/vertico/autoload/vertico.el#L91-L108>
;;;###autoload
(defun ceamx-completion/embark-export-write ()
  "Export the current `vertico' candidates to a writable buffer.
Supported export flows include the following:

`consult-grep'      => `wgrep'
files               => `wdired'
`consult-location'  => `occur-edit'"
  (interactive)
  (require 'embark)
  (require 'wgrep)
  (let* ((edit-command
          (pcase-let ((`(,type . ,candidates)
                       (run-hook-with-args-until-success 'embark-candidate-collectors)))
            (pcase type
              ('consult-grep #'wgrep-change-to-wgrep-mode)
              ('file #'wdired-change-to-wdired-mode)
              ('consult-location #'occur-edit-mode)
              (x (user-error "Embark category %S doesn't support writable export" x)))))
         (embark-after-export-hook `(,@embark-after-export-hook ,edit-command)))
    (embark-export)))

;;;###autoload
(defun ceamx-completion/consult-find-file-with-preview (prompt &optional dir default mustmatch initial pred)
  (interactive)
  (let ((default-directory (or dir default-directory))
        (minibuffer-completing-file-name t))
    (consult--read #'read-file-name-internal :state (consult--file-preview)
                   :prompt prompt
                   :initial initial
                   :require-match mustmatch
                   :predicate pred)))

(provide 'ceamx-completion)
;;; ceamx-completion.el ends here
#+end_src

* End

This is the section for file-local variables.  File-local variables must be on
the last "page" of a document, beginning no more than 3000 characters from EOF.
See [[info:emacs#Specifying File Variables]["(emacs) Specifying File Variables"]] for more information.

23 SKIDOO



# Local Variables:
# org-refile-targets: ((nil . (:maxlevel . 6)))
# End:
