# -*- eval: (load-file "./ceamx-dev-loader.el");   -*-
#+title: Ceamx: An Emacs Configuration
#+author: Chris Montgomery
#+email: chmont@proton.me
#+language: en
#+property: header-args:emacs-lisp
#+property: header-args:elisp :results replace :exports code
#+property: header-args :mkdirp yes :tangle no :tangle-mode: #o444 :results silent :noweb yes
#+archive: graveyard/%s::datetree/
#+startup: showall
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

#+begin_src emacs-lisp :tangle no :results none
(org-babel-tangle)
#+end_src

* The Beginning


** Early Init

#+begin_src elisp :tangle early-init.el
;;; early-init.el --- Early Init File  -*- no-byte-compile: t; -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Links:

;; Helpful guide to early-init configuration for package management:
;; <https://old.reddit.com/r/emacs/comments/np6ey4/how_packageel_works_with_use_package/>

;;; Code:

;; Prevent package.el from enabling all packages before init.
;;
;; When nil and using the builtin package manager, `package-initialize' must be
;; invoked in the init process prior to `require'ing any packages installed with
;; `package-install'.
;;
;; When non-nil, there is no need to invoke `package-initialize'.
(setq package-enable-at-startup nil)

;;; Indirect init/startup hooks

(defvar ceamx-after-init-hook '())
(defun ceamx-after-init-hook ()
  (run-hooks 'ceamx-after-init-hook))

(defvar ceamx-emacs-startup-hook '())
(defun ceamx-emacs-startup-hook ()
  (run-hooks 'ceamx-emacs-startup-hook))

;;
;;; Performance

;;;; Language servers

;; <https://emacs-lsp.github.io/lsp-mode/page/performance/#increase-the-amount-of-data-which-emacs-reads-from-the-process>

(setenv "LSP_USE_PLISTS" "true")

;; Read JSON streams in 1MiB chunks instead of the default 4kB.
;;
;; Language server responses tend to be in the 800kB to 3MB range,
;; according to the lsp-mode documentation (linked above).
;;
;; This is a general LSP concern, not specific to any particular implementation.
(when (functionp 'json-serialize)
  (setq read-process-output-max (* 1024 1024)))

;;;; Minimize garbage collection during startup.

;; From Eli Zaretskii:
;;
;; > My advice is to spend some time measuring the effect of increased GC threshold
;; > on operations that you care about and that take a long enough time to annoy,
;; > and use the lowest threshold value which produces a tangible improvement.
;; > Start with the default value, then enlarge it by a factor of 2 until you see
;; > only insignificant speedups. I would not expect the value you arrive at to be
;; > as high as 100 MiB.
;;
;; via <https://old.reddit.com/r/emacs/comments/yzb77m/an_easy_trick_i_found_to_improve_emacs_startup/iwz1vek/>

;; See also:

;; <https://github.com/jwiegley/dot-emacs/blob/master/init.org#startup>

;; Provide insight into garbage-collection activity to inform tuning decisions.
;; TODO: will a `init-file-debug' check work here?
(setq garbage-collection-messages t)

;; Prevent garbage-collection during init.
;; NOTE: Either use `gcmh' or make sure to reset this later. Or else!
(setq gc-cons-threshold (* 128 1024 1024)) ; 128MiB

;;;; Simplify filename pattern-matching during init

;;  <https://github.com/jwiegley/dot-emacs/blob/79bc2cff3a28ecd1a315609bbb607eb4ba700f76/init.org#during-loading-of-this-module-clear-file-name-handler-alist>
;;  <https://old.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/>

(defvar ceamx-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun ceamx-restore-file-name-handler-alist-h ()
  "Restore the original value of the `file-name-handler-alist' variable.
Intended for use as a callback on `ceamx-after-init-hook'."
  (setq file-name-handler-alist ceamx-file-name-handler-alist)
  (makunbound 'ceamx-file-name-handler-alist))

(add-hook 'ceamx-after-init-hook #'ceamx-restore-file-name-handler-alist-h)

;;
;;; Directories

;; Configure load path
(dolist (subdir '("autoloads" "lisp" "lisp/core" "lisp/lib"))
  (let ((dir (expand-file-name subdir user-emacs-directory)))
    (add-to-list 'load-path dir)))

;; Load settings describing well-known paths.
(require 'ceamx-paths)

;; Configure customization file location.
;;
;; Normally, options configured in `user-init-file' won't need to be persisted
;; to `custom-file', but by default, when using package.el for package
;; management, `package-selected-packages' will always be written to
;; `custom-file' if available. See `init-package' for details.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

;; Store packages in the designated directory.
(setq package-user-dir ceamx-packages-dir)

;; Use preferred cache directories for native-comp.
(startup-redirect-eln-cache ceamx-eln-dir)
(add-to-list 'native-comp-eln-load-path ceamx-eln-dir)

;;
;;; Native compilation

(setq native-comp-async-report-warnings-errors 'silent)
(setq native-compile-prune-cache t)

;; Don't load outdated byte-compiled files.
;;
;; NOTE: This does not handle *recompiling* the outdated files.
;; That will need to be handled during init.
;;
;; More info: <https://github.com/emacscollective/auto-compile/blob/main/README.org>
(setq load-prefer-newer t)

;; Package installation will provoke a lot of warnings from third-party
;; packages, but there's nothing we can do about those.
(setq byte-compile-warnings nil)

;;
;;; Inhibit early annoyances

;; No bells.
(setq ring-bell-function #'ignore)

;; Display scratch buffer on startup.
;; TODO: replace with dashboard
(setq inhibit-startup-screen t)

;;
;;; Frames and window-system integration

;; FIXME: seems to behave inconsistently when server is running?

;; Prevent X11 from taking control of visual behavior and appearance.
(setq inhibit-x-resources t)

;; Avoid expensive frame resizing.
(setq frame-inhibit-implied-resize t)

;; Allow resizing the frame to the maximum available space on the desktop.
(setq frame-resize-pixelwise t)

;; Remove some unnecessary frame elements by default.
(scroll-bar-mode -1)
(tool-bar-mode -1)

;; `tooltip-mode' is broken for me in pgtk -- might be an Emacs bug, causes
;; constant errors when moving mouse over modeline.
;;
;; FIXME: actually, this is behaving inconsistently: disabling it does not
;; necessarily work, and toggling it off/on allows `tooltip-mode' to function
;; normally... maybe needs to happen later in init?
(tooltip-mode -1)

;;;; Rename the default/initial frame

(defvar ceamx-default-frame-name "home — [ceamx]"
  "Name for the default Emacs frame.")

(defun ceamx-after-init-default-frame-name-h ()
  "Set the name for the default frame.
Simple wrapper for a call to `set-frame-name' providing
`ceamx-default-frame-name' as the NAME argument.

Intended for use as a callback on the `ceamx-after-init-hook'."
  (set-frame-name ceamx-default-frame-name))

(add-hook 'ceamx-after-init-hook #'ceamx-after-init-default-frame-name-h)

(provide 'early-init)
;;; early-init.el ends here
#+end_src


** Early Core Deps


*** Common Paths

#+begin_src emacs-lisp :tangle lisp/core/ceamx-paths.el
;;; ceamx-paths.el --- Common paths variables        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Define variables pointing to commonly-used paths.

;; Path variables relating to specific modules should be defined in a
;; feature-specific file i.e. `config-<module>'.

;;; Code:

;;
;;; Functions

(defun ceamx-format-version-subdir (parent)
  "Return a path-like string for a subdirectory of PARENT based on the current Emacs version."
  (format "%s/%s.%s/"
    parent
    emacs-major-version
    emacs-minor-version))

;;
;;; Variables

(defvar ceamx-site-lisp-dir
  (concat user-emacs-directory "site-lisp/")
  "Absolute path to the site-lisp directory.")

(defvar ceamx-home-dir (file-name-as-directory (getenv "HOME"))
  "Path to user home directory.")

(defvar ceamx-xdg-config-dir
  (file-name-as-directory
   (or (getenv "XDG_CONFIG_HOME")
       (concat ceamx-home-dir ".config"))))

(defvar ceamx-xdg-cache-dir
  (file-name-as-directory
   (or (getenv "XDG_CACHE_HOME")
       (concat ceamx-home-dir ".cache"))))

(defvar ceamx-config-dir ceamx-xdg-config-dir
  "The root directory for personal configurations.")

;; TODO: rename to something like `ceamx-storage-dir' to reduce confusion
(defvar ceamx-local-dir
  (concat ceamx-xdg-cache-dir "ceamx/")
  "The root directory for local Emacs files.
Use this as permanent storage for files that are safe to share
across systems.")

(defvar ceamx-etc-dir (concat ceamx-local-dir "etc/")
  "Directory for non-volatile storage.
Use this for files that don't change much, like servers binaries,
external dependencies or long-term shared data.")

(defvar ceamx-var-dir (concat ceamx-local-dir "var/")
  "Directory for volatile storage.
Use this for files that change often, like data and cache files.")

(defvar ceamx-eln-dir (convert-standard-filename
                      (file-name-as-directory
                        (expand-file-name "eln/" ceamx-var-dir)))
  "Directory for natively-compiled eln files.")

(defvar ceamx-packages-dir
  (expand-file-name (ceamx-format-version-subdir "packages")
    ceamx-local-dir)
  "Where packages are stored.
Intended for setting the value of `package-user-dir' or the
equivalent settings for third-party package managers.

Packages will be stored in subdirectories based on the current
Emacs version to prevent bytecode incompatibility.")

(provide 'ceamx-paths)
;;; ceamx-paths.el ends here

;; Local Variables:
;; no-byte-compile: t
;; no-native-compile: t
;; no-update-autoloads: t
;; End:
#+end_src


*** Common Keymaps

#+begin_src emacs-lisp :tangle lisp/core/ceamx-keymaps.el
;;; ceamx-keymaps.el --- Keymap declarations               -*- lexical-binding: t; -*-


;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(require 'lib-keys)

(defmap! ceamx-code-map)
(defmap! ceamx-file-map)
(defmap! ceamx-insert-map)
(defmap! ceamx-launch-map)
(defmap! ceamx-pairs-map)
(defmap! ceamx-replace-map)
(defmap! ceamx-toggle-map)

(provide 'ceamx-keymaps)
;;; ceamx-keymaps.el ends here
#+end_src


** Core Library (=lib-common.el=)

This library is a requirement of just about every customization and library
file. It is loaded early during initialization.

#+begin_src emacs-lisp :tangle lisp/lib-common.el
;;; lib-common.el --- Common library functions -*- lexical-binding: t -*-

;; Copyright (C) 2023-2024  Chris Montgomery <chris@cdom.io>
;; Copyright (C) 2014-2023  Henrik Lissner
;; Copyright (C) 2006-2021  Steve Purcell
;; Copyright (C) 2016–2022  Radian LLC and contributors
;; Copyright (C) 2018  Adam Porter
;; Copyright (C) 2013-2021  Bailey Ling <bling@live.ca>
;; Copyright (C) 2013-2023  7696122 <7696122@gmail.com>

;; Author: Chris Montgomery <chris@cdom.io>
;;         Henrik Lissner
;;         Steve Purcell
;;         Radon Rosborough <radon@intuitiveexplanations.com>
;;         Adam Porter <adam@alphapapa.net>
;;         Bailey Ling <bling@live.ca>
;;         7696122 <7696122@gmail.com>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Created: 29 January, 2023

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:

;; General, common, and generic library functions.

;;; Sources:

;; <https://github.com/doomemacs/doomemacs/blob/03d692f129633e3bf0bd100d91b3ebf3f77db6d1/lisp/doom-lib.el>
;; <https://github.com/radian-software/radian/blob/9a82b6e7395b3f1f143b91f8fe129adf4ef31dc7/emacs/radian.el>

;;; Code:

(require 'cl-lib)
(require 'map)
(require 'seq)

;;;; Helpers

(defun ceamx--resolve-hook-forms (hooks)
  "Convert a list of modes into a list of hook symbols.

If a mode is quoted, it is left as is. If the entire HOOKS list is quoted, the
list is returned as-is."
  (declare (pure t) (side-effect-free t))
  (let ((hook-list (ensure-list (ceamx-unquote hooks))))
    (if (eq (car-safe hooks) 'quote)
      hook-list
      (cl-loop for hook in hook-list
        if (eq (car-safe hook) 'quote)
        collect (cadr hook)
        else collect (intern (format "%s-hook" (symbol-name hook)))))))

;; TODO: seems probably excessive
(defun ceamx--setq-hook-fns (hooks rest &optional singles)
  (unless (or singles (= 0 (% (length rest) 2)))
    (signal 'wrong-number-of-arguments (list #'cl-evenp (length rest))))
  (cl-loop with vars = (let ((args rest)
                              vars)
                         (while args
                           (push (if singles
                                   (list (pop args))
                                   (cons (pop args) (pop args)))
                             vars))
                         (nreverse vars))
    ;; TODO: use `derived-mode-hook-name'
    for hook in (ceamx--resolve-hook-forms hooks)
    for mode = (string-remove-suffix "-hook" (symbol-name hook))
    append
    (cl-loop for (var . val) in vars
      collect
      (list var val hook
        (intern (format "ceamx--setq-%s-for-%s-h"
                  var mode))))))

;;; General

(defun ceamx-host-p (name)
  "Whether Emacs is running on the machine NAME."
  (string= name (system-name)))

(defun ceamx-unquote (exp)
  "Return EXP unquoted."
  (declare (pure t) (side-effect-free t))
  (while (memq (car-safe exp) '(quote function))
    (setq exp (cadr exp)))
  exp)

;; (defun ceamx-keyword-intern (str)
;;   "Convert STR (a string) into a keyword (`keywordp')."
;;   (declare (pure t) (side-effect-free t))
;;   (cl-check-type str string)
;;   (intern (concat ":" str)))

;; (defun ceamx-keyword-name (keyword)
;;   "Return the string name of KEYWORD (`keywordp') minus the leading colon."
;;   (declare (pure t) (side-effect-free t))
;;   (cl-check-type keyword keyword)
;;   (substring (symbol-name keyword) 1))

(defalias 'ceamx-partial #'apply-partially)
(defun ceamx-rpartial (fn &rest args)
  "Return a partial application of FN to right-hand ARGS.

ARGS is a list of the last N arguments to pass to FN. The result is a new
function which does the same as FN, except that the last N arguments are fixed
at the values with which this function was called."
  (declare (side-effect-free t))
  (lambda (&rest pre-args)
    (apply fn (append pre-args args))))

(defun ceamx-lookup-key (keys &rest keymaps)
  "Lookup KEYS in the active or specified KEYMAPS.

Like `lookup-key', but search active keymaps if KEYMAPS is omitted."
  (if keymaps
      (cl-some (ceamx-rpartial #'lookup-key keys) keymaps)
    (cl-loop for keymap
             in (append (cl-loop for alist in emulation-mode-map-alists
                                 append (mapcar #'cdr
                                                (if (symbolp alist)
                                                    (if (boundp alist) (symbol-value alist))
                                                  alist)))
                        (list (current-local-map))
                        (mapcar #'cdr minor-mode-overriding-map-alist)
                        (mapcar #'cdr minor-mode-map-alist)
                        (list (current-global-map)))
             if (keymapp keymap)
             if (lookup-key keymap keys)
             return it)))

(defmacro cmd! (&rest body)
  "Return (lambda () (interactive) ,@BODY)

A factory for quickly producing interaction commands, particularly for keybinds
or aliases."
  (declare (doc-string 1) (pure t) (side-effect-free t))
  `(lambda (&rest _) (interactive) ,@body))

(defmacro cmd!! (command &optional prefix-arg &rest args)
  "Return a closure to interactively invoke COMMAND with ARGS and PREFIX-ARG.

Like `cmd!', but allows you to change `current-prefix-arg' or pass arguments to
COMMAND. This macro is meant to be used as a target for keybinds (e.g. with
`define-key')."
  (declare (doc-string 1) (pure t) (side-effect-free t))
  `(lambda (arg &rest _) (interactive "P")
     (let ((current-prefix-arg (or ,prefix-arg arg)))
       (,(if args
             #'funcall-interactively
           #'call-interactively)
        ,command ,@args))))

;; via <https://protesilaos.com/emacs/dotemacs#h:3563ceb5-b70c-4191-9c81-f2f5a202c4da>
(defmacro noop! (&rest _body)
  "Do nothing with BODY and return nil.
Unlike `ignore', produce no side effects."
  (declare (indent defun))
  nil)

;;
;;; Loading

(defmacro add-load-paths! (&rest dirs)
  "Add DIRS to `load-path', relative to the current file.
The current file is the file from which `add-load-paths!' is used.

This macro is identical to Doom\\='s `add-load-path!' macro
except in name and docstring. The name of the macro has been
changed to clarify that this is a variadic macro. This docstring
also corrects an apparent typo in the original, which referred to
a non-existent macro.

Original source: <https://github.com/doomemacs/doomemacs/blob/03d692f129633e3bf0bd100d91b3ebf3f77db6d1/lisp/doom-lib.el#L620-L626>"
  `(let ((default-directory (dir!))
          file-name-handler-alist)
     (dolist (dir (list ,@dirs))
       (cl-pushnew (expand-file-name dir) load-path :test #'string=))))

;; via <https://github.com/bling/dotemacs/blob/97c72c8425c5fb40ca328d1a711822ce0a0cfa26/core/core-boot.el#L53-L74>
(defmacro after! (feature &rest body)
  "Execute BODY after FEATURE has been loaded.

FEATURE may be any one of:
    \\='evil            => (with-eval-after-load \\='evil BODY)
    \"evil-autoloads\" => (with-eval-after-load \"evil-autoloads\" BODY)
    [evil cider]     => (with-eval-after-load \\='evil
                          (with-eval-after-load \\='cider
                            BODY))

TODO: Doom's implementation is more flexible and handles
undefined symbols, but does not support quoted FEATURE. Some new
macro supporting quoted FEATURE and the features of Doom's
version would probably be ideal."
  (declare (indent 1))
  (cond
    ((vectorp feature)
      (let ((prog (macroexp-progn body)))
        (cl-loop for f across feature
          do
          (progn
            (setq prog (append `(',f) `(,prog)))
            (setq prog (append '(with-eval-after-load) prog))))
        prog))
    (t
      `(with-eval-after-load ,feature ,@body))))

(defmacro after!! (feature &rest body)
  "Evaluate BODY after FEATURE and an eponymous mode it provides.
Wrapper for `after!' with an additional check for a mode named after FEATURE."
  (declare (indent defun))
  (let ((mode-sym (intern (format "%s-mode" (symbol-name (ceamx-unquote feature))))))
    `(after! ,feature
       (when (fboundp ',mode-sym)
         ,@body))))

;; via <https://github.com/doomemacs/doomemacs/blob/03d692f129633e3bf0bd100d91b3ebf3f77db6d1/lisp/doom-lib.el#L686-L701>
(defmacro defer-until! (condition &rest body)
  "Run BODY when CONDITION is non-nil.
Leverages checks via `after-load-functions'.
Meant to serve as a predicated alternative to `after!'."
  (declare (indent defun) (debug t))
  `(if ,condition
     (progn ,@body)
     ,(let ((fn (intern (format "ceamx--delay-form-%s-h" (sxhash (cons condition body))))))
        `(progn
           (fset ',fn (lambda (&rest args)
                        (when ,(or condition t)
                          (remove-hook 'after-load-functions #',fn)
                          (unintern ',fn nil)
                          (ignore args)
                          ,@body)))
           (put ',fn 'permanent-local-hook t)
           (add-hook 'after-load-functions #',fn)))))

(defmacro autoload-macro! (macro file)
  "Define MACRO to autoload from FILE.
MACRO and FILE are as in `autoload', which see.

This provides `autoload' with nil values for its DESCRIPTION and
INTERACTIVE arguments. Its TYPE argument is non-nil, indicating
that the symbol to be autoload is actually a macro."
  (declare (debug t))
  `(autoload ,macro ,file nil nil t))

;;; Variables

(defmacro appendq! (sym &rest lists)
  "Append LISTS to SYM in place."
  `(setq ,sym (append ,sym ,@lists)))

(defmacro prependq! (sym &rest lists)
  "Prepend LISTS to SYM in place."
  `(setq ,sym (append ,@lists ,sym)))

(defmacro appendopt! (variable &rest lists)
  "Append LISTS to the existing user option VARIABLE.
This uses `setopt' to set the new value of VARIABLE."
  `(setopt ,variable (append ,variable ,@lists)))

(defmacro prependopt! (variable &rest lists)
  "Prepend LISTS to the existing user option VARIABLE.
This uses `setopt' to set the new value of VARIABLE."
  `(setopt ,variable (append ,@lists ,variable)))

(defmacro delq! (elt list &optional fetcher)
  "`delq' ELT from LIST in-place.
If FETCHER is a function, ELT is used as the key in LIST (an alist)."
  `(setq ,list (delq ,(if fetcher
                          `(funcall ,fetcher ,elt ,list)
                        elt)
                     ,list)))

;; TODO: another version to test car of alist so that new additions with the
;;       same car will override the existing list
(defmacro pushnew! (place &rest values)
  "Push VALUES sequentially into PLACE, if they aren't already present.
This is a variadic `cl-pushnew'."
  (let ((var (make-symbol "result")))
    `(dolist (,var (list ,@values) (with-no-warnings ,place))
       (cl-pushnew ,var ,place :test #'equal))))

;;
;;; Filesystem

(defun ceamx-subdirs (parent-dir)
  "Return every non-hidden subdirectory of PARENT-DIR."
  (cl-remove-if-not
   #'file-directory-p
   (directory-files
    (expand-file-name parent-dir) t "^[^\\.]")))

;; via <https://github.com/noctuid/dotfiles/blob/434ddb77c4b40f4b7ab2246cc2254aa4f408b16f/emacs/.emacs.d/awaken.org>
(cl-defun ceamx-basename (&optional (file (buffer-file-name)))
  "Return the basename of FILE."
  (file-name-sans-extension (file-name-nondirectory file)))

(defmacro file! ()
  "Return the path of the file this macro was called."
  (or
   ;; REVIEW: Use `macroexp-file-name' once 27 support is dropped.
   (let ((file (car (last current-load-list))))
     (if (stringp file) file))
   (bound-and-true-p byte-compile-current-file)
   load-file-name
   buffer-file-name                     ; for `eval'
   (error "file!: cannot deduce the current file path")))

(defmacro dir! ()
  "Return the directory of the file this macro was called."
   (let (file-name-handler-alist)
     (file-name-directory (macroexpand '(file!)))))

(defmacro subdirs! (parent-dir)
  "Return non-hidden subdirectories of PARENT-DIR.
Simple wrapper around `ceamx-subdirs'."
  `(ceamx-subdirs ,parent-dir))

;;
;;; Advice

(defmacro def-advice! (name arglist how symbol docstring &rest body)
  "Define an advice called NAME and add it to a function.
ARGLIST, DOCSTRING, and BODY are as in `defun'.

HOW and SYMBOL are as in `advice-add'. HOW describes how to add
the newly-defined advice. SYMBOL is the function to be advised."
  (declare (indent 2)
    (doc-string 5))
  (unless (stringp docstring)
    (error "Ceamx: advice `%S' not documented'" name))
  (unless (and (listp symbol)
            (= 2 (length symbol))
            (eq (nth 0 symbol) 'function)
            (symbolp (nth 1 symbol)))
    (error "Ceamx: advice `%S' does not sharp-quote symbol `%S'" name symbol))
  `(progn
     (defun ,name ,arglist
       ,(let ((article (if (string-match-p "^:[aeiou]" (symbol-name how))
                         "an"
                         "a")))
          (format "%s\n\nThis is %s `%S' advice for\n`%S'."
            docstring article how
            (if (and (listp symbol)
                  (memq (car symbol) ''function))
              (cadr symbol)
              symbol)))
       ,@body)
     (eval-when-compile
       (declare-function ,name nil))
     (advice-add ,symbol ',how #',name)
     ',name))

;;; Hooks

(defmacro def-hook! (name arglist hooks docstring &rest body)
  "Define function NAME and add it to HOOKS.
ARGLIST is as in `defun'. HOOKS is a list of hooks to which to
add the function, or just a single hook. DOCSTRING and BODY are
as in `defun'."
  (declare (indent 2)
           (doc-string 4))
  (setq hooks (ensure-list (ceamx-unquote hooks)))
  (dolist (hook hooks)
    (unless (string-match-p "-\\(hook\\|functions\\)$" (symbol-name hook))
      (error "Symbol `%S' is not a hook" hook)))
  (unless (stringp docstring)
    (error "Ceamx: no docstring provided for `def-hook!'"))
  (let ((hooks-str (format "`%S'" (car hooks))))
    (dolist (hook (cdr hooks))
      (setq hooks-str (format "%s\nand `%S'" hooks-str hook)))
    `(progn
       (defun ,name ,arglist
         ,(format "%s\n\nThis function is for use in %s."
                  docstring hooks-str)
         ,@body)
       (dolist (hook ',hooks)
         (add-hook hook ',name)))))

;; FIXME: accept unquoted args
(defmacro hook! (hooks func)
  "Add function FUNC to one or more HOOKS.
HOOKS may be either a single quoted hook symbol, or a list of
multiple hook symbols.

FUNC may be any quoted function symbol."
  (declare (indent defun))
  (setq func (ceamx-unquote func))
  (cl-assert (fboundp func) t)
  `(dolist (hook (ensure-list ,hooks))
     (cl-assert (boundp hook) t)
     (add-hook hook ',func)))

(defmacro add-hook! (hooks &rest rest)
  "A convenience macro for adding N functions to M hooks.

This macro accepts, in order:

  1. The mode(s) or hook(s) to add to. This is either an unquoted mode, an
     unquoted list of modes, a quoted hook variable or a quoted list of hook
     variables.
  2. Optional properties :local, :append, and/or :depth [N], which will make the
     hook buffer-local or append to the list of hooks (respectively),
  3. The function(s) to be added: this can be a quoted function, a quoted list
     thereof, a list of `defun' or `cl-defun' forms, or arbitrary forms (will
     implicitly be wrapped in a lambda).

\(fn HOOKS [:append :local [:depth N]] FUNCTIONS-OR-FORMS...)"
  (declare (obsolete "def-hook!" "2023-11-10")
    (indent (lambda (indent-point state)
              (goto-char indent-point)
              (when (looking-at-p "\\s-*(")
                (lisp-indent-defform state indent-point))))
    (debug t))
  ;; TODO: use `derived-mode-hook-name'
  (let* ((hook-forms (ceamx--resolve-hook-forms hooks))
          (func-forms ())
          (defn-forms ())
          append-p local-p remove-p depth)
    (while (keywordp (car rest))
      (pcase (pop rest)
        (:append (setq append-p t))
        (:depth  (setq depth (pop rest)))
        (:local  (setq local-p t))
        (:remove (setq remove-p t))))
    (while rest
      (let* ((next (pop rest))
              (first (car-safe next)))
        (push (cond ((memq first '(function nil))
                      next)
                ((eq first 'quote)
                  (let ((quoted (cadr next)))
                    (if (atom quoted)
                      next
                      (when (cdr quoted)
                        (setq rest (cons (list first (cdr quoted)) rest)))
                      (list first (car quoted)))))
                ((memq first '(defun cl-defun))
                  (push next defn-forms)
                  (list 'function (cadr next)))
                ((prog1 `(lambda (&rest _) ,@(cons next rest))
                   (setq rest nil))))
          func-forms)))
    `(progn
       ,@defn-forms
       (dolist (hook (nreverse ',hook-forms))
         (dolist (func (list ,@func-forms))
           ,(if remove-p
              `(remove-hook hook func ,local-p)
              `(add-hook hook func ,(or depth append-p) ,local-p)))))))

(defmacro remove-hook! (hooks &rest rest)
  "A convenience macro for removing N functions from M hooks.

Takes the same arguments as `add-hook!'.

If N and M = 1, there's no benefit to using this macro over `remove-hook'.

\(fn HOOKS [:append :local] FUNCTIONS)"
  (declare (indent defun) (debug t))
  `(add-hook! ,hooks :remove ,@rest))

(defmacro setq-hook! (hooks &rest var-vals)
  "Sets buffer-local variables on HOOKS.

\(fn HOOKS &rest [SYM VAL]...)"
  (declare (indent 1))
  (macroexp-progn
   (cl-loop for (var val hook fn) in (ceamx--setq-hook-fns hooks var-vals)
            collect `(defun ,fn (&rest _)
                       ,(format "%s = %s" var (pp-to-string val))
                       (setq-local ,var ,val))
            collect `(add-hook ',hook #',fn -90))))

(defmacro unsetq-hook! (hooks &rest vars)
  "Unbind setq hooks on HOOKS for VARS.

\(fn HOOKS &rest [SYM VAL]...)"
  (declare (indent 1))
  (macroexp-progn
   (cl-loop for (_var _val hook fn)
            in (ceamx--setq-hook-fns hooks vars 'singles)
            collect `(remove-hook ',hook #',fn))))

;;; Packages

(defmacro use-feature! (name &rest args)
  "Configuration-only wrapper for `use-package', passing through NAME and ARGS.

This macro is a wrapper for `use-package' disabling package
installation by setting package installation keywords to nil. The
supported keywords are `:ensure' (for package.el and recent
versions of `elpaca'), `:straight', `:quelpa', and `:elpaca' (for
older versions of `elpaca').

As an example, if `use-package-always-ensure' is non-nil, its
effect will be ignored in the `use-package' macro expansion
because `:ensure' will be nil.

For further information, refer to the `use-package' documentation
or the documentation for the respective package manager."
  (declare (indent defun))
  (let (
         ;; FIXME: check if :ensure keyworr compat available

         ;;(quelpa-keyword-maybe (when (fboundp 'use-package-handler/:quelpa) '(:quelpa nil)))
         ;;(straight-keyword-maybe (when (fboundp 'use-package-handler/:straight) '(:straight nil)))

         ;; (elpaca-keyword-maybe (when (fboundp 'use-package-handler/:elpaca) '(:elpaca nil)))
         )
    `(use-package ,name
       :ensure nil
       ;; ,@elpaca-keyword-maybe
       ;;,@quelpa-keyword-maybe
       ;; ,@straight-keyword-maybe
       ,@args)))

(defmacro package! (order &rest body)
  "Declare a package ORDER and its initial configuration BODY.
Provides the necessary autoloads so that we can declare packages
without needing to declare autoloads for `elpaca' in every file."
  (declare (indent defun))
  `(progn
     (autoload 'elpaca "elpaca" nil nil t)
     (elpaca ,order ,@body)))

(provide 'lib-common)
;;; lib-common.el ends here
#+end_src

*** Tasks

**** TODO Consider moving to =lisp/core/ceamx-lib.el=


** Manifest

#+BEGIN_SRC elisp :tangle init.el
;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Personal Emacs configuration file.

;; TODO: <https://github.com/Genivia/ugrep#using-ugrep-within-emacs>
;;       <https://manueluberti.eu/posts/2022-08-07-emacs-ugrep/#fn:3>
;;       <https://manueluberti.eu/posts/2023-10-01-embark-ugrep/>
;;       <https://manueluberti.eu/posts/2021-09-10-rgrep-and-vc-git-grep/>
;; TODO: <https://elpa.gnu.org/packages/xr.html>
;; TODO: <https://github.com/leoliu/easy-kill>

;;; Code:

(require 'cl-lib)

(require 'ceamx-paths)

(require 'lib-common)

(defgroup ceamx nil
  "User-configurable options for Ceamx."
  ;; TODO: is this group appropriate?
  :group 'file)

(defcustom ceamx-load-custom-file nil
  "Whether to load the user `custom-file' (custom.el)."
  :group 'ceamx
  :type '(boolean))

(setq-default user-full-name "Chris Montgomery"
              user-mail-address "chris@cdom.io")

(require 'init-benchmarking)

;;; Load environment-related constants

(require 'config-env)
;; TODO: see bbatsov/prelude for prior art
(when +sys-wsl-p
  (require 'lib-env-wsl))

;;; Initialize packages

;; Third-party package managers should be configured in init.el directly instead
;; of within a `require'd file so that they may be re-initialized properly.

;; Add site-lisp directory tree to load path.
(add-to-list 'load-path ceamx-site-lisp-dir)
(prependq! load-path (subdirs! ceamx-site-lisp-dir))

;;;; Preface


;;;; Bootstrap

(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" ceamx-packages-dir))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;;;; Configure elpaca use-package integration

(setopt use-package-always-ensure t)

(elpaca use-package)

(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(elpaca-wait)

;;;; Improve `use-package' debuggability if necessary

(setopt use-package-expand-minimally nil)
(when (bound-and-true-p init-file-debug)
  (require 'use-package)
  (setopt use-package-expand-minimally nil)
  (setopt use-package-verbose t)
  (setopt use-package-compute-statistics t))

(add-hook 'elpaca-after-init-hook #'ceamx-after-init-hook)
(add-hook 'elpaca-after-init-hook #'ceamx-emacs-startup-hook)

;;;; Essential storage path cleanup for features/packages

;; <https://github.com/emacscollective/no-littering/>

(use-package no-littering
  :demand t
  :init
  (setq no-littering-etc-directory ceamx-etc-dir)
  (setq no-littering-var-directory ceamx-var-dir))

(elpaca-wait)

;;;; Use latest versions of some Emacs builtins to satisfy bleeding-edge packages

;; Installing the latest development versions of `eglot' and `magit' (for
;; example) comes with the significant caveat that their dependencies often
;; track the latest versions of builtin Emacs libraries. Those can be installed
;; via GNU ELPA.
;;
;; Since core libraries like `seq' are often dependencies of many other packages
;; or otherwise loaded immediately (like `eldoc'), installation and activation
;; of the newer versions needs to happen upfront to avoid version conflicts and
;; mismatches. For example, we do not want some package loaded earlier in init
;; to think it is using the builtin version of `seq', while a package loaded
;; later in init uses a differnt version. I am not sure how realistic such a
;; scenario might be, or whether it would truly pose a problem, but the point is
;; that we should aim for consistency.
;;
;; Oftentimes, these builtins must be unloaded before loading the newer version.
;; This applies especially to core libraries like `seq' or the
;; enabled-by-default `global-eldoc-mode' provided by `eldoc', but not
;; `jsonrpc', since its functionality is specific to more niche features like
;; inter-process communication in the case of `eglot'.
;;
;; A feature must only be unloaded once, *before* loading the version installed
;; by Elpaca. Normally, that is not an issue because the init file is only
;; loaded once on session startup. But when you are re-loading the init file
;; inside a running session, you'd actually end up unloading the version that
;; Elpaca loaded. To prevent that, the unloading should happen only once --
;; during session startup -- so we check for a non-nil value of `after-init-time'.
;;
;; I don't understand why the Elpaca-installed feature/package only seems to be
;; loaded during the initial session startup? Unless the unloading happens
;; conditionally based on `after-init-time' as described above, every time the
;; init file is reloaded and `elpaca-process-queues' runs in
;; `+auto-tangle-reload-init-h', I get a bunch of errors (not warnings!) about
;; `eglot' and `org' as missing dependencies.

;;;;; Install the latest version of `seq' builtin library, carefully

;; `magit' requires a more recent version of `seq' than the version included in
;; Emacs 29.

;; Requires special care because unloading it can make other libraries freak out.
;; <https://github.com/progfolio/elpaca/issues/216#issuecomment-1868444883>

(defun +elpaca-unload-seq (e)
  "Unload the builtin version of `seq' and continue the `elpaca' build E."
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

(defun +elpaca-seq-build-steps ()
  "Update the `elpaca' build-steps to activate the latest version of the builtin `seq' package."
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps
                     elpaca-build-steps))
          (list '+elpaca-unload-seq 'elpaca--activate-package)))

(elpaca `(seq :build ,(+elpaca-seq-build-steps)))

;;;;; Install the latest version of `jsonrpc' builtin library

;; Required by (and originally extracted from) `eglot'.

(elpaca jsonrpc
  (require 'jsonrpc))

;;;;; Install the latest version of `eldoc' builtin library, carefully

;; Required by `eglot'.

;; `eldoc' requires a delicate workaround to avoid catastrophy.
;; <https://github.com/progfolio/elpaca/issues/236#issuecomment-1879838229>

(unless after-init-time
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (defvar global-eldoc-mode nil))

(elpaca eldoc
  (require 'eldoc)
  (global-eldoc-mode))

;;;;; Install the latest version of the builtin `eglot' package

(unless after-init-time
  (when (featurep 'eglot)
    (unload-feature 'eglot)))

(elpaca eglot)

;;;;; Install the latest version of Org-Mode (`org')

(unless after-init-time
  (when (featurep 'org)
    (unload-feature 'org)))

(elpaca (org :autoloads "org-loaddefs.el"))

;;;;; Ensure the previously-queued package requests have completed

(elpaca-wait)

;;;; Initialize miscellaneous packages adding `use-package' keywords

;; NOTE: `blackout' is still useful even without `use-package'
(use-package blackout
  :demand t)

(elpaca-wait)

;;;; Run garbage collection on idle

;; <https://gitlab.com/koral/gcmh>
;; <https://akrl.sdf.org/>

;; During normal use, the GC threshold will be set to a high value.
;; When idle, GC will be triggered with a low threshold.

(use-package gcmh
  :blackout
  :commands (gcmh-mode)
  :init
  (add-hook 'ceamx-emacs-startup-hook #'gcmh-mode)
  (setopt gcmh-high-cons-threshold (* 16 1024 1024)))

;;; Site-lisp packages

(require 'on)


(elpaca-wait)

;;; Libraries

;; FIXME: remove or alias (`##' is very difficult to search for)
(use-package llama) ;  `##' lambda shorthand =>
                                        ;  <https://git.sr.ht/~tarsius/llama>

(use-package f)

(require 'lib-common)

(require 'lib-files)
(require 'lib-elisp)

;;; Configuration

;; Increase number of messages saved in log.
(setq message-log-max 10000)

;; Unbind `suspend-frame'.
;; TODO: provide more context
(global-unset-key (kbd "C-x C-z"))

;; "A second, case-insensitive pass over `auto-mode-alist' is time wasted."
(setopt auto-mode-case-fold nil)

;; Prevent Emacs from pinging domain names unexpectedly.
(setopt ffap-machine-p-known 'reject)

;;;; Environment

(require 'init-env)
(require 'init-input-methods)

;; Site-specific configuration, to be ignored by version control.
(require 'site-config (file-name-concat user-emacs-directory "site-config") t)

(require 'init-secrets)

;;;; Displays + Appearance

;; TODO: re-enable
;; (require 'init-frame-hooks)
(require 'init-env-tty)
(require 'init-frame)

;; Load configuration settings for conditional loading.
(require 'config-ui)

(require 'init-ui)

(require 'init-ui-theme)
(require 'init-ui-ef-themes)
(require 'init-ui-modus-themes)

(when (display-graphic-p)
  (require 'init-ui-font))

(require 'init-ui-modeline)
(require 'init-ui-modeline-doom)

;;;;; Integrations for visual consistency

(require 'init-ui-circadian)

(require 'init-after-ui)

;;;; Keyboard support

(require 'config-keys)

(require 'init-keys)
(require 'init-keys-which-key)
(require 'init-keys-meow)

;;;; Windows

(require 'init-window)
(require 'init-buffer)

;; FIXME: load earlier / in another section
(require 'init-history)

;;;; Dashboard

(require 'init-dashboard)

;;;; Selection

(require 'init-selection-vertico)
(require 'init-selection-orderless)
(require 'init-selection-marginalia)
(require 'init-selection-consult)

(require 'init-search)

;;;; Completion-At-Point

(require 'config-completion)
(require 'init-completion)

;;;; Help

(require 'init-help)

;;;; Actions

(require 'init-embark)
(require 'init-wgrep)

;; Projects / Files
(require 'init-project)
(require 'init-vcs)
(require 'init-vcs-magit)
(require 'init-vcs-forge)
(require 'init-files)
(require 'init-dired)

;;;; Workspaces + activities + contexts

(require 'init-workspace)

;;;; Editing

(require 'init-editor)
(require 'init-templates)

;;;; Memex

;; TODO: move after syntaxes? org-mode is heavy

(require 'init-org)
(require 'init-notes)
(require 'init-notes-denote)

;;;; Linting

(require 'init-flycheck)

;;;; Tree-Sitter

(require 'init-treesitter)

;;;; Language/syntax support

(require 'init-prog)
(require 'init-lisp)

(require 'init-lang-data)
(require 'init-lang-elisp)
(require 'init-lang-html)
(require 'init-lang-js)
(require 'init-lang-lua)
(require 'init-lang-markdown)
(require 'init-lang-nix)
(require 'init-lang-php)
(require 'init-lang-shell)
(require 'init-lang-yaml)
(require 'init-lang-misc)

;; FIXME: this is lang support, not integration -- rename to `init-lang-nu'
(require 'init-shell-nu)

(require 'init-eglot)
;; (require 'init-lsp)


;;;; Miscellaneous

(require 'init-tools)
(require 'init-tools-ai)
(require 'init-tools-ledger)
(require 'init-tools-pdf)

(require 'init-term)
(require 'init-eww)
(require 'init-printing)

(require 'init-fun)

(require 'init-controls)

;;; Postlude

;; FIXME: causes some errors / inconsistencies
;; (def-hook! ceamx-maybe-start-emacs-server-h () 'ceamx-after-init-hook
;;   "Auto-start Emacs daemon if not already running."
;;   (require 'server)
;;   (unless (and (fboundp 'server-running-p)
;;             (server-running-p))
;;     (server-start)))

;; unfortunately
(when (and +gui-p +sys-mac-p)
  (def-hook! ceamx-after-init-restart-yabai-h () 'ceamx-after-init-hook
    "Restart the yabai service after init."
    (after! [exec-path-from-shell]
      (async-shell-command "yabai --restart-service"))))

;; Optionally load custom file after all packages have loaded.
;; (when (and ceamx-load-custom-file
;;            (file-exists-p custom-file))
;;   (def-hook! ceamx-after-init-load-custom-file-h ()
;;     'ceamx-after-init-hook
;;     "Load the user `custom-file'.
;; Keep in mind that the custom file is ignored in version control."
;;     (load custom-file 'noerror)))

(provide 'init)
;;; init.el ends here
#+END_SRC


*** Measure startup times

#+begin_src emacs-lisp :tangle lisp/init-benchmarking.el
;;; init-benchmarking.el --- Measure startup and require times -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;; Copyright (c) 2006-2021, Steve Purcell
;; All rights reserved.

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:
;;; Code:

(defun ceamx-time-subtract-millis (b a)
  (* 1000.0 (float-time (time-subtract b a))))

(defvar ceamx-require-times nil
  "A list of (FEATURE LOAD-START-TIME LOAD-DURATION).
LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

(defun ceamx-require-times-wrapper (orig feature &rest args)
  "Note in `ceamx-require-times' the time taken to require each feature."
  (let* ((already-loaded (memq feature features))
         (require-start-time (and (not already-loaded) (current-time))))
    (prog1
        (apply orig feature args)
      (when (and (not already-loaded) (memq feature features))
        (let ((time (ceamx-time-subtract-millis (current-time) require-start-time)))
          (add-to-list 'ceamx-require-times
                       (list feature require-start-time time)
                       t))))))

(advice-add 'require :around 'ceamx-require-times-wrapper)

(define-derived-mode ceamx-require-times-mode tabulated-list-mode "Require-Times"
  "Show times taken to `require' packages."
  (setq tabulated-list-format
    [("Start time (ms)" 20 ceamx-require-times-sort-by-start-time-pred)
      ("Feature" 30 t)
      ("Time (ms)" 12 ceamx-require-times-sort-by-load-time-pred)])
  (setq tabulated-list-sort-key (cons "Start time (ms)" nil))
  (setq tabulated-list-padding 2)
  (setq tabulated-list-entries #'ceamx-require-times-tabulated-list-entries)
  (tabulated-list-init-header)
  (when (fboundp 'tablist-minor-mode)
    (tablist-minor-mode)))

(defun ceamx-require-times-sort-by-start-time-pred (entry1 entry2)
  (< (string-to-number (elt (nth 1 entry1) 0))
     (string-to-number (elt (nth 1 entry2) 0))))

(defun ceamx-require-times-sort-by-load-time-pred (entry1 entry2)
  (> (string-to-number (elt (nth 1 entry1) 2))
    (string-to-number (elt (nth 1 entry2) 2))))

(defun ceamx-require-times-tabulated-list-entries ()
  (cl-loop for (feature start-time millis) in ceamx-require-times
           with order = 0
           do (cl-incf order)
           collect (list order
                         (vector
                          (format "%.3f" (ceamx-time-subtract-millis start-time before-init-time))
                          (symbol-name feature)
                          (format "%.3f" millis)))))

(defun ceamx-require-times ()
  "Show a tabular view of how long various libraries took to load."
  (interactive)
  (with-current-buffer (get-buffer-create "*Require Times*")
    (ceamx-require-times-mode)
    (tabulated-list-revert)
    (display-buffer (current-buffer))))

;; FIXME: show in echo area, not just messages buffer -- maybe idk `inhibit-startup-message' ?
(defun ceamx-show-init-time ()
  (message "init completed in %.2fms"
    (ceamx-time-subtract-millis after-init-time before-init-time)))

(add-hook 'ceamx-after-init-hook #'ceamx-show-init-time)

(provide 'init-benchmarking)
;;; init-benchmarking.el ends here
#+end_src


*** Packages


* Configure

** Common

#+begin_src emacs-lisp :tangle lisp/config-common.el
;;; config-common.el --- Common and miscellaneous configuration settings  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery
;; Copyright (C) 2020-2023  Protesilaos Stavrou

;; Author: Chris Montgomery <chris@cdom.io>
;;         Protesilaos Stavrou <info@protesilaos.com>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Sources:

;; <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/prot-lisp/prot-common.el>

;;; Code:

;; via <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/prot-lisp/prot-common.el>
(defvar ceamx-common-url-regexp
  (concat
    "~?\\<\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]*\\)"
    "[.@]"
    "\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]+\\)\\>/?")
  "Regular expression to match (most?) URLs or email addresses.")

(provide 'config-common)
;;; config-common.el ends here
#+end_src


** Environment

*** Options / Variables

#+begin_src emacs-lisp :tangle lisp/config-env.el
;;; config-env.el --- Variables regarding the environment  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Where are we?

;;; Code:

(defvar +gui-p
  (display-graphic-p))

(defvar +xorg-p
  (memq window-system '(x)))

(defvar +user-root-p
  (string-equal "root" (getenv "USER")))

(defvar +sys-mac-p
  (or (memq window-system '(mac ns))
      (eq system-type 'darwin)))

(defvar +sys-linux-p
  (eq system-type 'gnu/linux))

(defvar +env-pgtk-p
  (bound-and-true-p pgtk-initialized)
  "Whether Emacs is running with pure-GTK windowing.")

;; via <https://emacsredux.com/blog/2021/12/19/wsl-specific-emacs-configuration/>
(defvar +sys-wsl-p
  (and (eq system-type 'gnu/linux)
    (or (getenv "WSLENV")
      (getenv "WSL_DISTRO_NAME")))
  "Whether Emacs is currently running in WSL.")

(defvar +env-dumb-p
  (string= (getenv "TERM") "dumb"))

;; TODO: is this really the way? and is it even necessary?
(defvar +env-iterm-p
  (string= (getenv "TERM_PROGRAM") "iTerm.app"))

(defvar +env-xterm-p
  (not (string-empty-p (getenv "XTERM_VERSION"))))

(defvar +env-gnome-terminal-p
  (string= (getenv "COLORTERM") "gnome-terminal"))

(defvar +env-konsole-p
  (not (string-empty-p (getenv "KONSOLE_PROFILE_NAME"))))

(defvar +env-apple-terminal-p
  (string= (getenv "TERM_PROGRAM") "Apple_Terminal"))

(provide 'config-env)
;;; config-env.el ends here
#+end_src

*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-env.el
;;; init-env.el --- Environment configuration -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Ensure proper integration with the user environment.

;;; Code:

(require 'elpaca-autoloads)

(require 'config-env)

(require 'lib-common)

;; Disable unnecessary OS-specific command-line options.
(unless +sys-mac-p
  (setq command-line-ns-option-alist nil))
(unless +sys-linux-p
  (setq command-line-x-option-alist nil))

(package! exec-path-from-shell
  (require 'exec-path-from-shell)
  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))

;;; Make temporary buffers inherit buffer-local environment variables with `inheritenv'

;; <https://github.com/purcell/inheritenv>

(package! inheritenv
  (with-eval-after-load 'exec-path-from-shell
    (require 'inheritenv)))

;;; Support integration with Direnv via the `envrc' package

;; <https://github.com/purcell/envrc>
;; <https://direnv.net/>
;; <https://github.com/direnv/direnv>

;; > Q: How does this differ from `direnv.el`?
;;
;; > <https://github.com/wbolster/emacs-direnv> repeatedly changes the global
;; > Emacs environment, based on tracking what buffer you're working on.
;;
;; > Instead, `envrc.el` simply sets and stores the right environment in each
;; > buffer, as a buffer-local variable.

(package! envrc
  (with-eval-after-load 'exec-path-from-shell
    (envrc-global-mode)))

(elpaca-wait)

(provide 'init-env)
;;; init-env.el ends here
#+end_src


*** Terminal/TTY Support

#+begin_src emacs-lisp :tangle lisp/init-env-tty.el
;;; init-env-tty.el --- TTY environment support -*- lexical-binding: t -*-

;; Copyright (c) 2023-2024 Chris Montgomery
;; Copyright (c) 2006-2021 Steve Purcell

;; Author: Steve Purcell
;;         Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Created: 20 July 2023

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:

;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.

;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:

;; Specialized configurations for Emacs running in a TTY / terminal emulator
;; environment.

;; FIXME: most of this should be loaded conditionally

;;; Code:

(autoload 'mwheel-install "mwheel")

(defun ceamx/console-frame-setup ()
  (xterm-mouse-mode 1)
  (mwheel-install))

;; Make the mouse wheel scroll.
(global-set-key [mouse-4] (lambda () (interactive) (scroll-down 1)))
(global-set-key [mouse-5] (lambda () (interactive) (scroll-up 1)))

;; (add-hook 'after-make-console-frame-hooks 'ceamx/console-frame-setup)

(provide 'init-env-tty)
;;; init-env-tty.el ends here
#+end_src


*** WSL Support

#+begin_src emacs-lisp :tangle lisp/lib-env-wsl.el
;;; lib-env-wsl.el --- Helpers for WSL environments  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Sources:

;; <https://emacsredux.com/blog/2021/12/19/wsl-specific-emacs-configuration/>
;; <https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/>

;;; Code:

(require 'config-env)

(defun ceamx-wsl/copy-selected-text (start end)
  "In WSL, copy text region with START and END to the host clipboard."
  (interactive "r")
  (if (use-region-p)
    (let ((text (buffer-substring-no-properties start end)))
      (shell-command (concat "echo '" text "' | clip.exe")))))

(provide 'lib-env-wsl)
;;; lib-env-wsl.el ends here
#+end_src


** Secrets

*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-secrets.el
;;; init-secrets.el --- Support for secretive operations  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; GnuPG, pinentry, `auth-source', Unix password store, etc.

;;; Sources:

;; <https://github.com/jwiegley/dot-emacs/blob/9d595c427136e2709dee33271db1a658493265bd/init.org#auth-source-pass>

;;; Code:

(require 'epg)
(require 'auth-source)
(require 'auth-source-pass)

(require 'ceamx-paths)
(require 'lib-common)

;;; Configure secrets lookup with `auth-source' and the Unix password store

;; Ensure secrets and auth credentials are not stored in plaintext (the default).
;;
;; It's best to list only a single file here to avoid confusion about where
;; secrets might be stored.
(setopt auth-sources (list "~/.authinfo.gpg"))

(use-feature! auth-source-pass
  :preface
  (defvar +auth-source-pass--cache (make-hash-table :test #'equal))

  (defun +auth-source-pass--reset-cache ()
    (setq +auth-source-pass--cache (make-hash-table :test #'equal)))

  (defun +auth-source-pass--read-entry (entry)
    "Return a string with the file content of ENTRY."
    (run-at-time 45 nil #'+auth-source-pass--reset-cache)
    (let ((cached (gethash entry +auth-source-pass--cache)))
      (or cached
        (puthash
          entry
          (with-temp-buffer
            (insert-file-contents (expand-file-name
                                    (format "%s.gpg" entry)
                                    (getenv "PASSWORD_STORE_DIR")))
            (buffer-substring-no-properties (point-min) (point-max)))
          +auth-source-pass--cache))))

  (defun ceamx-auth-source-pass-list-items ()
    "Return a list of all password store items."
    (let ((store-dir (getenv "PASSWORD_STORE_DIR")))
      (mapcar
        (lambda (file)
          (file-name-sans-extension (file-relative-name file store-dir)))
        (directory-files-recursively store-dir "\.gpg$"))))

  :config
  (auth-source-pass-enable))

;;; Use Emacs for pinentry

(use-feature! epg
  :defer 2
  :config
  (setopt epg-pinentry-mode 'loopback))

(provide 'init-secrets)
;;; init-secrets.el ends here
#+end_src

*** Library

#+begin_src emacs-lisp :tangle lisp/lib-secrets.el
;;; lib-secrets.el --- Helpers for secrets           -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(eval-when-compile
  (require 'auth-source)
  (require 'auth-source-pass))

;; via <https://github.com/jwiegley/dot-emacs/blob/9d595c427136e2709dee33271db1a658493265bd/init.org#lookup-a-password-using-auth-source>
(defun ceamx-lookup-password (host user port)
  (require 'auth-source)
  (require 'auth-source-pass)
  (let ((auth (auth-source-search :host host :user user :port port)))
    (if auth
      (let ((secretf (plist-get (car auth) :secret)))
        (if secretf
          (funcall secretf)
          (error "Auth entry for %s@%s:%s has no secret!"
            user host port)))
      (error "No auth entry found for %s@%s:%s" user host port))))

(provide 'lib-secrets)
;;; lib-secrets.el ends here
#+end_src


** Frame

*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-frame.el
;;; init-frame.el --- Frame modifications -*- lexical-binding: t -*-

;; Copyright (c) 2023-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; FIXME: unreadable childframes sometimes. e.g. command output, embark.
;; at least make sure these childframes seriously have modeline disabled and
;; their padding reduced

;;; Code:

;;; Requirements

(require 'config-env)

(require 'lib-frame)
(require 'lib-common)

;;; Configure frame decorations

(unless +sys-mac-p
  ;; Hide window decorations.
  (add-to-list 'default-frame-alist '(undecorated . t)))

;;;; Handle macOS-specific workarounds

(when +sys-mac-p
  ;; `undecorated-round' is macOS-specific.
  (add-to-list 'default-frame-alist '(undecorated-round . t))

  ;; GUI menu bar is necessary otherwise Emacs will be treated as a
  ;; non-application OS window (e.g. no focus capture).
  ;; <https://github.com/doomemacs/doomemacs/blob/d657be1744a1481dc4646d0b62d5ee1d3e75d1d8/lisp/doom-start.el#L118-L128>
  (def-hook! ceamx-frame--maybe-restore-gui-menu-bar-h (&optional frame)
    '(after-make-frame-functions window-setup-hook)
    "TODO: Provide source for this approach (Doom?), and why it does what it does."
    (when-let (frame (or frame (selected-frame)))
      (when (display-graphic-p frame)
        (set-frame-parameter frame 'menu-bar-lines 1))))

  ;; Stop C-z from minimizing windows.
  (keymap-global-unset "C-z" t))


;;; General frame configuration

;;;; Disable the frame menu bar by default

(menu-bar-mode -1)

;;;; Enable the resurrection of frames with `undelete-frame'

(undelete-frame-mode 1)

(provide 'init-frame)
;;; init-frame.el ends here
#+end_src


*** Frame Hooks

#+begin_src emacs-lisp :tangle lisp/init-frame-hooks.el
;;; init-frame-hooks.el --- Provide specific hooks for GUI/TTY frame creation  -*- lexical-binding: t; -*-

;; Copyright (c) 2023-2024 Chris Montgomery
;; Copyright (c) 2006-2021 Steve Purcell

;; Author: Steve Purcell
;;         Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Created: 20 July 2023

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:

;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.

;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:
;;; Code:

(defvar after-make-console-frame-hooks '()
  "Hooks to run after creating a new TTY frame.")
(defvar after-make-window-system-frame-hooks '()
  "Hooks to run after creating a new window-system frame.")

(defun run-after-make-frame-hooks (frame)
  "Run configured hooks in response to the newly-created FRAME.
Selectively runs either `after-make-console-frame-hooks' or
`after-make-window-system-frame-hooks'"
  (with-selected-frame frame
    (run-hooks (if window-system
                   'after-make-window-system-frame-hooks
                 'after-make-console-frame-hooks))))
(add-hook 'after-make-frame-functions 'run-after-make-frame-hooks)

(defvar ceamx/initial-frame (selected-frame)
  "The frame (if any) active during Emacs initialization.")

;; NOTE: Should not use `elpaca-after-init-hook'.
(add-hook 'after-init-hook
          (lambda () (when ceamx/initial-frame
                       (run-after-make-frame-hooks ceamx/initial-frame))))


(provide 'init-frame-hooks)
;;; init-frame-hooks.el ends here
#+end_src


*** Library

#+begin_src emacs-lisp :tangle lisp/lib-frame.el
;;; lib-frame.el --- Frame functions                 -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;; TODO: why?
(defun ceamx/maybe-suspend-frame ()
  (interactive)
  (unless (and +sys-mac-p window-system)
    (suspend-frame)))


(provide 'lib-frame)
;;; lib-frame.el ends here
#+end_src


** Appearance

*** Options / Variables

#+begin_src emacs-lisp :tangle lisp/config-ui.el
;;; config-ui.el --- General UI settings             -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(defconst ceamx-gnome-ui-namespace "org.gnome.desktop.interface")

(defconst ceamx-theme-buffet-dark-periods
  '(:night :twilight :evening))

(defconst ceamx-theme-buffet-light-periods
  '(:morning :day :afternoon))

(defcustom ceamx-theme-default-light 'modus-operandi
  "The default light theme."
  :group 'ceamx
  :type 'symbol)

(defcustom ceamx-theme-default-dark 'modus-vivendi
  "The default dark theme."
  :group 'ceamx
  :type 'symbol)

(defcustom ceamx-modeline-provider 'doom
  "Modeline provider to load.
Valid values are the symbols `doom', `nano', and `telephone'
which reference the `doom-modeline', `nano-modeline', and
`telephone-line' modules respectively.

A nil value will not load any modeline customizations (use Emacs
with its default modeline)."
  :group 'ceamx
  :type '(choice :tag "Modeline to load" :value doom
           (const :tag "The `doom-modeline' module" doom)
           (const :tag "The `nano-modeline' module" nano)
           (const :tag "The `telephone-line' module" telephone)
           (const :tag "Do not load a modeline module" nil)))

(defcustom ceamx-theme-family 'modus
  "Set of themes to load.
Valid values are the symbols `ef', `modus', and `standard', which
reference the `ef-themes', `modus-themes', and `standard-themes',
respectively.

A nil value does not load any of the above (use Emacs without a
theme)."
  :group 'ceamx
  :type '(choice :tag "Set of themes to load" :value modus
                 (const :tag "The `ef-themes' module" ef)
                 (const :tag "The `modus-themes' module" modus)
                 (const :tag "The `standard-themes' module" standard)
                 (const :tag "Do not load a theme module" nil)))

(defcustom ceamx-theme-circadian-interval 'solar
  "The circadian theme switching interval.
Value may be either `period' or `solar', corresponding
respectively to period-based switching with `theme-buffet' or
sunrise/sunset toggling from the combination of the `solar'
library and the `circadian' package."
  :group 'ceamx
  :type '(choice :tag "Circadian theme switching interval" :value solar
          (const :tag "Time periods via `theme-buffet'" :value buffet)
          (const :tag "Sunrise or sunset via `solar' and `circadian'" :value solar)))

(defcustom ceamx-font-height-multiplier 1.0
  "Multiplier for display font size.
Intended for use as a per-system (or, ideally, per-display)
accommodation for varying pixel densities."
  :group 'ceamx
  :type '(float))

(provide 'config-ui)
;;; config-ui.el ends here
#+end_src


*** Customization

#+begin_src emacs-lisp :tangle lisp/init-ui.el
;;; init-ui.el --- General user interface customizations  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; For user interface things that are shared by many other things.

;;; Code:

(require 'elpaca-autoloads)

(require 'lib-common)

;;; General

;; Modal keybinding systems will change the cursor dynamically to indicate current state.
;; This default value matches what I expect in an "insert" mode.
(setq-default cursor-type 'bar)

;; Enable cursor blinking.
(blink-cursor-mode 1)

;; Seeing a cursor in a window other than the active window is pretty confusing.
(setq-default cursor-in-non-selected-windows nil)

;; Improve visual contrast between focused/non-focused windows.
(setopt highlight-nonselected-windows nil)

;;; Provide commonly-used interface libraries

;; Required as dependencies for many packages, either as more recent versions
;; than those available in Emacs (e.g. `transient 'IIRC), or, including some
;; (like `nix-mode') who don't seem to declare them.

(package! transient)

(package! magit-section)

(package! nerd-icons
  (setopt nerd-icons-font-family "Symbols Nerd Font Mono")
  (require 'nerd-icons))

(use-package svg-lib
  :demand t)

(use-package hydra
  :commands defhydra)

;;; pretty-hydra :: <https://github.com/jerrypnz/major-mode-hydra.el/#pretty-hydra>

(use-package pretty-hydra
  :after (hydra))

;;
;;; Avy

;; <https://github.com/abo-abo/avy>

;; <https://karthinks.com/software/avy-can-do-anything/>

(use-package avy
  :commands ( avy-goto-char
              avy-goto-char-2
              avy-goto-char-timer)
  :init
  (keymap-global-set "M-j" #'avy-goto-char-2)
  (after! 'lispy
    (defvar lispy-mode-map)
    (declare-function lispy-join "lispy")
    (keymap-set lispy-mode-map "M-J" #'lispy-join))

  :config
  (setopt avy-all-windows t)
  (setopt avy-all-windows-alt t)
  ;; Prevent conflicts with themes.
  (setopt avy-background nil)
  (setopt avy-style 'at-full)
  ;; (setopt avy-style 'de-bruijn)
  (setopt avy-timeout-seconds 0.2))

(provide 'init-ui)
;;; init-ui.el ends here
#+end_src


*** Themes

**** General Customization

#+BEGIN_SRC emacs-lisp :tangle lisp/init-ui-theme.el
;;; init-ui-theme.el --- Theme Initalization -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Load the theme configurations.

;;; Code:

;;; Requirements

(require 'config-env)
(require 'config-ui)
(require 'lib-ui-theme)

;;; General Configuration

;; Don't prompt to confirm theme safety.
(setopt custom-safe-themes t)

;;; Ensure themes are applied in new frames to prevent flashing

;; TODO: also some other link i can't find now
;; <https://protesilaos.com/emacs/dotemacs#h:7d3a283e-1595-4692-8124-e0d683cb15b2>
(add-hook 'after-make-frame-functions #'ceamx-theme-re-enable-in-frame)

;;; Add a custom hook to run after enabling a theme

;; via <https://github.com/jdtsmith/kind-icon/issues/34#issuecomment-1668560185>

(defvar ceamx-after-enable-theme-hook nil)

(defun ceamx-after-enable-theme (&rest _args)
  "Hook to run after enabling theme."
  (run-hooks 'ceamx-after-enable-theme-hook))

(advice-add 'enable-theme :after #'ceamx-after-enable-theme)

(provide 'init-ui-theme)
;;; init-ui-theme.el ends here
#+END_SRC


**** Modus Themes

***** Customization

#+begin_src emacs-lisp :tangle lisp/init-ui-modus-themes.el
;;; init-ui-modus-themes.el ---Modus Themes initialization  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://protesilaos.com/modus-themes/>

;;; Code:

(require 'lib-common)

(use-package modus-themes
  :ensure t
  :demand t
  :config
  ;; Note that these two settings do not necessarily disable italic/bold
  ;; entirely -- they only control whether those styles will be used in more or
  ;; less contexts.
  (setopt modus-themes-italic-constructs t)
  (setopt modus-themes-bold-constructs nil)

  (setopt modus-themes-mixed-fonts t)
  (setopt modus-themes-variable-pitch-ui nil)
  (setopt modus-themes-disable-other-themes t)
  (setopt modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted))

  (setopt modus-themes-common-palette-overrides
    '(
       ;; Make the fringe invisible.
       (fringe unspecified)
       ;; Make line numbers less intense and add a shade of cyan
       ;; for the current line number.
       (fg-line-number-inactive "gray50")
       (fg-line-number-active cyan-cooler)
       (bg-line-number-inactive unspecified)
       (bg-line-number-active unspecifed)))

  (def-hook! +modus-themes-custom-faces-h ()
    'modus-themes-after-load-theme-hook
    "Configurate custom faces for the `modus-themes'."
    (modus-themes-with-colors
      (custom-set-faces
        ;; Add "padding" to the mode lines.
        `(mode-line ((,c :box (:line-width 10
                                :color ,bg-mode-line-active))))
        `(mode-line-inactive ((,c :box (:line-width 10
                                         :color ,bg-mode-line-inactive)))))))

  ;; Do not extend `region' background past the end of the line.
  ;; <https://protesilaos.com/emacs/modus-themes#h:a5140c9c-18b2-45db-8021-38d0b5074116>
  (custom-set-faces
    '(region ((t :extend nil))))

  ;; NOTE: Loaded in `init-ui-circadian'.
  ;; (load-theme 'modus-vivendi-tinted :no-confirm)
  )

(provide 'init-ui-modus-themes)
;;; init-ui-modus-themes.el ends here
#+end_src


**** Ef-Themes


***** Customization

#+begin_src emacs-lisp :tangle lisp/init-ui-ef-themes.el
;;; init-ui-ef-themes.el --- Support for the Ef theme family  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://protesilaos.com/emacs/ef-themes>

;;; Code:

;;; Requirements

(require 'config-ui)

;;; Configuration

(use-package ef-themes
  :ensure t
  :demand t
  :commands (ef-themes-select)

  :config
  (setopt ceamx-theme-default-dark 'ef-night)
  (setopt ceamx-theme-default-light 'ef-frost)

  (setopt ef-themes-to-toggle (list ceamx-theme-default-dark ceamx-theme-default-light))

  (setopt ef-themes-headings
    '((0 variable-pitch medium 1.7)
      (1 variable-pitch 1.2)
      (2 variable-pitch 1.1)
      (3 variable-pitch medium 1.1)
      (t variable-pitch 1.0)))

  (setopt ef-themes-mixed-fonts t
          ef-themes-variable-pitch-ui nil)

  ;; Disable all other themes to avoid awkward blending
  (mapc #'disable-theme custom-enabled-themes)

  ;; The themes we provide are recorded in the `ef-themes-dark-themes',
  ;; `ef-themes-light-themes'.
  ;; Load the theme of choice:
  ;; (load-theme 'ef-elea-dark :no-confirm)
  ;; OR use this to load the theme which also calls `ef-themes-post-load-hook':
  ;; (ef-themes-select 'ef-winter)
  ;; OR use some other method of loading a theme in `init-ui-circadian'
  )

(provide 'init-ui-ef-themes)
;;; init-ui-ef-themes.el ends here
#+end_src


**** Circadian Theme Phasing

#+begin_src emacs-lisp :tangle lisp/init-ui-circadian.el
;;; init-ui-circadian.el --- Support for sunrise/sunset adjustments  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(require 'cal-dst)

(require 'config-ui)
(require 'lib-common)

;;; Sunrise/sunset interval via `solar' and `circadian'

(use-feature! solar
  :when (eq 'solar ceamx-theme-circadian-interval)

  :config
  (setopt calendar-latitude 39.968)
  (setopt calendar-longitude -75.133))

(use-package circadian
  :when (eq 'solar ceamx-theme-circadian-interval)
  :ensure t
  :demand t
  :after solar

  :commands (circadian-setup)

  :init
  (setopt circadian-themes `((:sunrise . ,ceamx-theme-default-light)
                             (:sunset . ,ceamx-theme-default-dark)))
  (circadian-setup))

;;;; Phase-of-day interval via `theme-buffet'

;; <https://git.sr.ht/~bboal/theme-buffet>

;; > The theme-buffet package arranges to automatically change themes during
;; > specific times of the day or at fixed intervals. The collection of themes
;; > is customisable, with the default options covering the built-in Emacs
;; > themes as well as Prot's modus-themes and ef-themes.

(use-package theme-buffet
  :ensure t
  :demand t
  :when (eq 'buffet ceamx-theme-circadian-interval)

  :commands (theme-buffet-modus-ef)
  :defines (theme-buffet-menu)

  :init

  ;; Take Daylight Savings Time offset into account for time period boundaries.
  ;; I am not sure why the additional `1+' is necessary, but this is copied from
  ;; the author's recommendation.
  ;; via <https://git.sr.ht/~bboal/theme-buffet/tree/06f1be349e9c3d124520b18742911307de9abda3/item/theme-buffet.el#L68-70>
  (setopt theme-buffet-time-offset (1+ (/ (cadr (calendar-current-time-zone)) 60)))

  (setopt theme-buffet-menu 'end-user)

  (setopt theme-buffet-end-user
          '(:night (;; ef-autumn
                     ef-duo-dark
                     ef-trio-dark
                     ef-night
                     ef-winter
                     ef-dark)
            :twilight (ef-bio
                       ef-cherie
                       modus-vivendi)
            :morning (ef-elea-light
                      ef-maris-light
                      ef-spring)
            :day (ef-frost
                  ef-light
                  ef-trio-light
                  modus-operandi)
            :afternoon (ef-cyprus
                        ef-arbutus
                        ef-day
                        ef-duo-light
                        ef-kassio
                        ef-melissa-light
                        ef-summer
                        modus-operandi-tinted)
            :evening (ef-elea-dark
                      ef-maris-dark
                      ef-melissa-dark
                      ef-symbiosis
                      ef-trio-dark
                      modus-vivendi-tinted)))

  :config

  (theme-buffet-end-user)

  ;; Activate some theme in the current period.
  (theme-buffet-a-la-carte))

(provide 'init-ui-circadian)
;;; init-ui-circadian.el ends here
#+end_src


**** Library

#+begin_src emacs-lisp :tangle lisp/lib-ui-theme.el
;;; lib-ui-theme.el --- Theme library functions and macros  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery
;; Copyright (C) 2024  Protesilaos Stavrou

;; Author: Chris Montgomery <chris@cdom.io>
;;         Protesilaos Stavrou <info@protesilaos.com>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Theme library functions and macros.

;;; Code:

(require 'config-ui)

(require 'lib-common)

(declare-function theme-buffet--load-random "theme-buffet")

;;; Helpers

(defun +theme-buffet--load-random-from-periods (periods)
  "Load a random theme from the specified `theme-buffet' PERIODS.
PERIODS can be a single keyword or list of keywords. Each keyword
must be a valid `theme-buffet' period as defined in
`theme-buffet--keywords'."
  (let ((period (if (listp periods) (seq-random-elt periods) periods)))
    (theme-buffet--load-random period)))

;;; Functions

;; via prot-emacs
(defun ceamx-theme-re-enable-in-frame (_frame)
  "Re-enable active theme, if any, upon FRAME creation.
Add this to `after-make-frame-functions' so that new frames do
not retain the generic background set by the function
`ceamx-theme-no-bright-flash'."
  (when-let ((theme (car custom-enabled-themes)))
    (enable-theme theme)))

(defun ceamx-gnome-theme ()
  "Get the currently-active GNOME/GTK color scheme."
  (shell-command (format "gsettings get %s color-scheme"
                         ceamx-gnome-ui-namespace)))

(defun ceamx-gnome-theme-dark-p ()
  "Whether GNOME/GTK are using a theme with a dark color scheme."
  (string-match-p "dark" (ceamx-gnome-theme)))

;;; Commands

;;;; Desktop environment commands

(defun ceamx/gnome-set-theme (theme)
  "Set the GNOME/GTK theme to THEME."
  ;; FIXME: prompt with completion
  (interactive "s")
  (let* ((namespace ceamx-gnome-ui-namespace)
         (value (pcase theme
                  ((rx (optional "prefer-") "dark")
                    "prefer-dark")
                  ((rx (optional "prefer-") "light")
                    "prefer-light")
                  (_ "prefer-dark")))
         (cmd (format "gsettings set %s color-scheme %s" namespace value)))
    (shell-command cmd)))

(defun ceamx/gnome-dark-theme ()
  "Enable the dark GNOME/GTK theme."
  (interactive)
  (ceamx/gnome-set-theme "dark"))

(defun ceamx/gnome-light-theme ()
  "Enable the light GNOME/GTK theme."
  (interactive)
  (ceamx/gnome-set-theme "light"))

;;;; Emacs-specific commands

(defun ceamx/load-dark-theme ()
  "Load a random dark theme."
  (interactive)
  (pcase ceamx-theme-circadian-interval
    ('buffet
      (+theme-buffet--load-random-from-periods
        ceamx-theme-buffet-dark-periods))
    (_
      (load-theme ceamx-theme-default-dark :no-confirm))))

(defun ceamx/load-light-theme ()
  "Load a random light theme."
  (interactive)
  (pcase ceamx-theme-circadian-interval
    ('buffet
      (+theme-buffet--load-random-from-periods
        ceamx-theme-buffet-light-periods))
    (_
      (load-theme ceamx-theme-default-light :no-confirm))))

;;;; Global commands

(defun ceamx/light ()
  "Activate a light theme globally."
  (interactive)
  (ceamx/gnome-light-theme)
  (ceamx/load-light-theme))

(defun ceamx/dark ()
  "Activate a dark theme globally."
  (interactive)
  (ceamx/gnome-dark-theme)
  (ceamx/load-dark-theme))

(provide 'lib-ui-theme)
;;; lib-ui-theme.el ends here
#+end_src



*** Fonts/Typography

#+begin_src emacs-lisp :tangle lisp/init-ui-font.el
;;; init-ui-font.el --- Font configuration           -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; TODO: separate presets per font i.e. Berkeley Mono + Iosevka

;;; Code:

;;;; Requirements

(require 'elpaca-autoloads)

(require 'ceamx-paths)
(require 'config-env)

(require 'lib-common)
(require 'lib-ui)

;;;; General

(setq x-underline-at-descent-line nil)

(setq-default text-scale-remap-header-line t)

;;;; Use the `fontaine' package for configuring and managing font presets

;; <https://protesilaos.com/emacs/fontaine>

;; TIP: You can test out alterations quickly with, for example:
;;      (internal-set-lisp-face-attribute 'default :weight 'semilight)


(package! fontaine
  (require 'fontaine)

  (setopt fontaine-latest-state-file (expand-file-name "fontaine-latest-state.eld" ceamx-var-dir))

  ;; For some reason I do not yet understand, according to some hearsay, font
  ;; sizes best scale in multiples of 3-point increments. So, each height value
  ;; is a multiple of 3.
  (setopt fontaine-presets
    `( (small
         :bold-weight medium
         :default-height ,(pcase (system-name)
                            (_ 90))
         :default-weight ,(pcase (system-name)
                            ("tuvok" 'semilight)
                            (_ 'regular)))
       (regular)
       (medium
         :default-height ,(pcase (system-name)
                            ("boschic" 124)
                            ("tuvok"
                              120
                              ;; 115

                              )
                            (_ 120)))
       (large
         :default-height ,(pcase (system-name)
                            ;; ("tuvok" 140)
                            (_ 144))
         :default-weight semilight
         :bold-weight semibold)
       (xlarge
         :default-height ,(pcase (system-name)
                            (_ 156))
         :bold-weight bold)
       (big-mclarge-huge
         :default-weight semilight
         :default-height ,(pcase (system-name)
                            (_ 180))
         :bold-weight extrabold)
       (t
         :default-family "Iosevka Comfy"
         :default-weight regular
         :default-slant normal
         :default-height ,(pcase (system-name)
                            ("tuvok" 102)
                            (_ 105))

         :fixed-pitch-family "Iosevka Comfy"
         :fixed-pitch-weight nil
         :fixed-pitch-slant nil
         :fixed-pitch-height 1.0

         :fixed-pitch-serif-family nil
         :fixed-pitch-serif-weight nil
         :fixed-pitch-serif-slant nil
         :fixed-pitch-serif-height 1.0

         :variable-pitch-family "Iosevka Comfy Motion"
         :variable-pitch-weight nil
         :variable-pitch-slant nil
         :variable-pitch-height 1.0

         :header-line-family nil
         :header-line-height 1.0
         :header-line-slant nil
         :header-line-weight nil

         :line-number-family nil
         :line-number-height 1.0
         :line-number-slant nil
         :line-number-weight nil

         :mode-line-active-family nil
         :mode-line-active-weight nil
         :mode-line-active-slant nil
         :mode-line-active-height 1.0

         :mode-line-inactive-family nil
         :mode-line-inactive-weight nil
         :mode-line-inactive-slant nil
         :mode-line-inactive-height 1.0

         :tab-bar-family nil
         :tab-bar-weight nil
         :tab-bar-slant nil
         :tab-bar-height 1.0

         :tab-line-family nil
         :tab-line-weight nil
         :tab-line-slant nil
         :tab-line-height 1.0

         :bold-family nil
         :bold-weight medium
         ;; :bold-weight semibold
         :bold-slant nil
         :bold-height 1.0

         :italic-family nil
         :italic-weight nil
         :italic-slant italic
         :italic-height 1.0

         :line-spacing 1)))

  ;; Persist latest preset across sessions.
  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
  (add-hook 'kill-emacs-hook #'fontaine-store-latest-preset))

(elpaca-wait)

;;;; Enable improved ligature support with the `ligature.el' package

;; <https://github.com/mickeynp/ligature.el>

;; A better implementation of ligature support than the builtin `prettify-symbols-mode'.
;; <https://old.reddit.com/r/emacs/comments/keji66/what_is_bad_about_prettifysymbolsmode/>

(package! ligature
  (require 'ligature)

  ;; Enable all Iosevka ligatures in programming modes
  ;; <https://github.com/mickeynp/ligature.el/wiki#iosevka>
  (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                        "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                        "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                        ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))

  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

(provide 'init-ui-font)
;;; init-ui-font.el ends here
#+end_src



*** Modeline

#+begin_src emacs-lisp :tangle lisp/init-ui-modeline.el
;;; init-ui-modeline.el --- Modeline -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Modeline configuration

;;; Code:

(require 'lib-common)

(use-feature! emacs
  :config
  (setopt line-number-mode t)
  (setopt column-number-mode t))

(use-feature! time
  :config
  (setopt display-time-24hr-format t))

(use-package minions
  :commands (minions-mode)
  :config
  (minions-mode 1))

;;;; Show current command and its binding with `keycast'

;; <https://github.com/tarsius/keycast>

;; Supports display in the mode-line, header-line, tab-bar, and as messages in a
;; dedicated frame.

;; NOTE: Incompatible with kitchen-sink modeline packages like `doom-modeline'
;; and `telephone-line'.

(use-package keycast
  :commands (keycast-mode-line-mode)

  ;; :init
  ;; (add-hook 'ceamx-emacs-startup-hook #'keycast-mode-line-mode)

  :config
  (dolist (input '(self-insert-command org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil))))

(provide 'init-ui-modeline)
;;; init-ui-modeline.el ends here
#+end_src


**** Doom-Modeline

#+begin_src emacs-lisp :tangle lisp/init-ui-modeline-doom.el
;;; init-ui-modeline-doom.el --- doom-modeline init  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;; NOTE: be wary of performance issues, as this package is notoriously heavy
;; FIXME: darwin: icons worked inconsistently until installing
;; "Symbols Nerd Font Mono" via `nerd-icons-install-fonts'.
;; The resulting file =NFM.ttf= seems significantly different than the version
;; installed by Nix, but I'm not positive yet because the macOS Font Book app is
;; pretty difficult to work with.
;; Nerd Fonts recently released a new major version and I suspect that may factor into the issue.
;; Note, however, that the nerd-icons package uses the latest font version (v3.0.x)
;; This GitHub issue /might/ be relevant: <https://github.com/rainstormstudio/nerd-icons.el/issues/43>
(use-package doom-modeline
  :demand t
  :after (nerd-icons)
  :commands (doom-modeline-mode)

  :init
  (add-hook 'ceamx-after-init-hook #'doom-modeline-mode)

  :config
  (setopt doom-modeline-support-imenu t)
  (setopt doom-modeline-unicode-fallback t)
  (setopt doom-modeline-buffer-encoding nil)
  (setopt doom-modeline-github nil)
  (setopt doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Enable HUD mode, providing a micromap of buffer position.
  (setopt doom-modeline-hud t)

  (setopt doom-modeline-icon t)

  ;; note that the major mode icon is not missing like most others.
  ;; git branch icon is also fine.
  (setopt doom-modeline-major-mode-icon t)

  ;; FIXME: missing icons when using nix-installed icon font
  (setopt doom-modeline-buffer-state-icon t)
  (setopt doom-modeline-buffer-modification-icon t)

  (setopt doom-modeline-modal t)
  ;; FIXME: missing icon with nix-installed font... but only when non-nil?! when nil, icon displays properly...
  (setopt doom-modeline-modal-icon t))

(provide 'init-ui-modeline-doom)
;;; init-ui-modeline-doom.el ends here
#+end_src



*** Integrating the preceding interfaces

#+begin_src emacs-lisp :tangle lisp/init-after-ui.el
;;; init-after-ui.el --- Late UI configuration       -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Configuration to load after all other user interface customizations.

;; For features depending on the state of all other `init-ui-*' modules.

;;; Code:

(require 'lib-common)

;;; `spacious-padding' :: <https://protesilaos.com/emacs/spacious-padding>
(use-package spacious-padding
  :demand t
  :commands (spacious-padding-mode)
  :defines (spacious-padding-widths)

  :init
  (setopt spacious-padding-widths
    '(
       ;; NOTE: `:internal-border-width' currently breaks `tab-bar-mode'
       ;;       display on Emacs 29. Fixed in master branch.
       ;;       <https://lists.gnu.org/r/bug-gnu-emacs/2023-07/msg01594.html>
       :internal-border-width 15
       :header-line-width 4
       :mode-line-width 4
       :tab-width 4
       :right-divider-width 30
       :scroll-bar-width 8))

  :config

  ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
  ;; is very flexible.
  ;; TODO: v0.3.0 standardizes this a bit
  ;; (setq spacious-padding-subtle-mode-line
  ;;       `(:mode-line-active default     ; NOTE: assumes `modus-themes'
  ;;                           :mode-line-inactive vertical-border))

  (spacious-padding-mode 1))

(provide 'init-after-ui)
;;; init-after-ui.el ends here
#+end_src



*** Library

#+begin_src emacs-lisp :tangle lisp/lib-ui.el
;;; lib-ui.el --- General user interface library     -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://photo.stackexchange.com/questions/18494/what-is-the-difference-between-pixel-pitch-and-pixel-density>
;; <https://insights.samsung.com/2023/10/05/what-is-pixel-pitch-understanding-fine-pixel-pitch-led-displays/>

;;; Sources:

;; <https://github.com/noctuid/dotfiles/blob/master/emacs/.emacs.d/awaken.org#gui-related>

;;; Code:

;;;; Requirements

(require 'config-ui)

;;;; Constants

(defconst ceamx-inch-as-mm 25.4
  "One inch in millimeters.")

(defconst ceamx-pt-as-mm 0.353
  "One typographic point in millimeters.")

;;;; Functions

(defun ceamx-default-monitor-geometry ()
  "Return geometry for the first monitor in `display-monitor-attributes-list'."
  (let* ((first-monitor (car (display-monitor-attributes-list))))
    (alist-get 'geometry first-monitor)))

;; via <https://www.reddit.com/r/emacs/comments/7hzxb8/comment/dqywyqc/>
(defun ceamx-pixel-pitch (&optional frame)
  "Return the pixel pitch for FRAME in millimeters.
When FRAME is nil, the current frame will be used as default.

Pixel pitch is the distance from the center of a pixel to the
center of its adjacent pixel."
  (let ((monitor-attrs (frame-monitor-attributes frame)))
    (/ (float (nth 1 (assoc 'mm-size monitor-attrs)))
      (nth 3 (assoc 'geometry monitor-attrs)))))


(defun ceamx-font-height (number &optional multiplier)
  "Return a numeric font height based on NUMBER multiplied by MULTIPLIER.
NUMBER should be a whole number. MULTIPLIER should be a float.

If MULTIPLIER is nil, the value of `ceamx-font-height-multiplier'
will be used as default."
  (truncate (* number (or multiplier ceamx-font-height-multiplier))))

(provide 'lib-ui)
;;; lib-ui.el ends here
#+end_src


** Window

*** Customization

#+begin_src emacs-lisp :tangle lisp/config-window.el
;;; config-window.el --- Settings for window management  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Variables and options for window management configurations.

;;; Code:

(defcustom ceamx-fallback-buffer-name "*scratch*"
  "The name of the buffer to fall back to if no other buffers exist.
The buffer will be created if it does not exist."
  :group 'ceamx
  :type '(string))

(provide 'config-window)
;;; config-window.el ends here
#+end_src

#+begin_src emacs-lisp :tangle lisp/init-window.el
;;; init-window.el --- Window management -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; <karthink> has a helpful summary of `display-buffer' action functions and
;; alist entries in their Emacs configuration, which I am also including here
;; for my own reference. Note that this list is not necessarily complete.

;;;; display-buffer-action-functions are:
;;  `display-buffer-same-window' -- Use the selected window.
;;  `display-buffer-reuse-window' -- Use a window already showing the buffer.
;;  `display-buffer-reuse-mode-window' -- Use a window with the same major-mode.
;;  `display-buffer-in-previous-window' -- Use a window that did show the buffer before.
;;  `display-buffer-use-some-window' -- Use some existing window.
;;  `display-buffer-pop-up-window' -- Pop up a new window.
;;  `display-buffer-below-selected' -- Use or pop up a window below the selected one.
;;  `display-buffer-at-bottom' -- Use or pop up a window at the bottom of the selected frame.
;;  `display-buffer-pop-up-frame' -- Show the buffer on a new frame.
;;  `display-buffer-in-child-frame' -- Show the buffer in a child frame.
;;  `display-buffer-no-window' -- Do not display the buffer and have `display-buffer' return nil immediately.

;;;; Action alist entries are:
;;  `inhibit-same-window' -- A non-nil value prevents the same
;;     window from being used for display.
;;  `inhibit-switch-frame' -- A non-nil value prevents any frame
;;     used for showing the buffer from being raised or selected.
;;  `reusable-frames' -- The value specifies the set of frames to
;;     search for a window that already displays the buffer.
;;     Possible values are nil (the selected frame), t (any live
;;     frame), visible (any visible frame), 0 (any visible or
;;     iconified frame) or an existing live frame.
;;  `pop-up-frame-parameters' -- The value specifies an alist of
;;     frame parameters to give a new frame, if one is created.
;;  `window-height' -- The value specifies the desired height of the
;;     window chosen and is either an integer (the total height of
;;     the window), a floating point number (the fraction of its
;;     total height with respect to the total height of the frame's
;;     root window) or a function to be called with one argument -
;;     the chosen window.  The function is supposed to adjust the
;;     height of the window; its return value is ignored.  Suitable
;;     functions are `shrink-window-if-larger-than-buffer' and
;;     `fit-window-to-buffer'.
;;  `window-width' -- The value specifies the desired width of the
;;     window chosen and is either an integer (the total width of
;;     the window), a floating point number (the fraction of its
;;     total width with respect to the width of the frame's root
;;     window) or a function to be called with one argument - the
;;     chosen window.  The function is supposed to adjust the width
;;     of the window; its return value is ignored.
;;  `preserve-size' -- The value should be either (t . nil) to
;;     preserve the width of the chosen window, (nil . t) to
;;     preserve its height or (t . t) to preserve its height and
;;     width in future changes of the window configuration.
;;  `window-parameters' -- The value specifies an alist of window
;;     parameters to give the chosen window.
;;  `allow-no-window' -- A non-nil value means that `display-buffer'
;;     may not display the buffer and return nil immediately.

;;; Sources:

;; <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>

;;; Code:

;;; Requirements

(require 'transient)

(require 'config-buffer)
(require 'config-window)

(require 'lib-common)
(require 'lib-buffer)
(require 'lib-keys)
(require 'lib-window)

;;; General buffer display settings

(setopt switch-to-buffer-in-dedicated-window 'pop)

;; Ensure interactive buffer switching behaves according to expectations.
(setopt switch-to-buffer-obey-display-actions t)

;; Hide buffer until there's output.
;; Prevents an extra window appearing during init.
(setopt async-shell-command-display-buffer nil)

;; TODO: causes which-key squishing against tiny window maybe?
(setopt fit-window-to-buffer-horizontally t)

;; TODO: this might be a solution to issues with childframes for embark etc.
(setopt fit-frame-to-buffer t)

;; (setopt even-window-sizes nil)
(setopt even-window-sizes 'height-only)
(setopt window-combination-resize t)
(setopt window-sides-vertical nil)
(setopt window-resize-pixelwise t)

(setopt display-buffer-base-action
  '((display-buffer-reuse-window
      display-buffer-in-previous-window)))

;;; Declare rules for displaying buffers with `display-buffer-alist'

;; TODO: move these to config-...
(defvar ceamx-checkers-buffer-names-regexp
  (rx "*" (or "Flycheck" "Package-Lint")))

(setopt display-buffer-alist
  `(
     ;; (,(rx "*" (or "Agenda Commands" "Org Select") "*")
     ;;   (display-buffer-below-selected
     ;;     display-buffer-in-side-window)
     ;;   (body-function . select-window)
     ;;   (window-parameters . ((mode-line-format . nil))))

     (,ceamx-checkers-buffer-names-regexp
       (display-buffer-in-direction
         display-buffer-in-side-window)
       (window-parameters . ((no-other-window . t))))

     ;; TODO: is there not a simpler way than using `ceamx-buffer-mode'?
     ;; e.g. `derived-mode-p' or similar
     ((lambda (buf act) (member (ceamx-buffer-mode buf) ceamx-message-modes-list))
       (display-buffer-at-bottom
         display-buffer-in-side-window))

     (,(rx "*" (group (or "Compile-Log" "Messages" "Warnings")) "*")
       (display-buffer-at-bottom
         display-buffer-in-side-window
         display-buffer-in-direction))

     (,(rx "*Backtrace*")
       (display-buffer-in-side-window)
       (window-height . 0.2)
       (side . bottom))))

;;; Summon and dismiss "popup" windows with `popper'

;; <https://github.com/karthink/popper>

(use-package popper
  :blackout
  :functions (popper-select-popup-at-bottom)

  :preface

  (defun +popper-select-below-fn (buffer &optional _alist)
    (funcall (if (> (frame-width) 170)
               ;; #'display-buffer-in-direction
               #'popper-select-popup-at-bottom
               #'display-buffer-at-bottom)
      buffer
      `((window-height . ,popper-window-height)
         (direction . below)
         (body-function . ,#'select-window))))

  :init

  (setopt popper-reference-buffers
    (append
      ceamx-help-modes-list
      ceamx-help-buffer-names-list
      ceamx-manual-modes-list
      ceamx-repl-modes-list
      ceamx-repl-buffer-names-list
      ceamx-occur-grep-modes-list
      '(+popper-current-buffer-popup-p)
      '(Custom-mode
         compilation-mode
         messages-buffer-mode)
      (list
        ceamx-checkers-buffer-names-regexp)
      `(,(rx "Output*" eol)
         ,(rx "*" (or
                    "Async-native-compile-log"
                    "Backtrace"
                    "Compile-Log"
                    "Completions"
                    "compilation"

                    "Messages"
                    "Shell Command Output"
                    "vc"
                    "Warnings")
            "*")
         "^\\*Embark Export"
         "^Calc:"
         "\\*Async Shell Command\\*"
         ;; ("\\*Async Shell Command\\*" . hide)
         ("\\*Detached Shell Command\\*" . hide))))

  ;; Load as early as possible to catch popups during startup.
  (popper-mode)
  (popper-echo-mode)

  :config

  (define-keymap :keymap (current-global-map)
    "C-`"   #'popper-toggle
    "C-~"   #'popper-cycle
    "C-M-`" #'popper-toggle-type)
  ;; "M-`"   #'popper-echo-mode

  (defvar-keymap popper-repeat-map
    :repeat t
    "`" #'popper-cycle
    "~" #'popper-cycle-backwards)

  ;; Configure popup display control rules manually.
  ;; <https://github.com/karthink/popper/blob/master/README.org#popup-placement-controlled-using-display-buffer-alist-or-shackleel>
  (setopt popper-display-control nil)

  (prependopt! display-buffer-alist
    '((popper-display-control-p
        (ceamx-window-display-popup)
        (window-height . ,popper-window-height))))

  (after! [projectile]
    (setopt popper-group-function #'popper-group-by-projectile)))

;;; Restore previous window configurations with `winner-mode' [builtin]

(use-feature! winner
  :config (winner-mode))

;;; Toggle a window's "dedicated" flag with `dedicated-mode'

;; <https://github.com/emacsorphanage/dedicated/tree/f47b504c0c56fa5ab9d1028417ca1f65a713a2f0>

(use-package dedicated
  :defer 5
  :init
  (keymap-global-set "C-c W" #'dedicated-mode))

;;; Add "distraction-free" editing with `olivetti-mode'

;; <https://github.com/rnkn/olivetti>

(use-package olivetti
  :config
  (setopt olivetti-style 'fancy))

;;; Interactively manage windows with `ace-window'

;; <https://github.com/abo-abo/ace-window>

(use-package ace-window
  :after (avy)

  :commands (ace-window
              ace-delete-window
              ace-delete-other-windows
              ace-swap-window)

  :autoload (aw-split-window-fair
              aw-split-window-horz
              aw-split-window-vert
              aw-flip-window)

  :config

  ;; Same frame only. While it'd be nice to use the default (global), I really
  ;; dislike that it orders window numbers leads to jarring gaps in window
  ;; numbers in the same frame. For example, frame A might have windows numbered
  ;; 1 and 3 and frame B will have window 2.
  (setopt aw-scope 'frame))

(transient-define-prefix ceamx/window-dispatch ()
  "Window management transient."
  :transient-suffix 'transient--do-stay
  [["Move"
     ("h" "left" windmove-left)
     ("j" "down" windmove-down)
     ("k" "up" windmove-up )
     ("l" "right" windmove-right)
     ("w" "sel" ace-window)]

    ["Resize"
      ("=" "bal" balance-windows)
      ("+" "bal: area" balance-windows-area)
      ("-" "fit: buffer" fit-window-to-buffer)]

    ["Buffer"
      ("b" "buf" consult-buffer)
      ;; ("f" "ff: p" project-find-file)
      ("f" "file" find-file )
      ("F" "file" find-file-other-window)
      ("g" "grep" consult-ripgrep)]

    ["Swarp"
      ("H" "left" ceamx/window-move-left)
      ("J" "down" ceamx/window-move-down)
      ("K" "up" ceamx/window-move-up)
      ("L" "right" ceamx/window-move-right)
      ""
      ("s" "swap" ace-swap-window)
      ("2" "spl: dn" split-window-below)
      ("3" "spl: rt" split-window-right)
      ("SPC" "swap-or-rotate" ceamx/swap-or-rotate-windows)]

    ["Scroll"
      ;; TODO: allow selecting a window (with infix?) to act upon
      ;; NOTE: These are the correct scroll direction commands, which might
      ;; appear to be reversed when comparing with labels.
      ("." "left" scroll-right)
      ("," "right" scroll-left)
      ("SPC" "down" scroll-up)
      ("DEL" "up" scroll-down)]

    ["Lifecycle"
     ("d" "del (this)" delete-window)
     ("D" "del (select)" ace-delete-window)
     ;; ("D" "del: o" delete-other-windows :transient nil)
     ("u" "undo" winner-undo)
     ("U" "redo" winner-redo)
     ""
     ("0" "del" delete-window)
     ("1" "del other" delete-other-windows)
     ""
     ("S" "[ ] sides" window-toggle-side-windows)
     ("`" "[ ] popups" popper-toggle)
     ""
     ("q" "quit" transient-quit-all)]])

;;; Bind keys for window management

(global-keys!
  "C-x o" #'ceamx/other-window
  "C-x O" #'ace-window
  "C-x w" #'ceamx/window-dispatch

  "C-x =" #'balance-windows
  "C-x +" #'balance-windows-area

  "C-x C-n" #'next-buffer
  "C-x C-p" #'previous-buffer

  "C-x <up>" #'enlarge-window           ; also: C-x ^
  "C-x <down>" #'shrink-window
  "C-x <left>" #'shrink-window-horizontally
  "C-x <right>" #'enlarge-window-horizontally

  ;; TODO: repeat-mode
  "C-x SPC" #'ceamx/swap-or-rotate-windows)

(keys! resize-window-repeat-map
  "<up>" #'enlarge-window
  "<down>" #'shrink-window
  "<left>" #'shrink-window-horizontally
  "<right>" #'enlarge-window-horizontally)

(provide 'init-window)
;;; init-window.el ends here
#+end_src


*** Library

#+begin_src emacs-lisp :tangle lisp/lib-window.el
;;; lib-window.el --- Helpers for window management  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery
;; Copyright (C) 2023 Free Software Foundation, Inc.
;; Copyright (C) 2024  Protesilaos Stavrou

;; Author: Chris Montgomery <chris@cdom.io>
;;         Vegard Øye <vegard_oye at hotmail.com>
;;         Karthik Chikmagalur <karthik.chikmagalur@gmail.com>
;;         Protesilaos Stavrou <public@protesilaos.com>

;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Helper functions for `init-window'.

;;; Sources:

;; <https://github.com/emacs-evil/evil/blob/5995f6f21f662484440ed67a28ce59e365feb9ad/evil-commands.el>
;; <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>
;; <https://github.com/karthink/popper/blob/master/popper.el#L265-L283>

;;; Code:

;;; Requirements

(require 'windmove)

(require 'config-window)

;;; Helpers for `popper'

;; TODO: add buffers tracking files in nix store, which are only useful for
;; reference purposes, often invoked when viewing definition of low-level
;; Emacs internals defined in C code (e.g. `string-equal')
(defun +popper-current-buffer-popup-p (buf)
  "Whether the buffer BUF should be considered a popup.
This is intended for use as a predicate in `popper-reference-buffers'."
  (with-current-buffer buf
    (and (derived-mode-p 'fundamental-mode)
      (not (bound-and-true-p scratch-buffer))
      ;; Less than `max-lines' but not empty.
      (let ((lines (count-lines (point-min) (point-max)))
             (max-lines 10))
        (and (not (zerop lines))
          (< lines max-lines))))))

(defun +popper-close-focused (&rest _)
  "Close any focused `popper' popup.
Intended as a general hook function."
  (declare-function popper-toggle "popper")
  (when (bound-and-true-p popper-popup-status)
    (popper-toggle)))

;;; `display-buffer' functions

;; <https://github.com/karthink/popper/blob/570b0820f884a9c0e3d9cb07e7f7f523b39b836f/popper.el#L265-L283>

(defun ceamx-window-display-popup-at-bottom (buffer &optional alist)
  "Display popup-buffer BUFFER at the bottom of the screen.
ALIST is an association list of action symbols and values.  See
Info node `(elisp) Buffer Display Action Alists' for details of
such alists."
  (display-buffer-in-side-window
   buffer
   (append alist
           `((side . bottom)
             (slot . 1)))))

(defun ceamx-window-display-popup (buffer &optional alist)
  "Display and switch to popup-buffer BUFFER at the bottom of the screen.
ALIST is an association list of action symbols and values.  See
Info node `(elisp) Buffer Display Action Alists' for details of
such alists."
  (let ((window (ceamx-window-display-popup-at-bottom buffer alist)))
    (select-window window)))

;; via <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>
(defun +display-buffer-reuse-minor-mode-window (buffer alist)
  "Return a window sharing a minor mode with BUFFER.
ALIST is an association list of action symbols and values.  See
Info node \"(elisp) Buffer Display Action Alists\" for details of
such alists."
  (let* ((alist-entry (assq 'reusable-frames alist))
         (alist-mode-entry (assq 'minor-mode alist))
         (frames (cond (alist-entry (cdr alist-entry))
                       ((if (eq pop-up-frames 'graphic-only)
                            (display-graphic-p)
                          pop-up-frames)
                        0)
                       ;; TODO: remove or note the intention here -- not a call but
                       ;; a condition check to maintain support for the deprecated
                       ;; function. but really should be removed.
                       ;; (display-buffer-reuse-frames 0)
                       (t (last-nonminibuffer-frame))))
         (inhibit-same-window-p (cdr (assq 'inhibit-same-window alist)))
         (windows (window-list-1 nil 'nomini frames))
         (allowed-modes (if alist-mode-entry
                            (cdr alist-mode-entry)))
         (curwin (selected-window))
         (curframe (selected-frame)))
    (unless (listp allowed-modes)
      (setq allowed-modes (list allowed-modes)))
    (let ((same-mode-same-frame)
          (same-mode-other-frame))
      (dolist (window windows)
        (let ((mode?
               (with-current-buffer (window-buffer window)
                 (cl-some (lambda (m) (and (boundp m) (symbol-value m) 'same))
                          allowed-modes))))
          (when (and mode? (not (and inhibit-same-window-p (eq window curwin))))
            (push window (if (eq curframe (window-frame window))
                             same-mode-same-frame
                           same-mode-other-frame)))))
      (let ((window (car (nconc same-mode-same-frame
                                same-mode-other-frame))))
        (when (window-live-p window)
          (prog1 (window--display-buffer buffer window 'reuse alist)
            (unless (cdr (assq 'inhibit-switch-frame alist))
              (window--maybe-raise-frame (window-frame window)))))))))

;;; Macros

(defmacro with-safe-side-windows! (&rest body)
  "Toggle side windows, evaluate BODY, restore side windows.
Copied from the `evil' macro `evil-save-side-windows'."
  (declare (indent defun)
    (debug (&rest form)))
  (let ((sides (make-symbol "sidesvar")))
    `(let ((,sides (and (fboundp 'window-toggle-side-windows)
                     (window-with-parameter 'window-side))))
       ;; (declare-function window-toggle-side-windows "window")
       (when ,sides
         (window-toggle-side-windows))
       (unwind-protect
         (progn ,@body)
         (when ,sides
           (window-toggle-side-windows))))))

;;; Interactive window management

;; FIXME: "display-buffer" is misleading
;; via <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>
;;;###autoload
(defun ceamx/display-buffer-at-bottom ()
  "Move the current buffer to the bottom of the frame.
This is useful to take a buffer out of a side window.

The window parameters of this function are provided mostly for
didactic purposes."
  (interactive)
  (let ((buffer (current-buffer)))
    (with-current-buffer buffer
      (delete-window)
      (display-buffer-at-bottom
        buffer '((window-height .
                   (lambda (win)
                     (fit-window-to-buffer
                       win (/ (frame-height) 3)))))))))

;; TODO: this seems very similar to `windmove-swap-states-in-direction'...?
(defun ceamx-move-window (side)
  "Move the `selected-window' to SIDE.
The state of the `selected-window' is saved along with the state
of the window tree consisting of all the other windows. Then, all
windows are deleted, the remaining window is split according to
DIRECTION, the state of the window in DIRECTION is replace with
the saved state of the `selected-window', and, finally, the state
of the saved window tree is reconstructed on the opposite side.

SIDE has the same meaning as in `split-window'.

Copied from the `evil' function `evil-move-window'."
  (with-safe-side-windows!
    (unless (one-window-p)
      (save-excursion
        (let ((this-window-state (window-state-get (selected-window))))
          (delete-window)
          (let ((window-tree (window-state-get)))
            (delete-other-windows)
            (let ((sub-window (selected-window))
                  (new-window (ceamx--split-window-in-direction side)))
              (window-state-put window-tree sub-window)
              (window-state-put this-window-state new-window)
              (select-window new-window)))))
      (balance-windows))))

;; via <https://github.com/doomemacs/doomemacs/blob/ff33ec8f7a89d168ca533612e2562883c89e029f/modules/editor/evil/autoload/evil.el#L42-L73>
(defun ceamx--window-swap-or-split (direction)
  "Move current window to the next window in DIRECTION.
If there are no windows in DIRECTION and there is only one window
in the current frame, split the window in DIRECTION and place
this window there."
  (let* ((this-window (selected-window))
         (that-window (window-in-direction direction this-window)))
    (unless that-window
      (setq that-window (split-window this-window nil direction))
      (with-selected-window that-window
        (switch-to-buffer ceamx-fallback-buffer-name)))
    (window-swap-states this-window that-window)
    (select-window that-window)))

(defun ceamx/window-move-left ()
  "Swap or move selected window to the left."
  (interactive)
  (ceamx--window-swap-or-split 'left))

(defun ceamx/window-move-right ()
  "Swap or move selected window to the right."
  (interactive)
  (ceamx--window-swap-or-split 'right))

(defun ceamx/window-move-up ()
  "Swap or move selected window upwards."
  (interactive)
  (ceamx--window-swap-or-split 'up))

(defun ceamx/window-move-down ()
  "Swap or move selected window downwards."
  (interactive)
  (ceamx--window-swap-or-split 'down))

(defun ceamx/split-window (&optional count direction file)
  "TODO"
  (interactive "P\nS\nf")
  (select-window
    (split-window (selected-window)
      (when count (- count))
      direction))
  ;; (when (and (not count)
  ;;         ceamx-window-auto-balance)
  ;;   (balance-windows (window-parent)))
  (when file
    (find-file file)))

(defun ceamx/split-window-with-buffer (buffer)
  "Split window and switch to BUFFER.
If BUFFER is not the name of an existing buffer, then a new
buffer will be created with that name."
  (interactive "b")
  (ceamx/split-window)
  (switch-to-buffer buffer))

(defun ceamx/split-window-with-next-buffer ()
  "Split window and switch to the next buffer in the buffer list."
  (interactive)
  (ceamx/split-window-with-buffer (next-buffer)))

(defun ceamx/split-window-with-prev-buffer ()
  "Split window and switch to the previous buffer in the buffer list."
  (interactive)
  (ceamx/split-window-with-buffer (previous-buffer)))

(defun ceamx/buffer-create (&optional file)
  "Edit a new unnamed buffer or open FILE.
When called interactively, prompt the user for FILE."
  (interactive "F")
  (if file
    (find-file file)
    (let ((buffer (generate-new-buffer "*new*")))
      (set-buffer-major-mode buffer)
      (set-window-buffer nil buffer))))

(defun ceamx/window-increase-height (count)
  "Increase window height by COUNT."
  (interactive "p")
  (enlarge-window count))

(defun ceamx/window-decrease-height (count)
  "Decrease window height by COUNT."
  (interactive "p")
  (enlarge-window (- count)))

(defun ceamx/window-increase-width (count)
  "Increase window width by COUNT."
  (interactive "p")
  (enlarge-window count t))

(defun ceamx/window-decrease-width (count)
  "Decrease window width by COUNT."
  (interactive "p")
  (enlarge-window (- count) t))

;; via <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/prot-lisp/prot-simple.el#L800C1-L814C68>
;;;###autoload
(defun ceamx/swap-or-rotate-windows (counter)
  "Swap states of live buffers.
With two windows, transpose their buffers.  With more windows,
perform a clockwise rotation.  Do not alter the window layout.
Just move the buffers around.

With COUNTER as a prefix argument, do the rotation
counter-clockwise."
  (interactive "P")
  (when-let* ((winlist (if counter (reverse (window-list)) (window-list)))
               (wincount (count-windows))
               ((> wincount 1)))
    (dotimes (i (- wincount 1))
      (window-swap-states (elt winlist i) (elt winlist (+ i 1))))))

;; via <https://github.com/protesilaos/dotfiles/blob/24670bf47f7aaefc9bb2613d090cc9113acd6d48/emacs/.emacs.d/prot-lisp/prot-simple.el#L590C1-L601C41>
;;;###autoload
(defun ceamx/other-window ()
  "Wrapper for `other-window' and `next-multiframe-window'.
If there is only one window and multiple frames, call
`next-multiframe-window'.  Otherwise, call `other-window'."
  (interactive)
  (if (and (one-window-p) (length> (frame-list) 1))
      (progn
        (call-interactively #'next-multiframe-window)
        (setq this-command #'next-multiframe-window))
    (call-interactively #'other-window)
    (setq this-command #'other-window)))

(provide 'lib-window)
;;; lib-window.el ends here
#+end_src


** Buffer

*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-buffer.el
;;; init-buffer.el --- Buffers configuration         -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Buffers of all shapes and sizes.

;; TODO: <https://github.com/abo-abo/avy/wiki/custom-commands>

;;; Code:

;;;; Requirements

(require 'elpaca-autoloads)

(require 'lib-common)
(require 'lib-keys)
(require 'lib-buffer)

;;;; General

(setq-default indicate-empty-lines nil)
(setq-default fill-column 80)

(use-feature! emacs
  :config

  ;; Available cycle positions for `recenter-top-bottom'.
  (setopt recenter-positions '(middle top bottom))

  ;; Disable buffer line wrapping by default.
  (set-default 'truncate-lines t)

;;;;; Scrolling

  (setopt scroll-error-top-bottom t)
  ;; (setopt scroll-preserve-screen-position t)
  ;;(setopt scroll-conservatively 101)
  ;;(setopt scroll-preserve-screen-position nil)

  ;; Add a margin when scrolling vertically (or don't).
  (setq-default scroll-margin 4)

  (global-keys!
    ;; The default bindings feel backwards to me.
    "C-x <" #'scroll-right
    "C-x >" #'scroll-left

    "<wheel-left>" #'scroll-left
    "<wheel-right>" #'scroll-right)

;;;;; Auto-revert buffers

  ;; Ensure the non-file-visiting buffers are also auto-reverted as needed. For
  ;; example, this will cause Dired to refresh a file list when the directory
  ;; contents have changed.
  (setopt global-auto-revert-non-file-buffers t)

  ;; (setopt auto-revert-interval 0.01)

  ;; Automatically revert a buffer if its file has changed on disk.
  (global-auto-revert-mode t)

;;;;; Buffer selection

  (keymap-global-set "<remap> <list-buffers>" #'ibuffer-list-buffers)

  (setopt ibuffer-movement-cycle t))

;;;; Enable highlighting of the current line with `hl-line' [builtin]

(use-feature! hl-line
  :commands (hl-line-mode)
  :init
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'package-menu-mode-hook #'hl-line-mode))

;;;; Linkify URLs and email addresses in buffers with `goto-address' [builtin]

(use-feature! goto-addr
  :config
  (add-hook 'prog-mode-hook #'goto-address-prog-mode))

;;;; Disambiguate identically-named buffers with `uniquify' [builtin]

(use-feature! uniquify
  :config
  (setopt uniquify-buffer-name-style 'forward)
  (setopt uniquify-separator "/")
  ;; Rename after killing uniquified buffer.
  (setopt uniquify-after-kill-buffer-p t)
  ;; Don't muck with special buffers.
  (setopt uniquify-ignore-buffers-re "^\\*"))

;;;; Activate links in buffer with an `avy'-like UI via the `link-hint' package

;; <https://github.com/noctuid/link-hint.el>

(package! link-hint
  (global-keys!
    "M-g u" #'link-hint-open-link
    "M-g U" #'link-hint-copy-link))

;;;; `expand-region' :: <https://github.com/magnars/expand-region.el>

(package! expand-region
  (keymap-global-set "C-=" #'er/expand-region))

;;;; Enable simple comment-based outline features in many modes with `outli'

;; <https://github.com/jdtsmith/outli>

;; NOTE: In `emacs-lisp-mode' buffers, `outli-mode' should be enabled *after*
;; `lispy-mode'. See the package configuration for `lispy'.

(package! (outli :host github :repo "jdtsmith/outli")
  (def-hook! +outli-mode-maybe-enable-h ()
    '(prog-mode-hook text-mode-hook)
    "Enable `outli-mode' conditionally, excluding some modes."
    (let ((exclude-modes '(emacs-lisp-mode))
          (excludep (lambda (excluded-mode)
                      (eq major-mode excluded-mode))))
      (unless (seq-some excludep exclude-modes)
        (outli-mode))))

  (after! 'outli
    ;; FIXME: function definition is void -- from readme:
    ;; (advice-add 'load-theme :after #'outli-reset-all-faces)

    (define-keymap :keymap outli-mode-map
      "C-c C-n" #'outline-next-heading
      "C-c C-p" #'outline-previous-heading
      "C-c M-h" #'outline-promote
      "C-c M-l" #'outline-demote)))

;;; Colorize color names and hexcodes in buffers via `rainbow-mode'

;; <https://elpa.gnu.org/packages/rainbow-mode.html>

(package! rainbow-mode)

;;; Global Keybindings

(global-keys!
  "C-c [" #'previous-buffer
  "C-c ]" #'next-buffer
  "C-c `" #'mode-line-other-buffer)

(provide 'init-buffer)
;;; init-buffer.el ends here
#+end_src

*** Library

#+begin_src emacs-lisp :tangle lisp/lib-buffer.el
;;; lib-buffer.el --- Helpers for buffers            -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

;;;###autoload
(defun ceamx-buffer-mode (&optional buffer-or-name)
  "Return the major mode associated with a buffer.
If BUFFER-OR-NAME is nil, return the current buffer's mode."
  (buffer-local-value 'major-mode
                      (if buffer-or-name
                          (get-buffer buffer-or-name)
                        (current-buffer))))

(provide 'lib-buffer)
;;; lib-buffer.el ends here
#+end_src

*** User Options

#+begin_src emacs-lisp :tangle lisp/config-buffer.el
;;; config-buffer.el --- Variables relating to buffers and modes  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Sources:

;; <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>

;;; Code:

(defvar ceamx-occur-grep-modes-list
  '(occur-mode
     grep-mode
     xref--xref-buffer-mode
     flymake-diagnostics-buffer-mode)
  "List of major-modes used in occur-type buffers.")

(defvar ceamx-repl-modes-list
  '(eshell-mode
    inferior-emacs-lisp-mode            ; ielm
    shell-mode
    eat-mode
    nix-repl-mode)
  "List of major-modes used in REPL buffers.")

(defvar ceamx-repl-buffer-names-list
  '("^\\*\\(?:.*?-\\)\\{0,1\\}e*shell[^z-a]*\\(?:\\*\\|<[[:digit:]]+>\\)$"
    "\\*.*REPL.*\\*"
    "\\*Inferior .*\\*$"
    "\\*ielm\\*"
    "\\*edebug\\*")
  "List of buffer names used in REPL buffers.")

(defvar ceamx-help-modes-list
  '(helpful-mode
     help-mode
     eldoc-mode)
  "List of major-modes used in documentation buffers.")

(defvar ceamx-help-buffer-names-list
  '("^\\*Apropos"
     "^\\*eldoc\\*")
  "List of buffer names used in help buffers.")

(defvar ceamx-manual-modes-list '(Man-mode woman-mode)
  "List of major-modes used in Man-type buffers.")

(defvar ceamx-message-modes-list
  '(compilation-mode
    edebug-eval-mode)
  "List of major-modes used in message buffers.")

(provide 'config-buffer)
;;; config-buffer.el ends here
#+end_src


** Editor

*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-editor.el
;;; init-editor.el --- Editing --- -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Configuration applicable across all editable buffers.

;;; Investigate:

;; TODO: <https://github.com/tarsius/killer/blob/ace0547944933440384ceeb5876b1f68c082d540/killer.el>

;;; Code:

;;; Requirements

(require 'ceamx-keymaps)

(require 'config-editor)

(require 'lib-common)
(require 'lib-editor)
(require 'lib-keys)
(require 'lib-simple)

;;; Enable some commands that Emacs disables by default

(dolist (cmd '(downcase-region
                scroll-left
                upcase-region))
  (put cmd 'disabled nil))

;;; Bind the insertable keymap

(keymap-global-set "C-c i" #'ceamx-insert-map)

;;; Configure builtin features

;; Replace region when inserting text.
(delete-selection-mode 1)

;;;; Improve sentence legibility and parsing with double-spaced ending

;; Yes, it may appear strange and archaic, and yet... I realized that I actually
;; do *prefer* this for readability.  And so, I am giving it a shot.  My
;; grandfather, who was an English teacher for most of the 20th century, would
;; be very proud.  Though even writing this paragraph has been difficult.

(setopt sentence-end-double-space t)

(keymap-global-set "M-Q" #'repunctuate-sentences)

;;;; Don't consider camelCaseWORDs as separate words

(global-subword-mode -1)

;;;; Automatically wrap text at `fill-column' in some contexts

;; When a mode defines a comment syntax, then only wrap those comments. In all
;; other modes (primarily `text-mode' derivatives), activating
;; `auto-fill-mode' will apply to all lines.
(setopt comment-auto-fill-only-comments t)

(dolist (mode-hook '(prog-mode-hook text-mode-hook))
  (add-hook mode-hook #'auto-fill-mode))

;;;; Comments

(keymap-global-set "<remap> <default-indent-new-line>" #'ceamx/continue-comment)

;;;; Semantic Pair Matching

;; See `(info "Matching")' for more details.

(setopt blink-matching-paren t)
;; Avoid "expression" style, which looks too much like a selected region.
(setopt show-paren-style 'parenthesis)

(setopt electric-pair-preserve-balance t)
(setopt electric-pair-delete-adjacent-pairs t)
(setopt electric-pair-skip-whitespace t)
;; TODO: evaluating...
(setopt electric-pair-open-newline-between-pairs t)

(electric-pair-mode 1)
(show-paren-mode 1)

;;;;; Set up a keymap for common usages of `insert-pair'

(keys! ceamx-pairs-map
  "(" '("paren" . insert-pair)
  "[" '("square-b" . insert-pair)
  "{" '("curly-b" . insert-pair)
  "<" '("angle-b" . insert-pair)
  "'" '("s-quote" . insert-pair)
  "\"" '("d-quote" . insert-pair)
  "`" '("b-tick" . insert-pair)
  "_" '("u-score" . insert-pair)
  "*" '("star" . insert-pair)
  "=" '("equals" . insert-pair)
  ":" '("colon" . insert-pair))

(keymap-set ceamx-insert-map "P" ceamx-pairs-map)

;;; Formatting

(setopt require-final-newline t)

;;;; Visualize whitespace with `whitespace-mode'

;;  This mode is buffer-local. It might be undesireable in some cases, so enable
;;  it selectively.

(add-hook 'prog-mode-hook #'whitespace-mode)

(setopt whitespace-style
        '(face
          tabs
          tab-mark
          trailing
          missing-newline-at-eof))

;;;; Indentation

(setq-default indent-tabs-mode nil)
(setopt indent-tabs-mode nil)
(setopt backward-delete-char-untabify-method 'untabify)

;;;;; Handle automatic indentation with `electric-indent-mode'

(electric-indent-mode 1)

;;;; Trailing whitespace

(add-hook 'before-save-hook #'delete-trailing-whitespace)

;;;; Add support for EditorConfig

;; <https://editorconfig.org>

(use-package editorconfig
  :commands (editorconfig-mode)
  :init
  (add-hook 'on-first-file-hook #'editorconfig-mode))

;;;; Apply opinionated code reformatting with `apheleia'

;; <https://github.com/radian-software/apheleia>

;; In case you run into issues with `web-mode' not updating syntax highlighting
;; after formatting (or other arbitrary modifications):
;; <https://github.com/doomemacs/doomemacs/blob/35dc13632b3177b9efedad212f2180f69e756853/modules/editor/format/config.el#L74-L83>

(use-package apheleia
  :blackout ceamx-apheleia-lighter
  :preface

  (defun +apheleia-format-maybe-inhibit-h ()
    "Check if formatting should be disabled for current buffer."
    (or (eq major-mode 'fundamental-mode)
        (string-blank-p (buffer-name))
        (eq ceamx-format-on-save-disabled-modes t)
        (not (null (memq major-mode ceamx-format-on-save-disabled-modes)))))

  :init
  (apheleia-global-mode 1)

  ;; via <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L2266-L2270>
  (def-advice! +apheleia-save-buffer-maybe-reformat-a (func &optional arg)
    :around #'save-buffer
    "Inhibit reformatting-on-save when providing a prefix argument to \\[save-buffer]."
    (let ((apheleia-mode (and apheleia-mode (member arg '(nil 1)))))
      (funcall func)))

  ;; "We need to do this both before and after Apheleia is loaded
  ;; because the autoloading is set up such that the minor mode
  ;; definition is evaluated twice."
  ;; <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L2272C1-L2275>
  (blackout 'apheleia-mode ceamx-apheleia-lighter)

  :config
  (add-to-list 'apheleia-inhibit-functions #'+apheleia-format-maybe-inhibit-h))

;;; Enable structured editing with `puni'

;; <https://github.com/AmaiKinono/puni>

(use-package puni
  :commands (puni-global-mode
              puni-disable-puni-mode
              puni-backward-sexp-or-up-list
              puni-forward-sexp-or-up-list)

  :init
  (define-keymap :keymap puni-mode-map
    "C-M-f" #'puni-forward-sexp
    "C-M-b" #'puni-backward-sexp
    "C-M-a" #'puni-beginning-of-sexp
    "C-M-e" #'puni-end-of-sexp
    "C-M-[" #'puni-backward-sexp-or-up-list
    "C-M-]" #'puni-forward-sexp-or-up-list

    "M-(" #'puni-syntactic-forward-punct
    "M-)" #'puni-syntactic-backward-punct
    )

  ;; (puni-global-mode)
  (add-hook 'term-mode-hook #'puni-disable-puni-mode))

;;; Transposition

;;;; Drag stuff around in arbitrary directions with `drag-stuff'

;; <https://github.com/rejeep/drag-stuff.el>

;;  This package appears to be abandoned since 2017.
;;  But, as of <2023-09-06>, it still works well.

;;;;; Issues

;; Note that as of [2023-07-20] there are numerous warnings about deprecated functions in
;; recent versions of Emacs:

;; <https://github.com/rejeep/drag-stuff.el/issues/36>

;;;;;; Alternatives

;; I haven't yet found any other package to move arbitrary regions up/down while
;; preserving column position.

;; `move-text-mode' <https://github.com/emacsfodder/move-text>, claims to do
;; this but fails pretty badly, moving the region/selection to the first column
;; regardless of its original position.

(use-package drag-stuff
  :bind
  (([M-up] . drag-stuff-up)
    ([M-right] . drag-stuff-right)
    ([M-down] . drag-stuff-down)
    ([M-left] . drag-stuff-left)))

;;; Operate on a buffer rectangularly

(use-feature! rect
  :config
  (use-feature! hydra
    :config
    ;; via <https://github.com/abo-abo/hydra/wiki/Rectangle-Operations#rectangle-2>
    (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                         :color pink
                                         :hint nil
                                         :post (deactivate-mark))
      "
  ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
_h_   _l_     _y_ank        _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
  ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
^^^^          _u_ndo        _g_ quit     ^ ^                     '---''(./..)-'(_\_)
"
      ("k" rectangle-previous-line)
      ("j" rectangle-next-line)
      ("h" rectangle-backward-char)
      ("l" rectangle-forward-char)
      ("d" kill-rectangle)               ;; C-x r k
      ("y" yank-rectangle)               ;; C-x r y
      ("w" copy-rectangle-as-kill)       ;; C-x r M-w
      ("o" open-rectangle)               ;; C-x r o
      ("t" string-rectangle)             ;; C-x r t
      ("c" clear-rectangle)              ;; C-x r c
      ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
      ("N" rectangle-number-lines)            ;; C-x r N
      ("r" (if (region-active-p)
               (deactivate-mark)
             (rectangle-mark-mode 1)))
      ("u" undo nil)
      ("g" nil))

    (when (fboundp 'hydra-rectangle/body)
      (keymap-global-set "C-x M-r" #'hydra-rectangle/body))

    ;; Free up its original coveted C-x SPC binding.
    (keymap-global-set "C-x M-R" #'rectangle-mark-mode)))

;;; Add support for Sublime-like multi-cursor editing with `multiple-cursors'

;; <https://github.com/magnars/multiple-cursors.el>

(use-package multiple-cursors
  :demand t
  ;; :autoload (mc/num-cursors)

  :config

  (use-feature! hydra
    :config

    ;; TODO: convert to transient
    (defhydra hydra-multiple-cursors (:hint nil)
      "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
 [_|_] Align with input CHAR       [Click] Cursor at point"
      ("l" mc/edit-lines :exit t)
      ("a" mc/mark-all-like-this :exit t)
      ("n" mc/mark-next-like-this)
      ("N" mc/skip-to-next-like-this)
      ("M-n" mc/unmark-next-like-this)
      ("p" mc/mark-previous-like-this)
      ("P" mc/skip-to-previous-like-this)
      ("M-p" mc/unmark-previous-like-this)
      ("|" mc/vertical-align)
      ("s" mc/mark-all-in-region-regexp :exit t)
      ("0" mc/insert-numbers :exit t)
      ("A" mc/insert-letters :exit t)
      ("<mouse-1>" mc/add-cursor-on-click)
      ;; Help with click recognition in this hydra
      ("<down-mouse-1>" ignore)
      ("<drag-mouse-1>" ignore)
      ("q" nil))))

;;; Keybindings

(keymap-set ceamx-insert-map "d" #'ceamx/insert-date)

(global-keys!
  "C-=" #'ceamx/insert-date
  "C-<" #'ceamx/escape-url-dwim

    ;; Logical progression from M-f for `forward-word'.
  ;; See also `forward-sexp'
  "M-F" #'forward-symbol)

(provide 'init-editor)
;;; init-editor.el ends here
#+end_src


*** User Options

#+begin_src emacs-lisp :tangle lisp/config-editor.el
;;; config-editor.el --- Settings for the editor     -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(defcustom ceamx-format-on-save-disabled-modes
  '(emacs-lisp-mode                     ; conflict with `lispy' indent
    org-msg-edit-mode)
  "A list of major modes in which to not reformat the buffer upon saving.
When nil, buffers will always be formatted upon save. When
non-nil, buffers will never be formatted upon save."
  :group 'ceamx
  :type '(choice boolean (repeat symbol)))

(defvar ceamx-apheleia-lighter " Aph")

(provide 'config-editor)
;;; config-editor.el ends here
#+end_src


*** Library

#+begin_src emacs-lisp :tangle lisp/lib-editor.el
;;; lib-editor.el --- Editor library functions       -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery
;; Copyright (C) 2016–2022  Radian LLC and contributors

;; Author: Chris Montgomery <chris@cdom.io>
;;         Radon Rosborough <radon@intuitiveexplanations.com>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to deal
;; in the Software without restriction, including without limitation the rights
;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:

;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.

;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;; SOFTWARE.

;;; Commentary:

;; Functions for general editor configuration.

;;; Sources:

;; - <https://github.com/radian-software/radian/blob/develop/emacs/radian.el#L2174-L2214>

;;; Code:

;; via <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L1781-L1797>
(defun ceamx/continue-comment ()
  "Continue current comment, preserving trailing whitespace.
This differs from `default-indent-new-line' in the following way:

If you have a comment like \";; Some text\" with point at the end
of the line, then running `default-indent-new-line' will get you
a new line with \";; \", but running it again will get you a line
with only \";;\" (no trailing whitespace). This is annoying for
inserting a new paragraph in a comment. With this command, the
two inserted lines are the same."
  (interactive)
  ;; `default-indent-new-line' uses `delete-horizontal-space'
  ;; because in auto-filling we want to avoid the space character at
  ;; the end of the line from being put at the beginning of the next
  ;; line. But when continuing a comment it's not desired.
  (cl-letf (((symbol-function #'delete-horizontal-space) #'ignore))
    (default-indent-new-line)))

(provide 'lib-editor)
;;; lib-editor.el ends here
#+end_src


** Files

*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-files.el
;;; init-files.el --- File handling -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for file handling

;;; Code:

;;; Requirements

(require 'ceamx-keymaps)
(require 'ceamx-paths)

(require 'lib-common)
(require 'lib-files)
(require 'lib-keys)

;;; Manage backup files and prevent file-lock clutter

;; TODO: enable file locks in TRAMP?

(setopt create-lockfiles nil)
(setopt make-backup-files nil)

(when make-backup-files
  (setopt version-control t)
  (setopt delete-old-versions t)
  (setopt kept-new-versions 5)
  (setopt kept-old-versions 5))

(setopt delete-by-moving-to-trash t)

;;; Add file headers to new files

(use-feature! autoinsert
  :config
  (auto-insert-mode t))

;;; Configure finding of files

(setopt find-file-suppress-same-file-warnings t)

(setopt find-file-visit-truename t)

;; TODO: move elsewhere
(use-feature! xref
  :config
  ;; Always find references of symbol at point.
  (setopt xref-prompt-for-identifier nil))

;;;; Prompt to create missing parent directories for not-found files

;; <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/doom-editor.el#L78-L89>

(defun ceamx-create-missing-directories-h ()
  "Automatically create missing directories when creating new files."
  (unless (file-remote-p buffer-file-name)
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (and (not (file-directory-p parent-directory))
        (y-or-n-p (format "Directory `%s' does not exist! Create it?"
                    parent-directory))
        (progn (make-directory parent-directory 'parents)
          t)))))

(add-hook 'find-file-not-found-functions #'ceamx-create-missing-directories-h)

;;; Configure auto-saving of file-visiting buffers

;; Prevent creation of the list of all auto-saved files.
(setopt auto-save-list-file-prefix nil)

;; Number of input events before autosave
(setopt auto-save-interval 300)

;; Idle interval for all file-visiting buffers
(setopt auto-save-visited-interval 30)

;; Idle interval before autosave
(setopt auto-save-timeout 30)

;; Don't create auto-save "~" files.
(setopt auto-save-default nil)

;; Save file-visiting buffers according to the configured timers.
(auto-save-visited-mode)

;;; Set the list of safe local variable values

(setopt safe-local-variable-values
        '((eval load-file "./ceamx-dev-loader.el")))

;;; Keybindings

(global-keys!
  "C-c f" '("[ File ]" . ceamx-file-map)
  "C-c C-f" '("[ File ]" . ceamx-file-map)

  ;; I mistakenly hit this sequence frequently instead of C-x C-f, but have never
  ;; once needed to configure `fill-column' on-demand (that should be configured
  ;; explicitly, or simply call `set-fill-column' with M-x).
  "C-x f" #'find-file)

(keys! ceamx-file-map
  ;; TODO
  ;; "y" #'+yank-this-file-name

  "c" '("copy..." . ceamx/copy-this-file)
  "d" '("delete" . ceamx/delete-this-file)
  "f" #'find-file
  "F" #'find-file-other-window
  "r" '("rename/move..." . ceamx/move-this-file)
  "s" #'save-buffer
  "S" '("save as..." . write-file)
  "U" #'ceamx/sudo-find-file

  "C-d" '("diff with..." . ceamx/diff-with-file))

(provide 'init-files)
;;; init-files.el ends here
#+end_src


*** Library

#+begin_src emacs-lisp :tangle lisp/lib-files.el
;;; lib-files.el --- File helpers -*- lexical-binding: t -*-

;; Copyright (C) 2022-2024  Chris Montgomery <chris@cdom.io>
;; Copyright (C) 2014-2022  Henrik Lissner
;; Copyright (C) 2006-2021  Steve Purcell
;; Copyright (C) 2008-2024  Jonas Bernoulli
;; SPDX-License-Identifier: GPL-3.0-or-later AND MIT AND BSD-2-Clause

;; Author: Henrik Lissner
;;         Vegard Øye <vegard_oye at hotmail.com>
;;         Steve Purcell
;;         Chris Montgomery <chris@cdom.io>
;;         Jonas Bernoulli <jonas@bernoul.li>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Created: 23 January 2023
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:

;;  Helper functions for working with files.

;;; Code:

(require 'cl-lib)

;; FIXME: is this supposed to work on save? not working in either magit or projectile
;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L369-L391>
(defun ceamx-files--update-refs (&rest files)
  "Ensure FILES are updated in `recentf', `magit' and `save-place'."
  (let (toplevels)
    (dolist (file files)
      (when (featurep 'vc)
        (vc-file-clearprops file)
        (when-let (buffer (get-file-buffer file))
          (with-current-buffer buffer
            (vc-refresh-state))))
      (when (featurep 'magit)
        (when-let (default-directory (magit-toplevel (file-name-directory file)))
          (cl-pushnew default-directory toplevels)))
      (unless (file-readable-p file)
        (when (bound-and-true-p recentf-mode)
          (recentf-remove-if-non-kept file))
        (when (and
               (bound-and-true-p projectile-mode)
               ;; FIXME: de-doom
               ;; (doom-project-p)
               ;; (projectile-file-cached-p file (doom-project-root))
               )
          (projectile-purge-file-from-cache file)))
      )
    (dolist (default-directory toplevels)
      (magit-refresh))
    (when (bound-and-true-p save-place-mode)
      (save-place-forget-unreadable-files))))

;;
;;; Commands
;;

;; via <https://github.com/emacs-evil/evil/blob/9eb69b7f5b3c72cfc66f69b3242e935015780654/evil-commands.el#L3325-L3332>
(defun ceamx/file-edit (file &optional bang)
  "Open FILE.
If no FILE is specified, reload the current buffer from disk."
  :repeat nil
  (interactive "<f><!>")
  (if file
      (find-file file)
    (revert-buffer bang (or bang (not (buffer-modified-p))) t)))

;; via <https://github.com/emacs-evil/evil/blob/9eb69b7f5b3c72cfc66f69b3242e935015780654/evil-commands.el#L4652-L4660>
(defun ceamx/buffer-new (&optional file)
  "Edit a new unnamed buffer or FILE."
  :repeat nil
  (interactive "<f>")
  (if file
      (ceamx/file-edit file)
    (let ((buffer (generate-new-buffer "*new*")))
      (set-buffer-major-mode buffer)
      (set-window-buffer nil buffer))))

;; FIXME: this does not actually kill its buffers -- buffer must be deleted manually
;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L397-L424>
(defun ceamx/delete-this-file (&optional path force-p)
  "Delete PATH, kill its buffers and expunge it from vc/magit cache.
If PATH is not specified, default to the current buffer's file.
If FORCE-P, delete without confirmation."
  (interactive
   (list (buffer-file-name (buffer-base-buffer))
         current-prefix-arg))
  (let* ((path (or path (buffer-file-name (buffer-base-buffer))))
         (short-path (and path (abbreviate-file-name path))))
    (unless path
      (user-error "Buffer is not visiting any file"))
    (unless (file-exists-p path)
      (error "File doesn't exist: %s" path))
    (unless (or force-p (y-or-n-p (format "Really delete %S?" short-path)))
      (user-error "Aborted"))
    (let ((buf (current-buffer)))
      (unwind-protect
          (progn (delete-file path t) t)
        (if (file-exists-p path)
            (error "Failed to delete %S" short-path)
          ;; Ensures that windows displaying this buffer will be switched to
          ;; real buffers (`doom-real-buffer-p')
          ;; FIXME: implement -- invent the universe -- but the stuff within is very useful to us (e.g. doom-real-buffer-p and filtering buffers)...
          ;; (doom/kill-this-buffer-in-all-windows buf t)
          ;; TODO: remove when the above is implemented -- `kill-this-buffer' only removes the one buffer
          (kill-this-buffer)
          (ceamx-files--update-refs path)
          (message "Deleted %S" short-path))))))

;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L427-L441>
(defun ceamx/copy-this-file (new-path &optional force-p)
  "Copy current buffer's file to NEW-PATH.
If FORCE-P, overwrite the destination file if it exists, without confirmation."
  (interactive
   (list (read-file-name "Copy file to: ")
         current-prefix-arg))
  (unless (and buffer-file-name (file-exists-p buffer-file-name))
    (user-error "Buffer is not visiting any file"))
  (let ((old-path (buffer-file-name (buffer-base-buffer)))
        (new-path (expand-file-name new-path)))
    (make-directory (file-name-directory new-path) 't)
    (copy-file old-path new-path (or force-p 1))
    (ceamx-files--update-refs old-path new-path)
    (message "File copied to %S" (abbreviate-file-name new-path))))


;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/lib/files.el#L427-L441>
(defun ceamx/move-this-file (new-path &optional force-p)
  "Move current buffer's file to NEW-PATH.
If FORCE-P, overwrite the destination file if it exists, without confirmation."
  (interactive
   (list (read-file-name "Move file to: ")
         current-prefix-arg))
  (unless (and buffer-file-name (file-exists-p buffer-file-name))
    (user-error "Buffer is not visiting any file"))
  (let ((old-path (buffer-file-name (buffer-base-buffer)))
        (new-path (expand-file-name new-path)))
    (when (directory-name-p new-path)
      (setq new-path (concat new-path (file-name-nondirectory old-path))))
    (make-directory (file-name-directory new-path) 't)
    (rename-file old-path new-path (or force-p 1))
    (set-visited-file-name new-path t t)
    (ceamx-files--update-refs old-path new-path)
    (message "File moved to %S" (abbreviate-file-name new-path))))

;; via <https://github.com/noctuid/dotfiles/blob/434ddb77c4b40f4b7ab2246cc2254aa4f408b16f/emacs/.emacs.d/awaken.org>
(defun ceamx/kill-this-buffer ()
  "`kill-this-buffer' with no menu-bar checks.
`kill-this-buffer' is supposed to be called from the menu bar.
See <https://www.reddit.com/r/emacs/comments/64xb3q/killthisbuffer_sometimes_just_stops_working/>."
  (interactive)
  (if (minibufferp)
      (abort-recursive-edit)
    (kill-buffer (current-buffer))))

(defun ceamx/diff-with-file (&optional arg)
  (interactive "P")
  (let ((buffer (when arg (current-buffer))))
    (diff-buffer-with-file buffer)))

;; via <https://github.com/tarsius/fwb-cmds/blob/88e823809067983acfaeafa57d0bb6e889429ad2/fwb-cmds.el#L140C1-L156C78>
;;;###autoload
(defun ceamx/sudo-find-file (&optional arg)
  "Edit the visited file as \"root\".
If the current buffer does not visit a file, the visited file is
writable or with a prefix argument, then read a file to visit."
  (interactive "P")
  (require 'tramp)
  (if (or arg
        (not buffer-file-name)
        (file-writable-p buffer-file-name))
    (let ((default-directory
            (concat "/sudo:root@localhost:" default-directory)))
      (apply #'find-file
        (find-file-read-args
          "Find file: "
          (confirm-nonexistent-file-or-buffer))))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

;; ;;;###autoload
;; (defun doom/remove-recent-file (file)
;;   "Remove FILE from your recently-opened-files list."
;;   (interactive
;;    (list (completing-read "Remove recent file: " recentf-list
;;                           nil t)))
;;   (setq recentf-list (delete file recentf-list))
;;   (recentf-save-list)
;;   (message "Removed %S from `recentf-list'" (abbreviate-file-name file)))

(provide 'lib-files)
;;; lib-files.el ends here
#+end_src


** Workspace

#+begin_src emacs-lisp :tangle lisp/init-workspace.el
;;; init-workspace.el --- Workspaces and perspectives  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Overwork and perspipritaction.

;; FIXME: `tab-bar-mode' is currently broken due to upstream Emacs 29 bug
;; <https://lists.gnu.org/r/bug-gnu-emacs/2023-07/msg01594.html>
;; For this reason, avoid `burly-tabs-mode' on Emacs 29.


;;; Code:

(require 'lib-common)
(require 'lib-keys)

(defvar edebug-inhibit-emacs-lisp-mode-bindings)

;; FIXME: restoring bookmark results in stray mini childframe (like that old
;; embark issue)
(use-package burly
  :demand t
  :commands (burly-open-last-bookmark)
  :autoload (burly-bookmark-frames))

(use-package beframe
  :ensure t
  :demand t

  :preface
  (defface +beframe-buffer
    '((t :inherit font-lock-string-face))
    "Face for `consult' framed buffers.")

  (defun +beframe-buffer-names-sorted (&optional frame)
    "Return the list of buffers from `beframe-buffer-names' sorted by visibility.
With optional argument FRAME, return the list of buffers of FRAME."
    (declare-function beframe-buffer-names "beframe")
    (declare-function beframe-buffer-sort-visibility "beframe")
    (beframe-buffer-names frame :sort #'beframe-buffer-sort-visibility))

  :config
  ;; FIXME: still listed as frame buffers
  (setopt beframe-global-buffers '("\\*scratch\\*" "\\*Messages\\*" "\\*Backtrace\\*"))

  (keymap-global-set "C-c b" beframe-prefix-map)
  (beframe-mode 1)

  (use-feature! consult
    :config
    (declare-function consult--buffer-state "consult")
    (defvar +beframe-consult-source
      `(:name "Frame-specific buffers (current frame)"
        :narrow ?F
        :category buffer
        :face +beframe-buffer
        :history beframe-history
        :items ,#'+beframe-buffer-names-sorted
        :action ,#'switch-to-buffer
        :state ,#'consult--buffer-state))
    (add-to-list 'consult-buffer-sources '+beframe-consult-source)))

;;; Introduce an `activities'-based workflow for frame/tab/window/buffer management

(use-package activities
  :commands ( activities-mode activities-tabs-mode activities-new activities-resume activities-suspend
              activities-kill activities-switch activities-revert activities-list)

  :preface
  (defmap! ceamx-activities-map)
    (setq edebug-inhibit-emacs-lisp-mode-bindings t)

  :init
  (activities-mode)

  ;; Unfortunately, due to the `tab-bar-mode' display bug in Emacs 29 (see
  ;; `init-workspace'), I will be leaving this disabled for the time being.
  ;; (unless tab-bar-mode
  ;;   (activities-tabs-mode))

  (keymap-global-set "C-x C-a" '("[ Activities ]"))

  (keys! ceamx-activities-map
    "C-n" #'activities-new
    "C-a" #'activities-resume
    "C-s" #'activities-suspend
    "C-k" #'activities-kill
    "RET" #'activities-switch

    "g" #'activities-revert
    "l" #'activities-list))

;; TODO: <https://github.com/alphapapa/ap.el/blob/0831e0bb603cf3fe1cdeaa9f1c97b02f681c1f74/init.el#L395>
;; (use-package bufler
;;   :ensure (:files (:defaults (:exclude "helm-bufler.el")))
;;   :config
;;   (global-keys!
;;     "C-x b" #'bufler-switch-buffer
;;     "C-x B" #'bufler-workspace-focus-buffer
;;     "C-x C-b" #'bufler)
;;   (setopt bufler-groups
;;     (bufler-defgroups
;;       (group (auto-workspace)))))

(provide 'init-workspace)
;;; init-workspace.el ends here
#+end_src


** Help

*** Options / Variables

#+begin_src emacs-lisp :tangle lisp/config-help.el
;;; config-help.el --- Help settings                 -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, help

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Settings for helping.

;;; Code:

(require 'ceamx-paths)

(defvar ceamx-cheatsheets-dir
  (file-name-as-directory
   (concat ceamx-home-dir "Documents/cheatsheets"))
  "Absolute path to the directory containing user cheatsheets.")

(provide 'config-help)
;;; config-help.el ends here
#+end_src


*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-help.el
;;; init-help.el --- Help -*- lexical-binding: t; -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; "It looks like you're writing an Emacs. Would you like help?"

;;; Code:

(require 'elpaca-autoloads)

(require 'lib-common)
(require 'lib-help)
(require 'lib-keys)

;;; Configure window behavior for help buffers

;; Focus newly-opened help windows.
(setopt help-window-select t)

;; Also focus newly-opened manpages, which still do not follow `display-buffer'
;; rules (as of <2024-03-06>).
(setopt Man-notify-method 'aggressive)

;;; Bind commands to call `consult-info' filtered by commonly-used manual collections

;; Remove the default binding for the `describe-input-method' command.
(keymap-global-unset "C-h I" t)

(global-keys!
  "C-h I c"  #'ceamx/completion-info
  "C-h I e"  #'ceamx/emacs-info
  "C-h I o"  #'ceamx/org-info)

;;; Peruse local `devdocs' docsets corresponding to the current major-mode

;; <https://github.com/astoff/devdocs.el>

;; NOTE: Must run `devdocs-install' before a docset is available for reference.
;;
;; TODO: Install docsets automatically.
;;       See `lib-help' for WIP.

(package! devdocs
  (keys! help-map
    ;; Replace default `apropos-documentation' binding.
    "d" #'devdocs-lookup
    "D" #'apropos-documentation)

  ;; FIXME: on a stale timer! every week! not every session...
  (devdocs-update-all))

;;; Display keyboard macros or latest interactive commands as Elisp via `elmacro'

;; <https://github.com/Silex/elmacro>

;; Avoid enabling this mode globally. It may cause some recurring errors, and
;; the package has not been updated in years. By nature, it is also quite
;; invasive, and should probably only be used as a development tool as needed.

(package! elmacro
  (setopt elmacro-show-last-commands-default 30)

  ;; <https://github.com/Silex/elmacro/blob/master/README.md#org-mode-smartparens-etc>
  ;; <https://github.com/Silex/elmacro/blob/master/README.md#elmacro-processor-prettify-inserts>
  (setopt elmacro-processor-prettify-inserts
          (unless (or (bound-and-true-p lispy-mode) ; not actually sure about lispy-mode
                      (bound-and-true-p smartparens-mode)
                      (bound-and-true-p org-mode))))

  ;; "a" "b" "c" => "abc"
  ;; FIXME: maybe causes errors?
  (setopt elmacro-processor-concatenate-inserts t))

;;; Provide improved alternatives to the builtin `describe-*' utilities with `helpful'

;; <https://github.com/Wilfred/helpful>

;; NOTE: there are some blocking bugs that have gone unfixed for quite a while
;;        some symbols' helpful pages cannot be displayed.
;;        <https://github.com/Wilfred/helpful/issues/329>

(package! helpful
  ;; Avoid a first-time lag when asking for help, which often happens before an
  ;; idle timer has the chance to run.
  (require 'helpful)
  (define-keymap :keymap help-map
    "c" #'helpful-callable
    "C" #'helpful-command
    "f" #'helpful-function              ; orig: `describe-face'
    "h" #'helpful-at-point
    ;; TODO: consider swapping with the original as a trial?
    "k" #'helpful-key                   ; orig: `describe-key-briefly'
    "o" #'helpful-symbol
    "v" #'helpful-variable

    ;; Parity with the corresponding unmodded keys.
    ;; Primarily for Meow keypad, but also sometimes feels more natural to keep
    ;; holding Ctrl anyway.
    "C-k" #'helpful-key
    "C-o" #'helpful-symbol

    ;; Rebind the originals
    "F" #'describe-face
    "K" #'describe-key-briefly

    ;; Unbind the default binding for "C-h C-h" to allow `which-key' paging.
    "C-h" nil))

;;; Tune the contexts in which Eldoc displays its messages

(use-feature! eldoc
  :config
  ;; via <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L2800-L2810>
  (def-advice! +eldoc-better-display-message-p-a (&rest _)
    :override #'eldoc--message-command-p
    "Make ElDoc smarter about when to display its messages.
From the original author:

\"By default ElDoc has a customizable whitelist of commands that
it will display its messages after. The idea of this is to not
trample on messages that other commands may have printed.
However, this is a hopeless endeavour because there are a
virtually unlimited number of commands that don't conflict with
ElDoc. A better approach is to simply check to see if a message
was printed, and only have ElDoc display if one wasn't.\""
    (member (current-message) (list nil eldoc-last-message))))

;;; Display usage examples for Elisp callables inside their help buffers

;; <https://github.com/xuchunyang/elisp-demos>

(package! elisp-demos
  (after! 'helpful
    (require 'elisp-demos)
    (setopt elisp-demos-user-files (list (expand-file-name  "docs/elisp-demos.org" user-emacs-directory)))
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)))

;;; Keybindings

(after! 'consult
  (declare-function consult-info "consult")
  ;; overrides default `info' bind
  (keymap-set help-map "i" #'consult-info))

(define-keymap :keymap help-map
  "l" #'find-library

  ;; FIXME: no lambda binding
  "t" `("text-props (pt)" . ,(cmd!!
                               #'describe-text-properties
                               current-prefix-arg
                               (point)))

  ;; Unbind the default binding for "C-h C-h" to allow `which-key' paging.
  "C-h" nil)

(provide 'init-help)
;;; init-help.el ends here
#+end_src


*** Library

#+begin_src emacs-lisp :tangle lisp/lib-help.el
;;; lib-help.el --- Helpers for help and documentation  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, help

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; We all need help sometimes.

;;; Code:

(require 'lib-common)

(defvar devdocs-data-dir)

(declare-function consult-info "consult")

;;; Functions

;;;; Pre-defined filters for `consult-info' searches

;; via <https://github.com/minad/consult?tab=readme-ov-file#help>
(defun ceamx/emacs-info ()
  "Search through Emacs info pages."
  (interactive)
  (consult-info "emacs" "efaq" "elisp" "cl"))

(defun ceamx/org-info ()
  "Search through the Org info page."
  (interactive)
  (consult-info "org"))

(defun ceamx/completion-info ()
  "Search through completion info pages."
  (interactive)
  (consult-info "vertico" "consult" "marginalia" "orderless" "embark"
                "corfu" "cape" "tempel"))

;;;; `devdocs' support

(defun +devdocs--doc-directory-exists-p (slug)
  "Whether the directory for the doc SLUG exists."
  (file-directory-p (expand-file-name slug devdocs-data-dir)))

(defun +devdocs--doc-installed-p (slug)
  "Whether the document named SLUG is installed.
Installation can be defined as whether there exists a metadata
file inside a directory named SLUG within `devdocs-data-dir'."
  (defvar devdocs-data-dir)
  (let ((file (expand-file-name (concat slug "/metadata") devdocs-data-dir)))
    (file-exists-p file)))

(defun +devdocs-maybe-install (doc)
  "Install the `devdocs' documentation set for DOC if not already installed.
DOC is as in `devdocs-install'."
  (declare-function devdocs-install "devdocs")
  (unless (+devdocs--doc-installed-p doc)
    (devdocs-install doc)))

(defun +devdocs-maybe-install-docs (docs)
  "Install each `devdocs' documentation set in DOCS if not already installed.
DOCS is a quoted list of `devdocs' documentation identifiers as
accepted by `+devdocs-maybe-install'."
  (dolist (doc docs)
    (+devdocs-maybe-install doc)))

;; FIXME: return t if exists, whatever if new, otherwise throw
(defun ceamx/devdocs-maybe-install (doc)
  "Install the `devdocs' documentation set for DOC if not already installed.
DOC is as in `devdocs-install'."
  ;; TODO: prompt for selecting from available docs (see `devdocs-install')
  (interactive "s")
  (+devdocs-maybe-install doc))

(provide 'lib-help)
;;; lib-help.el ends here
#+end_src


** History

#+begin_src emacs-lisp :tangle lisp/init-history.el
;;; init-history.el --- History management           -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, lisp

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; " Nothing here now but the recordings... "

;; Configuration for session history like undo/redo, edits, kill-ring,
;; recent files, and so on.

;;; Code:

;;; Requirements

(require 'cl-lib)

(require 'elpaca-autoloads)

(require 'ceamx-paths)
(require 'lib-common)

;;; Record some variables' values with `savehist' [builtin]

(use-feature! savehist
  :init
  (savehist-mode)

  :config
  (cl-dolist (save '(kill-ring
                      regexp-search-ring
                      search-ring))
    (cl-pushnew save savehist-additional-variables))

  (setopt savehist-autosave-interval 60))

;;; Record point position in buffers with `saveplace' [builtin]

(use-feature! saveplace
  :init
  (save-place-mode))

;;; Record recently-accessed files with `recentf' [builtin]

(use-feature! recentf
  :init
  (recentf-mode)

  :config
  (setopt recentf-max-saved-items 50)   ; default => 20
  (setopt recentf-max-menu-items 15)    ; default => 10

  ;; Disable recentf-cleanup on Emacs start, because it can cause
  ;; problems with remote files.
  (setopt recentf-auto-cleanup 'never)

  ;; Exclude internal plumbing files.
  (dolist (path '(ceamx-etc-dir ceamx-var-dir))
    (add-to-list 'recentf-exclude path)))

;;; Return to previously-visited buffer positions with `dogears'

;; <https://github.com/alphapapa/dogears.el>

(package! dogears
  (add-hook 'on-first-buffer-hook #'dogears-mode)

  ;; Also see `ceamx/dogears-dispatch'.
  (global-keys!
    ;; TODO: find a new binding maybe
    ;; "M-g d" #'dogears-go
    "M-g M-b" #'dogears-back
    "M-g M-f" #'dogears-forward
    "M-g M-d" #'dogears-list
    "M-g M-D" #'dogears-sidebar)

  ;; Persist `dogears-list' between Emacs sessions.
  ;; via <https://github.com/alphapapa/dogears.el/issues/4>
  (after! 'savehist
    (when (boundp 'savehist-additional-variables)
      (add-to-list 'savehist-additional-variables #'dogears-list))))

;; TODO: provide a little more context in transient (label for dogears, links maybe...)
(after! [transient dogears]
  (transient-define-prefix ceamx/dogears-dispatch ()
    "Transient menu for `dogears' history navigation commands."
    [["Navigate"
       ("b" "back" dogears-back :transient transient--do-stay)
       ("f" "forward" dogears-forward :transient transient--do-stay)]
      ;; TODO: when quit one of these Find commands, return to transient
      ["Find"
        ("d" "go..." dogears-go)
        ("l" "list" dogears-list)
        ("S" "sidebar" dogears-sidebar)]])

  (defer-until! (fboundp 'ceamx/dogears-dispatch)
    (keymap-global-set "M-g d" #'ceamx/dogears-dispatch)))

;;; Undo/redo

;;;; Increase undo history limits

;; Advice from the author of `undo-fu':
;;
;; > The default undo limits for emacs are quite low _(0.15mb at time of
;; > writing)_ undo-tree for example increases these limits.
;; >
;; > On modern systems you may wish to use much higher limits.
;; >
;; > This example sets the limit to 64mb, 1.5x (96mb) for the strong
;; > limit and 10x (960mb) for the outer limit. Emacs uses 100x for the
;; > outer limit but this may be too high when using increased limits.
;;
;; via <https://codeberg.org/ideasman42/emacs-undo-fu#undo-limits>

(setopt undo-limit 67108864) ; 64mb.
(setopt undo-strong-limit 100663296) ; 96mb.
(setopt undo-outer-limit 1006632960) ; 960mb.

;;;; Support optional linear undo/redo with `undo-fu'

;; <https://codeberg.org/ideasman42/emacs-undo-fu>

(package! undo-fu
  (keymap-global-set "C-z" #'undo-fu-only-undo)
  (keymap-global-set "C-S-z" #'undo-fu-only-redo))

;;;; Record undo/redo steps across Emacs sessions with `undo-fu-session'

;; <https://codeberg.org/ideasman42/emacs-undo-fu-session>

;; NOTE: This is *NOT* just for use with `undo-fu'! It's an essential
;; enhancement to the builtin Emacs undo system as well.

(defvar undo-fu-session-directory
  (expand-file-name "undo-fu-session" ceamx-var-dir))

(package! undo-fu-session
  (setopt undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (setopt undo-fu-session-ignore-temp-files t)
  (setopt undo-fu-session-ignore-encrypted-files t)

  (setopt undo-fu-session-compression 'zst)

  (undo-fu-session-global-mode))

;;;; Visualize the Emacs undo tree with `vundo' (visual undo)

;; <https://github.com/casouri/vundo>

(package! vundo
  (keymap-global-set "C-x u" #'vundo))

(after! 'vundo
  (defvar vundo-unicode-symbols)
  (setopt vundo-glyph-alist vundo-unicode-symbols))

(provide 'init-history)
;;; init-history.el ends here
#+end_src


** Search

#+begin_src emacs-lisp :tangle lisp/init-search.el
;;; init-search.el --- Search                        -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Configuration for search-related utilities like `isearch' and
;; `query-replace'.

;; See also `init-selection-consult', as `consult' often provides a frontend to
;; these utilities.

;;; Sources:

;; <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-isearch.el>

;;; Code:

(require 'ceamx-keymaps)

(require 'lib-common)
(require 'lib-keys)

;;; `isearch' [builtin]

(use-feature! isearch
  :blackout

  :preface

  (defun ceamx/replace-symbol-at-point ()
    "Run `query-replace-regexp' for the symbol at point."
    (interactive)
    (require 'isearch)
    (isearch-forward-symbol-at-point)
    (isearch-query-replace-regexp))

  :config

;;;; Definitions

  (defvar-keymap isearch-repeat-map
    :repeat t
    "s" #'isearch-repeat-forward
    "r" #'isearch-repeat-backward)

;;;; Customizations

  (setopt search-highlight t)
  (setopt isearch-lazy-highlight t)
  (setopt isearch-lazy-count t)
  (setopt lazy-count-prefix-format "[%s/%s] ")
  (setopt lazy-count-suffix-format nil)
  (setopt isearch-allow-scroll 'unlimited)

  ;; Allow extending search string by holding shift and using motion commands.
  (setopt isearch-yank-on-move 'shift)

  ;; TODO: monitor behavior
  ;;       specifically, it looks like that regexp will consider any
  ;;       non-alphanumeric character to be whitespace, which might be a bit much.
  ;; via <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-isearch.el>
  (setopt search-whitespace-regexp ".*?")
  (setopt isearch-lax-whitespace t)
  (setopt isearch-regexp-lax-whitespace nil)

;;;; Keybindings

  (define-keymap :keymap (current-global-map)
    "M-s M-o" #'multi-occur
    "M-s %" #'ceamx/replace-symbol-at-point)

  (define-keymap :keymap isearch-mode-map
    "M-<" #'isearch-beginning-of-buffer
    "M->" #'isearch-end-of-buffer
    "M-/" #'isearch-complete
    "M-w" #'isearch-yank-word-or-char

    "M-s <" #'isearch-beginning-of-buffer
    "M-s >" #'isearch-end-of-buffer

    "C-w" nil
    "M-e" nil)

  (keymap-set minibuffer-local-isearch-map "M-/" #'isearch-complete-edit))

;;; Efficiently replace targets in the buffer or context with `substitute'

;; <https://protesilaos.com/emacs/substitute>

(use-package substitute
  :commands (substitute-target-above-point
              substitute-target-below-point
              substitute-target-in-buffer
              substitute-target-in-defun)
  :defines (substitute-post-replace-functions)

  :init
  ;; Provide messages reporting on matches changed in the context.
  (add-hook 'substitute-post-replace-functions #'substitute-report-operation)

  (keys! ceamx-replace-map
    "b" #'substitute-target-in-buffer
    "d" #'substitute-target-in-defun
    "r" #'substitute-target-above-point
    "s" #'substitute-target-below-point)

  :config
  (setopt substitute-hightlight t))

;;; Configure `re-builder', the builtin regular expression builder

;; <https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder>
;; <https://francismurillo.github.io/2017-03-30-Exploring-Emacs-rx-Macro/>

;; Unfortunately, `re-builder' itself is poorly-documented.

(use-feature! re-builder
  :commands (re-builder)
  :config
  ;; "string" => recommended: \\(foo\\\|bar\\)
  ;; "rx"     => recommended; advanced sexp regexp engine
  ;; "read"   => default, avoid: backslash hell
  (setopt reb-re-syntax 'string))

;;; Global Keybindings

(keys! search-map "r" '("replace..." . ceamx-replace-map))

(provide 'init-search)
;;; init-search.el ends here
#+end_src

*** Writable grep buffers with =wgrep=

**** Customization

#+begin_src emacs-lisp :tangle lisp/init-wgrep.el
;;; init-wgrep.el --- Configuration for writable minibuffer grep  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; "Writable grep buffer and apply the changes to files"
;;
;; <https://github.com/mhayashi1120/Emacs-wgrep>

;;; Code:

(require 'lib-common)
(require 'lib-wgrep)

(use-package wgrep
  :defines ( wgrep-auto-save-buffer
             wgrep-change-readonly-file)
  :commands (wgrep-change-to-wgrep-mode)

  :init
  ;; TODO: why in `:init'?
  (setopt wgrep-auto-save-buffer t)
  (setopt wgrep-change-readonly-file t)

  (keymap-set minibuffer-local-map "C-c C-e" #'+vertico/embark-export-write)

  (after! 'dired
    (keymap-set dired-mode-map "C-c C-e" #'wgrep-change-to-wgrep-mode))
  (after! 'grep
    (keymap-set grep-mode-map "W" #'wgrep-change-to-wgrep-mode))

  :config
  ;; FIXME: `wgrep-mode-map' does not exist -- maybe we want `grep-mode-map'?
  ;; (after! 'evil
  ;;   (evil-define-key '(normal motion) 'wgrep-mode-map "q" #'wgrep-exit))

  ;; FIXME: wrong num args
  ;; the intention is to close the wgrep popup after abort/finish
  ;; (after! 'popper
  ;;   (advice-add #'wgrep-abort-changes :after #'popper-toggle)
  ;;   (advice-add #'wgrep-finish-edit :after #'popper-toggle))
  )

(provide 'init-wgrep)
;;; init-wgrep.el ends here
#+end_src

**** Library

#+begin_src emacs-lisp :tangle lisp/lib-wgrep.el
;;; lib-wgrep.el --- wgrep helpers                   -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;;         Henrik Lissner
;; Keywords: tools, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/modules/completion/vertico/autoload/vertico.el#L91-L108>
;;;###autoload
(defun +vertico/embark-export-write ()
  "Export the current vertico results to a writable buffer if possible.
Supports exporting consult-grep to wgrep, file to wdeired,
and consult-location to occur-edit."
  (interactive)
  (require 'embark)
  (require 'wgrep)
  (let* ((edit-command
          (pcase-let ((`(,type . ,candidates)
                        (run-hook-with-args-until-success 'embark-candidate-collectors)))
            (pcase type
              ('consult-grep #'wgrep-change-to-wgrep-mode)
              ('file #'wdired-change-to-wdired-mode)
              ('consult-location #'occur-edit-mode)
              (x (user-error "Embark category %S doesn't support writable export" x)))))
          (embark-after-export-hook `(,@embark-after-export-hook ,edit-command)))
    (embark-export)))

(provide 'lib-wgrep)
;;; lib-wgrep.el ends here
#+end_src


** Input Methods

#+begin_src emacs-lisp :tangle lisp/init-input-methods.el
;;; init-input-methods.el --- Configuration for input methods  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;;
;;; Language environment

(set-language-environment "UTF-8")

;; `set-language-environment' also presumptively sets `default-input-method'.
(setopt default-input-method nil)

;; Disable bidirectional text scanning, because I don't need it.
(setq-default bidi-display-reordering 'left-to-right)
(setq-default bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)

;;
;;; Mouse input

(setopt mouse-yank-at-point t)

;; Avoid collision of mouse with point.
(mouse-avoidance-mode 'exile)

;; "More performant rapid scrolling over unfontified regions. May cause brief
;; spells of inaccurate fontification immediately after scrolling."
;;(setopt fast-but-imprecise-scrolling nil)

(setopt use-file-dialog nil)
(setopt use-dialog-box nil)

(provide 'init-input-methods)
;;; init-input-methods.el ends here
#+end_src


** Keys

*** Options & Variables

#+begin_src emacs-lisp :tangle lisp/config-keys.el
;;; config-keys.el --- Keybindings variables         -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Keybindings something something.

;;; Code:

;;
;;; Options

(defcustom ceamx-keybinding-scheme 'meow
  "Keybinding scheme.
Valid values are the symbols `evil', `meow', and `emacs',
corresponding to the `evil-mode' modal vim-emulation scheme, the
`meow' modal scheme, or the Emacs default keybinding scheme.

A nil value, in addition to `emacs', also means retain
vanilla Emacs keybindings."
  :group 'ceamx
  :type '(choice :tag "Keybinding scheme to use." :value meow
           (const :tag "The `evil' vim-like modal keybinding scheme" evil)
           (const :tag "The `meow' kakoune- and Emacs-like modal keybinding scheme" meow)
           (const :tag "The vanilla Emacs keybinding scheme" emacs)
           (const :tag "Do not load an additional keybinding scheme" nil)))

(defcustom ceamx-leader-key "SPC"
  "Leader prefix key sequence for use in modal schemes."
  :type '(key)
  :group 'ceamx)

(defcustom ceamx-leader-alt-key "M-SPC"
  "Alternative leader prefix key sequence.
Note that the default value conflicts with a keybinding in the
GNOME desktop environment. This conflict must be resolved outside
of Emacs."
  :type '(key)
  :group 'ceamx)

(defcustom ceamx-mode-specific-arm-key "m"
  "Key sequence for major-mode-specific leader arm maps, relative to leader."
  :type '(key)
  :group 'ceamx)

;;
;;; Keymaps

(provide 'config-keys)
;;; config-keys.el ends here
#+end_src



*** General Customizations

#+begin_src emacs-lisp :tangle lisp/init-keys.el
;;; init-keys.el --- Keybindings -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Keybindings configuration.

;; TODO: <https://github.com/jwiegley/dot-emacs/blob/master/init.org#smart-newline>
;; TODO: <https://github.com/ainame/smart-newline.el/tree/c50ab035839b307c66d439083b6761cb7db5e972>

;;; Code:

;;; Requirements

(require 'config-env)
(require 'lib-common)
(require 'lib-keys)

;;; Bind some CUA-like hotkeys for editing operations

;; "C-S" prefix is inspired by the use of this mod combo in terminal emulators,
;; where "C-c" for example would kill the current process.

;; FIXME: move to bindings file

(define-keymap :keymap (current-global-map)
  "C-S-c" #'kill-ring-save
  "C-S-v" #'yank
  "C-S-x" #'kill-region)

;;; macOS: Remap modifier keys for the Apple keyboard layout

(when (and +sys-mac-p (display-graphic-p))
  (setopt mac-control-modifier 'control)
  (setopt mac-option-modifier 'meta)
  (setopt ns-option-modifier 'meta)
  (setopt mac-command-modifier 'super)
  (setopt ns-command-modifier 'super)
  ;; Free up the right-side option key for character composition.
  (setopt mac-right-option-modifier 'none)
  (setopt ns-right-option-modifier 'none)
  ;; Common system hotkeys.
  (define-keymap :keymap (current-global-map)
    "s-c" #'kill-ring-save
    "s-v" #'yank
    "s-x" #'kill-region
    "s-q" #'save-buffers-kill-emacs))

;;; Enable and configure `repeat-mode'

(setopt repeat-exit-key "ESC")
(setopt repeat-exit-timeout 5)
(setopt repeat-on-final-keystroke t)
(setopt repeat-keep-prefix nil)

;; Related, but not technically part of `repeat-mode'.
(setopt set-mark-command-repeat-pop t)

(repeat-mode 1)

;;; Show free keybindings for modkeys or prefixes with `free-keys'

;; <https://github.com/Fuco1/free-keys>

;; > If called with prefix argument C-u, you can specify a prefix map to be
;; > used, such as C-c or C-c C-x (these are specified as a string).

(package! free-keys)

(provide 'init-keys)
;;; init-keys.el ends here
#+end_src


**** Library

#+begin_src emacs-lisp :tangle lisp/lib-keys.el
;;; lib-keys.el --- Keybinding helpers               -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; FIXME: add copyright+license

;; Helper functions and macros for keybindings.

;; <https://github.com/doomemacs/doomemacs/blob/986398504d09e585c7d1a8d73a6394024fe6f164/lisp/doom-keybinds.el#L93C1-L109C56>
;; <https://github.com/casouri/lunarymacs/blob/cd1f34449038e5ec371b1277941c529ea1fb4e9e/site-lisp/luna-key.el>

;; TODO: add utility to apply prefix to provided keys and bind in maps,
;; deferring until maps are defined if necessary. see
;; <https://github.com/casouri/lunarymacs/blob/master/site-lisp/luna-key.el>

;;; Code:

(require 'cl-lib)

(require 'config-keys)

;;; Internal functions

;; FIXME: interface still doesn't feel right...
;; TODO: account for remapping (don't prefix)
(defun ceamx--key-with-prefix (prefix key &optional sep)
  "Return a key sequence string with PREFIX prepended to KEY.
The arguments PREFIX and KEY must be strings satisfying `key-valid-p'.

The optional argument SEP may specify a separator between PREFIX
and KEY. If nil, a single whitespace character will be used as
the default separator."
  (cl-assert (key-valid-p prefix))
  (cl-assert (key-valid-p key))
  (let* ((sep (or sep " "))
          (prefixed-key (concat prefix sep key)))
    (cl-assert (key-valid-p prefixed-key))
    prefixed-key))

;;; Macros

(defmacro global-keys! (&rest keys)
  "Define keybindings KEYS in the global keymap.
Wrapper for `define-keymap' with `current-global-map' as target keymap."
  (declare (indent defun) (debug t))
  `(define-keymap :keymap (current-global-map)
     ,@keys))

(defmacro keys! (keymap &rest definitions)
  "Define KEY/DEFINITION pairs as key bindings in KEYMAP.
Shorthand wrapper for `define-keymap', which see. KEYMAP will be
provided as the `:keymap' keyword argument value. DEFINITIONS
will be passed through to `define-keymap' directly.

\(fn KEYMAP &rest [KEY DEFINITION])"
  (declare (indent defun) (debug t))
  `(define-keymap :keymap ,keymap
     ,@definitions))

(defmacro defmap! (symbol &rest defs)
  "Define a new keymap and prefix command SYMBOL composed of keybindings DEFS."
  (declare (indent defun) (debug t))
  `(progn
     (defvar ,symbol)
     (unless (keymapp ',symbol)
       (define-prefix-command ',symbol ',symbol))
     (define-keymap
       :keymap ,symbol
       ,@defs)))

(defmacro leader-key! (key def)
  "Bind DEF to KEY in the leader map.
If `meow-leader-define-key' is available, then that function will
handle the binding. Otherwise, binding will be handled with
`keymap-set' into `mode-specific-map'.

Note that as of writing, `meow' bindings do not seem to support
descriptions in a way that is comprehensible to `which-key' --
the documentation for `meow-keypad-describe-keymap-function'
acknowledges this incompatibility."
  (declare (indent defun))
  `(if (fboundp 'meow-leader-define-key)
       (meow-leader-define-key (cons ,key ,def))
     (keymap-set mode-specific-map ,key ,def)))

;; FIXME: while logging something simple works, this does not yet return
;; anything useful -- it should return a modified version of DEFS
;; TODO: rework since this doesn't need to be about keydefs
;; (defun ceamx-map-keydefs (func &rest defs)
;;   "Apply the function FUNC to key/definition pairs DEFS.

;; FUNC should accept args KEY and DEF. KEY should be a string
;; matching `key-valid-p'. DEF is anything that can be a key
;; definition. See the docstring for `keymap-set' for more info on
;; accepted values for DEF.

;; This function does not validate the validity of each KEY/DEF pair
;; in DEFS. However, this function will throw when there is an
;; uneven number of items in DEFS, or when there are duplicate
;; definitions for KEY.

;; This function is mostly copied from the source of
;; `define-keymap'."
;;   (let (seen-keys)
;;     (while defs
;;       (let ((key (pop defs)))
;;         (unless defs
;;           (error "Uneven number of key/definition pairs"))
;;         (let ((def (pop defs)))
;;           (if (member key seen-keys)
;;               (error "Duplicate definition for key: %S" key)
;;             (push key seen-keys))
;;           (funcall func key def))))))

;; (defmacro with-prefix! (prefix &rest defs)
;;   "Prepend string PREFIX to each key in key/definition pairs DEFS.
;; PREFIX must satisfy `key-valid-p'. DEFS is composed of keybinding
;;  pairs of the form accepted by `define-keymap'.

;; When PREFIX is prepended to each key string, a single space will
;;  be added between PREFIX and the value for the key. If PREFIX
;;  already includes trailing whitespace, that whitespace will be
;;  stripped and replaced by a single space unless the trailing
;;  whitespace is already a single space character."
;;   (declare (indent defun))
;;   (let* ((prefix (string-clean-whitespace prefix))
;;          ;; FIXME: how to return modified KEY and DEF? or find another way...
;;          (fn (lambda (key def) (format "%s %s" prefix key))))))

(provide 'lib-keys)
;;; lib-keys.el ends here
#+end_src



*** Meow modal keybindings

**** Customization

#+begin_src emacs-lisp :tangle lisp/init-keys-meow.el
;;; init-keys-meow.el --- Meow support               -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; TODO: <https://github.com/meow-edit/meow/discussions/368#discussioncomment-4219587>

;;; Code:

(require 'lib-common)
(require 'lib-keys-meow)

(use-package meow
  :demand t
  :after (which-key)
  :commands (meow-global-mode
              meow-insert-exit)
  :autoload (meow-normal-mode
              meow-leader-define-key
              meow-motion-overwrite-define-key
              meow-normal-define-key)
  :defines (meow-cheatsheet-layout-qwerty)

  :init
  ;; TODO: necessary? i don't think so
  (require 'meow)

  (meow-leader-define-key
    ;; SPC j/k will run the original command in MOTION state.
    '("j" . "H-j")
    '("k" . "H-k")

    ;; Use SPC (0-9) for digit arguments.
    '("1" . meow-digit-argument)
    '("2" . meow-digit-argument)
    '("3" . meow-digit-argument)
    '("4" . meow-digit-argument)
    '("5" . meow-digit-argument)
    '("6" . meow-digit-argument)
    '("7" . meow-digit-argument)
    '("8" . meow-digit-argument)
    '("9" . meow-digit-argument)
    '("0" . meow-digit-argument)
    '("/" . meow-keypad-describe-key)
    '("?" . meow-cheatsheet))

  (meow-motion-overwrite-define-key
    '("j" . meow-next)
    '("k" . meow-prev)
    '("<escape>" . ignore))

  (noop!
    ;; TODO: instead, because meow key definer syntax sucks:
    ;;
    ;; see `meow-keymap-alist' for available states (or use the lookup logic
    ;; from `meow-define-keys': (alist-get state meow-keymap-alist)
    (define-keymap :keymap meow-insert-state-keymap
      ;; etc.
      "0" #'meow-expand-0))

  (meow-normal-define-key
    '("0" . meow-expand-0)
    '("9" . meow-expand-9)
    '("8" . meow-expand-8)
    '("7" . meow-expand-7)
    '("6" . meow-expand-6)
    '("5" . meow-expand-5)
    '("4" . meow-expand-4)
    '("3" . meow-expand-3)
    '("2" . meow-expand-2)
    '("1" . meow-expand-1)
    '("-" . negative-argument)
    '(";" . meow-reverse)
    '("," . meow-inner-of-thing)
    '("." . meow-bounds-of-thing)
    '("[" . meow-beginning-of-thing)
    '("]" . meow-end-of-thing)
    '("a" . meow-append)
    '("A" . meow-open-below)
    '("b" . meow-back-word)
    '("B" . meow-back-symbol)
    '("c" . meow-change-save)           ; default: `meow-change'
    '("d" . meow-delete)
    '("D" . meow-backward-delete)
    '("e" . meow-next-word)
    '("E" . meow-next-symbol)
    '("f" . meow-find)
    '("g" . meow-cancel-selection)
    '("G" . meow-grab)
    '("h" . meow-left)
    '("H" . meow-left-expand)
    '("i" . meow-insert)
    '("I" . meow-open-above)
    '("j" . meow-next)
    '("J" . meow-next-expand)
    '("k" . meow-prev)
    '("K" . meow-prev-expand)
    '("l" . meow-right)
    '("L" . meow-right-expand)
    '("m" . meow-join)
    '("n" . meow-search)
    '("o" . meow-block)
    '("O" . meow-to-block)
    '("p" . meow-yank)
    '("q" . meow-quit)
    ;; FIXME: duplicated with "X" binding
    '("Q" . meow-goto-line)
    '("r" . meow-replace)
    '("R" . meow-swap-grab)
    '("s" . meow-kill)
    '("t" . meow-till)
    '("T" . meow-till-expand)           ; custom addition
    '("u" . meow-undo)
    '("U" . meow-undo-in-selection)
    '("v" . meow-visit)
    '("w" . meow-mark-word)
    '("W" . meow-mark-symbol)
    '("x" . meow-line)
    ;; FIXME: duplicated with "Q" binding
    '("X" . meow-goto-line)
    '("y" . meow-save)
    '("Y" . meow-sync-grab)
    ;; There's no documentation, but this will essentially return to the
    ;; original position prior to beginning the selection.
    '("z" . meow-pop-selection)
    ;; TODO: no idea what the difference is at a glance, no docs
    ;; '("Z" . meow-pop-all-selection)    ; custom addition
    '("'" . repeat)
    '("<escape>" . ignore)
    '(":" . avy-goto-char-2))

  ;; NOTE: This is not a customizable variable, although it is required for meow.
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

  :config

  (pushnew! meow-mode-state-list
    ;; shells
    ;; TODO: use `ceamx-repl-modes-list'
    '(comint-mode . insert)
    '(eat-mode . insert)
    '(eshell-mode . insert)

    ;; writing
    '(diary-mode . normal)

    ;; read-only
    ;; TODO: how to lock state? i.e. dont allow switching
    ;; TODO: set for all read-only buffers?
    '(Info-mode . motion)
    '(read-only-mode . motion)
    '(help-mode . motion))

  ;; Avoid the default binding for `meow-keypad' in motion state.
  (keymap-unset meow-motion-state-keymap "SPC" t)

  ;; Because I'm still getting the hang of meow again. I'm not fast enough to
  ;; remember exactly what to do. Once this delay feels too long, then it can be
  ;; changed.
  (setopt meow-expand-hint-remove-delay 4.0)

  ;; There are slight differences between these two, take your pick.
  ;; Default is nil, which is generally easier to use for Emacs integration.
  ;; C-c might be better for leader-centric bindings a la Doom/Spacemacs
  (setopt meow-keypad-leader-dispatch nil)
  ;; (setopt meow-keypad-leader-dispatch "C-c")

  ;; Improve state indicator appearance (e.g. in modeline).
  (setopt meow-replace-state-name-list
    '( (normal . "🅝")
       (beacon . "🅑")
       (insert . "🅘")
       (motion . "🅜")
       (keypad . "🅚")))

  ;; <https://github.com/meow-edit/meow/issues/543>
  (setopt meow-use-clipboard t)

  (meow-pair! 'angle "a" "<" ">")

  (ceamx-meow-bind-thing 'round "(")
  (ceamx-meow-bind-thing 'round ")")
  (ceamx-meow-bind-thing 'curly "{")
  (ceamx-meow-bind-thing 'curly "}")

  ;; TODO: i don't really thing i want to do this, but here for reference
  ;; (ceamx-meow-unbind-thing "r")

  ;; Don't pass through keys that aren't in keypad.
  (setopt meow-keypad-self-insert-undefined nil)

  ;; Activate Meow.
  (meow-global-mode 1))

(elpaca-wait)

(provide 'init-keys-meow)
;;; init-keys-meow.el ends here
#+end_src


**** Library

#+BEGIN_SRC emacs-lisp :tangle lisp/lib-keys-meow.el
;;; lib-keys-meow.el --- Helpers for Meow            -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(require 'lib-common)

(defun ceamx-normalize-char (char)
  "Normalize CHAR to a valid character matching `characterp'.
CHAR may either be a valid character or a string convertable to a
character with `string-to-char'. If CHAR is already a character
matching `characterp', then it will be returned as-is.

When CHAR is a string containing more than one character, only
the first character will be transformed. See `string-to-char' for
more info.

This function is impure because the interpretation of CHAR can
vary based on... various reasons?"
  (declare (side-effect-free t))
  (cl-assert (char-or-string-p char) t)
  (if (stringp char)
    (cond ((length= char 0)
            (user-error "Character string `%s' is empty" char))
      ((length> char 1)
        (user-error "Character string `%s' should only contain a single character" char))
      (t
        (string-to-char char)))
    char))

(defmacro meow-pair! (thing char begin end)
  "Register a new Meow THING as a pair of BEGIN and END, and map it to CHAR.
This macro simplifies `meow-thing-register' by assuming that the
INNER and BOUNDS arguments of `meow-thing-register' will be an
identical pair expression. This macro also handles the additional
and necessary step of adding the newly-registered THING to
`meow-char-thing-table' as CHAR.

THING is a symbol for registering the new thing with
`meow-thing-register'. It may be quoted or unquoted.

BEGIN is a string delimiting the beginning or opening of the pair
while END is a string delimiting the end or closing of the pair.

The THING will be added to `meow-char-thing-table' as CHAR. CHAR
may either be a character constant matching `characterp' (e.g.
`?a' or `97'), or a string which can be converted to a character
with `string-to-char'. See Info node `(elisp) Basic Char Syntax)'
and Info node `(elisp) String Conversion' for more info."
  (declare (indent defun))
  (cl-assert (char-or-string-p char) t)
  (cl-assert (stringp begin) t)
  (cl-assert (stringp end) t)
  (let* ((sym (ceamx-unquote thing))
          (char (ceamx-normalize-char char))
          (open (list begin))
          (close (list end))
          (pair `(pair ,open ,close)))
    (cl-assert (symbolp sym) t)
    `(progn
       (meow-thing-register ',sym
         ',pair
         ',pair)
       (ceamx-meow-bind-thing ',sym ,char))))

(defun ceamx-meow-bind-thing (thing char)
  "Add pre-registered THING to `meow-char-thing-table' as CHAR."
  (defvar meow-char-thing-table '())
  (let ((thing (ceamx-unquote thing))
         (char (ceamx-normalize-char char)))
    (add-to-list 'meow-char-thing-table `(,char . ,thing))))

(defun ceamx-meow-unbind-thing (char)
  "Remove the character association for character CHAR.
This function will destructively modify the alist
`meow-char-thing-table' by removing the association whose key
matches CHAR.

Note that despite its name, `meow-char-thing-table' is an alist,
not a character table.

CHAR may be a string or character constant, which will be passed
as the CHAR argument to `ceamx-normalize-char'."
  (defvar meow-char-thing-table '())
  (assoc-delete-all (ceamx-normalize-char char) meow-char-thing-table #'eq))

(provide 'lib-keys-meow)
;;; lib-keys-meow.el ends here
#+END_SRC


*** Which-Key

#+begin_src emacs-lisp :tangle lisp/init-keys-which-key.el
;;; init-keys-which-key.el --- Support for which-key  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, help

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; This configuration file is intended to be loaded after every keybinding is in
;; place, in an effort to help these packages reference the final state of all
;; keybindings.

;; For example, `which-key' does not seem to like the way that `meow' handles
;; keybindings -- see the documentation for
;; `meow-keypad-describe-keymap-function' -- displaying only
;; `which-key-prefix-prefix'. `general.el' behaves similarly, from what I can
;; recall. I suspect this has something to do with key translations, a subject
;; with which I am currently unfamiliar.

;; 2024-01-13 UPDATE: My previous note about `which-key' and `meow' interaction
;; makes me wonder if in fact the behavior I was describing was actually Meow's
;; broken `which-key'-like popups. Still, I have seen the described behavior
;; from both packages.

;; I would much rather have some slightly-more-manual method of compiling these
;; "cheatsheets" for specific maps in a hydra-like UI. But I don't want to
;; entirely sacrifice the usage of builtin keymap functionality for the
;; abstractions of hydra. Perhaps there's a way to shadow the keymaps similarly
;; to what `which-key' does, maybe? (i'm guessing) but with more control?

;;; Code:

(use-package which-key
  :demand t
  :blackout t
  :commands (which-key-mode
              which-key-setup-side-window-right-bottom)

  :init
  ;; Activate after all other keybinding stuff (hopefully).
  (add-hook 'after-init-hook #'which-key-mode)

  :config

  ;; Determine whether keys have been rebound, considering the active keymaps.
  ;; NOTE: Does not seem to work reliably -- see Commentary section above.
  (setopt which-key-compute-remaps t)
  (setopt which-key-idle-delay 1.0)

  ;; Sort non-prefix-keys above prefix keys.
  (setopt which-key-sort-order 'which-key-prefix-then-key-order)

  (setopt which-key-sort-uppercase-first nil)

  ;; The default (0) is difficult to read.
  (setopt which-key-add-column-padding 2)

  ;; FIXME: no effect?
  (setopt which-key-show-remaining-keys t))

(provide 'init-keys-which-key)
;;; init-keys-which-key.el ends here
#+end_src


** Completion


*** Vertico

#+begin_src emacs-lisp :tangle lisp/init-selection-vertico.el
;;; init-selection-vertico.el --- Vertico configuration        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; "VERTical Interactive COmpletion"
;;
;; <https://github.com/minad/vertico>

;;; Code:

(require 'lib-common)

(defvar savehist-additional-variables)

;;
;;; Packages
;;

(use-package vertico
  ;; FIXME: :elpaca (vertico :files (:defaults "extensions/*"))
  :demand t

  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setopt vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setopt vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  (setopt vertico-resize t)

  ;; Enable cycling for `vertico-next' and `vertico-previous'.
  (setopt vertico-cycle t)

  :config
  ;; Prefix current candidate with arrow
  ;; <https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow>
  (advice-add #'vertico--format-candidate :around
    (lambda (orig cand prefix suffix index start)
      (setq cand (funcall orig cand prefix suffix index start))
      (concat (if (= vertico--index index)
                  (propertize "» " 'face 'vertico-current)
                "  ")
              cand))))

;; Configure directory extension.
(use-feature! vertico-directory
  :after (vertico)
  :commands ( vertico-directory-enter
              vertico-directory-delete-char
              vertico-directory-delete-word
              vertico-directory-tidy)

  :init
  ;; TODO: what for, exactly? needs binding?
  ;; via <https://github.com/minad/vertico/wiki#additions-for-moving-up-and-down-directories-in-find-file>
  ;; (defun ceamx/vertico-directory-delete-entry ()
  ;;   "Delete directory or entire entry before point."
  ;;   (interactive)
  ;;   (when (and (> (point) (minibuffer-prompt-end))
  ;;              ;; Check vertico--base for stepwise file path completion
  ;;              (not (equal vertico--base ""))
  ;;              (eq 'file (vertico--metadata-get 'category)))
  ;;     (save-excursion
  ;;       (goto-char (1- (point)))
  ;;       (when (search-backward "/" (minibuffer-prompt-end) t)
  ;;         (delete-region (1+ (point)) (point-max))
  ;;         t))))

  (define-keymap :keymap vertico-map
    "RET"     #'vertico-directory-enter
    "DEL"     #'vertico-directory-delete-char
    "M-DEL"   #'vertico-directory-delete-word)

  ;; Tidy shadowed file names -- e.g. cleans `~/foo/bar///' to `/', and `~/foo/bar/~/' to `~/'.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

(use-feature! vertico-repeat
  :after (savehist vertico)
  :commands ( vertico-repeat-history
              vertico-repeat-save)
  :init
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  :config
  (add-to-list 'savehist-additional-variables #'vertico-repeat-history))

(use-feature! emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  (defvar crm-separator)
  (defun +crm-indicator (args)
    "Add prompt indicator to `completing-read-multiple' (ARGS are candidates).
We display [CRM<separator>], e.g., [CRM,] if the separator is a comma."
    (cons (format "[CRM%s] %s"
            (replace-regexp-in-string
              "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
              crm-separator)
            (car args))
      (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'+crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setopt minibuffer-prompt-properties '( read-only t
                                          cursor-intangible t
                                          face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setopt read-extended-command-predicate #'command-completion-default-include-p)

  ;; Enable recursive minibuffers.
  (setopt enable-recursive-minibuffers t))

(provide 'init-selection-vertico)
;;; init-selection-vertico.el ends here
#+end_src



*** Consult

#+begin_src emacs-lisp :tangle lisp/init-selection-consult.el
;;; init-selection-consult.el --- Configuration for Consult  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; "Consulting completing-read"
;;
;; <https://github.com/minad/consult>

;; <https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html>

;;; Code:

(require 'lib-keys)

(use-package consult
  :commands ( consult-bookmark consult-buffer consult-buffer-other-frame consult-buffer-other-tab
              consult-buffer-other-window consult-compile-error consult-complex-command
              consult-fd consult-flymake consult-focus-lines consult-git-grep
              consult-global-mark consult-goto-line consult-history consult-imenu
              consult-imenu-multi consult-info consult-keep-lines consult-kmacro
              consult-line consult-line-multi consult-locate consult-man consult-mark
              consult-mode-command consult-outline consult-preview-at-point-mode
              consult-project-buffer consult-register consult-register-format consult-register-load
              consult-register-store consult-register-window consult-ripgrep consult-xref
              consult-yank-pop)

  :init

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)

  ;; Improve previews for `consult-register' and other register commands.
  (setopt register-preview-delay 0.5)
  (setopt register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Display xref locations with previews.
  (setopt xref-show-definitions-function #'consult-xref)
  (setopt xref-show-xrefs-function #'consult-xref)

  (global-keys!
    "C-c M-x" #'consult-mode-command
    ;; TODO: needs configuration? see `consult-mode-histories'
    ;; "C-c h"   #'consult-history
    "C-c K" #'consult-kmacro
    "C-c M" #'consult-man

    ;; FIXME: use a keymap for s prefix
    ;; "C-c s h"  #'consult-history
    ;; "C-c s m"  #'consult-mode-command
    ;; "C-c s k"  #'consult-kmacro

    "<remap> <Info-search>" #'consult-info

    "C-x M-:" #'consult-complex-command     ; orig. `repeat-complex-command'
    "C-x b" #'consult-buffer                ; orig. `switch-to-buffer'
    "C-x 4 b" #'consult-buffer-other-window ; orig. `switch-to-buffer-other-window'
    "C-x 5 b" #'consult-buffer-other-frame ; orig. `switch-to-buffer-other-frame'
    "C-x t b" #'consult-buffer-other-tab   ; orig. `switch-to-buffer-other-tab'
    "C-x r"  #'consult-bookmark            ; orig. `bookmark-jump'
    "C-x p b" #'consult-project-buffer     ; orig. `project-switch-to-buffer'

    ;; Custom M-# bindings for fast register access
    "M-#"    #'consult-register-load
    "M-'"    #'consult-register-store
    "C-M-#"  #'consult-register

    ;; Miscellaneous
    "M-y" #'consult-yank-pop            ; orig. `yank-pop'

    ;; M-g bindings (goto-map)
    "M-g e"  #'consult-compile-error
    "M-g f"  #'consult-flymake ;; Alternative: consult-flycheck
    "M-g g" #'consult-goto-line
    "M-g M-g" #'consult-goto-line
    "M-g o"  #'consult-outline ;; Alternative: consult-org-heading
    "M-g m"  #'consult-mark
    "M-g k"  #'consult-global-mark
    "M-g i"  #'consult-imenu
    "M-g I"  #'consult-imenu-multi

    ;; M-s bindings (search-map)
    "M-s d"  #'consult-fd               ; or `consult-find'
    "M-s D"  #'consult-locate
    "M-s g"  #'consult-ripgrep
    "M-s G"  #'consult-git-grep
    "M-s l"  #'consult-line
    "M-s L"  #'consult-line-multi
    "M-s k"  #'consult-keep-lines
    "M-s u"  #'consult-focus-lines)

;;;; `isearch' integration

  (keymap-global-set "M-s e" #'consult-isearch-history)

  ;; Needed by consult-line to detect isearch.
  (define-keymap :keymap isearch-mode-map
    "M-e" #'consult-isearch-history
    "M-s e" #'consult-isearch-history
    "M-s l" #'consult-line
    "M-s L" #'consult-line-multi)

;;;; minibuffer integration

  (keymap-set minibuffer-local-map "M-s" #'consult-history) ; orig. next-matching-history-element
  (keymap-set minibuffer-local-map "M-r" #'consult-history) ; orig. previous-matching-history-element


  :config

  (setopt consult-preview-key 'any)

  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
    consult-theme :preview-key '(:debounce 0.2 any)
    consult-ripgrep consult-git-grep consult-grep
    consult-bookmark consult-recent-file consult-xref
    consult--source-bookmark consult--source-file-register
    consult--source-recent-file consult--source-project-recent-file
    ;; :preview-key (kbd "M-.")
    :preview-key '(:debounce 0.4 any))

  ;; Configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setopt consult-narrow-key "<") ;; "C-+"

  ;; Make narrowing help available in the minibuffer.
  (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'embark-prefix-help-command)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  (with-eval-after-load 'projectile
    (declare-function projectile-project-root "projectile")
    (setopt consult-project-function (lambda (_) (projectile-project-root)))))

;; <https://github.com/minad/consult#embark-integration>
(use-package embark-consult
  :after (embark consult)
  :init
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

(provide 'init-selection-consult)
;;; init-selection-consult.el ends here
#+end_src



*** Marginalia

Minibuffer candidate annotations.

#+begin_src emacs-lisp :tangle lisp/init-selection-marginalia.el
;;; init-selection-marginalia.el --- Marginalia configuration  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;  Enable rich completion annotations in the minibuffer.
;;
;;  <https://github.com/minad/marginalia>

;;; Code:

(require 'lib-common)

(use-package marginalia
  :defines (marginalia-annotators)
  :init
  ;; <https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:37ACBBF7-989F-4A57-9454-06B79B8EB4F0>
  (setq marginalia-annotators '(marginalia-annotators-heavy
                                marginalia-annotators-light
                                nil))

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode)

  :config
  (keymap-set minibuffer-local-map "M-A" #'marginalia-cycle)

  (after! 'projectile
    (add-to-list 'marginalia-command-categories '(projectile-find-file . file))))

(provide 'init-selection-marginalia)
;;; init-selection-marginalia.el ends here
#+end_src

*** Orderless

#+begin_src emacs-lisp :tangle lisp/init-selection-orderless.el
;;; init-selection-orderless.el --- Orderless completion matching style configuration  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;  Emacs completion style that matches multiple regexps in any order.
;;
;;  <https://github.com/oantolin/orderless>

;;; Code:

;; (use-package orderless
;;   :init

;;   ;; TODO: Configure a custom style dispatcher (see the Consult wiki)
;;   ;; (setopt orderless-style-dispatchers '(+orderless-dispatch)
;;   ;;       orderless-component-separator #'orderless-escapable-split-on-space)

;;   (setopt completion-styles '(orderless basic)
;;         completion-category-defaults nil
;;         completion-category-overrides '((file (styles partial-completion)))))

(use-package orderless
  :demand t
  :config
  (defvar +orderless-dispatch-alist
    '((?% . char-fold-to-regexp)
      (?! . orderless-without-literal)
      (?`. orderless-initialism)
      (?= . orderless-literal)
      (?~ . orderless-flex)))

  (defun +orderless--suffix-regexp ()
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))

  ;; Recognizes the following patterns:
  ;; * ~flex flex~
  ;; * =literal literal=
  ;; * %char-fold char-fold%
  ;; * `initialism initialism`
  ;; * !without-literal without-literal!
  ;; * .ext (file extension)
  ;; * regexp$ (regexp matching at end)
  (defun +orderless-dispatch (word _index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--suffix-regexp))))
     ;; File extensions
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--suffix-regexp))))
     ;; Ignore single !
     ((equal "!" word) `(orderless-literal . ""))
     ;; Prefix and suffix
     ((if-let (x (assq (aref word 0) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 1))
        (when-let (x (assq (aref word (1- (length word))) +orderless-dispatch-alist))
          (cons (cdr x) (substring word 0 -1)))))))

  ;; Define orderless style with initialism by default
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles
     '(orderless-initialism
       orderless-literal
       orderless-regexp)))

  ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
  ;; There are many details to consider, but the following configurations all work well.
  ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
  ;; special styles for special completion categories, e.g., partial-completion for files.
  ;;
  ;; 1. (setopt completion-styles '(orderless))
  ;; This configuration results in a very coherent completion experience,
  ;; since orderless is used always and exclusively. But it may not work
  ;; in all scenarios. Prefix expansion with TAB is not possible.
  ;;
  ;; 2. (setopt completion-styles '(substring orderless))
  ;; By trying substring before orderless, TAB expansion is possible.
  ;; The downside is that you can observe the switch from substring to orderless
  ;; during completion, less coherent.
  ;;
  ;; 3. (setopt completion-styles '(orderless basic))
  ;; Certain dynamic completion tables (completion-table-dynamic)
  ;; do not work properly with orderless. One can add basic as a fallback.
  ;; Basic will only be used when orderless fails, which happens only for
  ;; these special tables.
  ;;
  ;; 4. (setopt completion-styles '(substring orderless basic))
  ;; Combine substring, orderless and basic.
  ;;
  (setopt completion-styles '(orderless basic))
        (setopt completion-category-defaults nil)
        ;; Enable partial-completion for files.
        ;; Either give `orderless' precedence or `partial-completion'.
        ;; Note that `completion-category-overrides' is not really an override,
        ;; but rather prepended to the default `completion-styles'.
        (setopt completion-category-overrides '( ;; (file (styles orderless partial-completion)) ; orderless is tried first
                                                 (file (styles partial-completion))              ; partial-completion is tried first
                                                 ;; enable initialism by default for symbols
                                                 (command (styles +orderless-with-initialism))
                                                 (variable (styles +orderless-with-initialism))
                                                 (symbol (styles +orderless-with-initialism))))
        ;; Allow escaping space with backslash.
        (setopt orderless-component-separator #'orderless-escapable-split-on-space)
        (setopt orderless-style-dispatchers '(+orderless-dispatch)))

(provide 'init-selection-orderless)
;;; init-selection-orderless.el ends here
#+end_src

*** Completion-At-Point (=corfu=)

#+begin_src emacs-lisp :tangle lisp/config-completion.el
;;; config-completion.el --- Completion-at-point settings  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(defcustom ceamx-completion-at-point-ui 'corfu
  "Choose `completion-at-point' UI between `corfu' or `lsp-bridge'."
  :group 'ceamx
  :type '(choice :tag "completion-at-point user interface"
           (const :tag "The `corfu' module" corfu)
           (const :tag "The `lsp-bridge' module" lsp-bridge)))

;; TODO: implement? should move to sleection
;; (defcustom ceamx-completion-ui 'vertico
;;   "Choose minibuffer completion UI between `mct' or `vertico'."
;;   :group 'ceamx
;;   :type '(choice :tag "Minibuffer user interface"
;;                  (const :tag "The `mct' module" mct)
;;                  (const :tag "The `vertico' module" vertico)))


(provide 'config-completion)
;;; config-completion.el ends here
#+end_src

#+begin_src emacs-lisp :tangle lisp/init-completion.el
;;; init-completion.el --- Completion interfaces -*- lexical-binding: t; -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for completion-at-point.

;; TODO: Some interesting maybe-useful stuff in here: <https://github.com/doomemacs/doomemacs/pull/7002/files>

;; - <https://github.com/minad/corfu>
;; - <https://github.com/minad/cape>
;; - <https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html>

;;; Code:

(require 'lib-completion)
(require 'lib-common)

;; Always resize mini-windows to fit their contents.
(setopt resize-mini-windows t)

;; Allow answering yes/no questions with y/n.
(setopt read-answer-short t)

;; TAB cycle if there are only few candidates
(setopt completion-cycle-threshold 3)

;; Hide commands in M-x which do not apply to the current mode.
;; Corfu commands are hidden, since they are not supposed to be used via M-x.
(setopt read-extended-command-predicate #'command-completion-default-include-p)

;; Don't let `completion-at-point' interfere with indentation.
(setopt tab-always-indent t)

;; `completion-at-point' is often bound to M-TAB, but that conflicts with OS behavior.
;; We also want to preserve "C-S-SPC" , the Emacs default binding for `set-mark-command'.
(keymap-global-set "C-S-SPC" #'completion-at-point)

(after! [evil]
  ;; Since we now know `evil' is loaded, it's reasonable to overwrite the mark binding.
  (keymap-set evil-insert-state-map "C-SPC" #'completion-at-point)
  ;; But we don't want to lose mark capabilities entirely.
  (keymap-set evil-insert-state-map "C-S-SPC" #'set-mark-command))

;; FIXME: evil escape does not quit completion when `evil-disable-insert-state-bindings' is t
;; <https://github.com/emacs-evil/evil-collection/issues/676>
(use-package corfu
  ;; FIXME: :elpaca (corfu :host github :repo "minad/corfu" :files (:defaults "extensions/*"))

  ;; Enable Corfu only for certain modes.
  :hook ((prog-mode . corfu-mode))

  :config
  ;; Stay out of my way!
  (setopt corfu-quit-at-boundary t)
  (setopt corfu-quit-no-match 'separator)
  ;; (setopt corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (setopt corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (setopt corfu-scroll-margin 5)        ;; Use scroll margin
  (setopt corfu-cycle t)
  (setopt corfu-auto t)
  (setopt corfu-auto-delay 0.2)
  (setopt corfu-separator ?\s)
  ;; TODO: maybe enable when invoked manually?
  (setopt corfu-preview-current nil))

;;; `corfu-terminal' :: <https://codeberg.org/akib/emacs-corfu-terminal>
;;  Corfu-endorsed solution to making it usable in terminal.
;;  See also `popon', the utility library powering the interface.
(use-package corfu-terminal
  ;; FIXME: :elpaca (corfu-terminal :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
  :unless (display-graphic-p)
  :after (popon corfu)
  :config
  (corfu-terminal-mode +1))

;;; `corfu-doc-terminal' :: <https://codeberg.org/akib/emacs-corfu-doc-terminal>
;;  Support for completion candidate documentation flyouts in terminal.
;;
;;  FIXME: missing `corfu-doc' dependency -- that package was integrated into
;;  corfu core, but still not available. since this is a non-essential
;;  enhancement, it will probably be removed.
;;
;; (use-package corfu-doc-terminal
;;   ;; FIXME: :elpaca (corfu-doc-terminal :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git")
;;   :after (corfu-terminal)
;;   :unless (display-graphic-p)
;;   :config
;;   (corfu-doc-terminal-mode +1))

;;; kind-icon :: <https://github.com/jdtsmith/kind-icon>

;; Colorful icons for completion-at-point interfaces

(use-package kind-icon
  :demand t
  :after (svg-lib corfu)
  :commands (kind-icon-reset-cache)
  :autoload (kind-icon-margin-formatter)

  :init
  ;; <https://github.com/jdtsmith/kind-icon/issues/34#issuecomment-1668560185>
  (add-hook 'after-enable-theme-hook #'kind-icon-reset-cache)

  :config
  (defvar corfu-margin-formatters)
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)

  (setopt kind-icon-use-icons (display-graphic-p))
  (setopt kind-icon-blend-background t)
  (setopt kind-icon-default-face 'corfu-default))

(use-feature! dabbrev
  :config
  ;; Swap M-/ and C-M-/
  (keymap-global-set "M-/"    #'dabbrev-completion)
  (keymap-global-set "C-M-/"  #'dabbrev-expand)

  ;; TODO: look into using `rx' for easier building of regexps
  (setopt dabbrev-ignored-buffer-regexps
          '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; ref: <https://datatracker.ietf.org/doc/html/rfc1345>
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)

  :config
  ;; FIXME: bind to a real prefix map
  (keymap-global-set "M-p p" #'completion-at-point) ;; capf
  (keymap-global-set "M-p t" #'complete-tag)        ;; etags
  (keymap-global-set "M-p d" #'cape-dabbrev)        ;; or dabbrev-completion
  (keymap-global-set "M-p h" #'cape-history)
  (keymap-global-set "M-p f" #'cape-file)
  (keymap-global-set "M-p k" #'cape-keyword)
  (keymap-global-set "M-p s" #'cape-elisp-symbol)
  (keymap-global-set "M-p a" #'cape-abbrev)
  (keymap-global-set "M-p l" #'cape-line)
  (keymap-global-set "M-p w" #'cape-dict)
  ;; ref: <https://datatracker.ietf.org/doc/html/rfc1345>
  (keymap-global-set "M-p r" #'cape-rfc1345))

(provide 'init-completion)
;;; init-completion.el ends here
#+end_src

*** Library

#+begin_src emacs-lisp :tangle lisp/lib-completion.el
;;; lib-completion.el --- Completion helper functions  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(defvar corfu--frame)

;; via <https://github.com/doomemacs/doomemacs/pull/7002>
(defun +corfu-visible-p ()
  "Predicate whether Corfu is active/visible."
  (or (and (frame-live-p corfu--frame)
           (frame-visible-p corfu--frame))
      (and (featurep 'corfu-terminal)
           (popon-live-p corfu-terminal--popon))))

(provide 'lib-completion)
;;; lib-completion.el ends here
#+end_src


** Embark

#+begin_src emacs-lisp :tangle lisp/init-embark.el
;;; init-embark.el --- Configuration for Embark  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; "Emacs Mini-Buffer Actions Rooted in Keymaps"
;;
;;  <https://github.com/oantolin/embark>

;;; Code:

(use-package embark
  :commands (embark-act
             embark-dwim
             embark-export
             embark-prefix-help-command)
  :init
  ;; Replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  :bind
  (("C-;" . embark-act)
   ("M-." . embark-dwim)))

(provide 'init-embark)
;;; init-embark.el ends here
#+end_src


** Terminal Emulation

#+begin_src emacs-lisp :tangle lisp/init-term.el
;;; init-term.el --- Terminal emulators inside Emacs  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Configuration for terminal emulators running inside Emacs.

;; Not to be confused with configurations for Emacs specific to a TTY
;; environment, which are handled in `init-env-tty'.

;;; Code:

(require 'ceamx-keymaps)
(require 'lib-common)

(use-feature! eshell
  :config
  (setopt eshell-scroll-to-bottom-on-input 'this))

;;; `eat' :: <https://codeberg.org/akib/emacs-eat/>

;; "Emulate A Terminal"

(use-package eat
  :commands ( eat
              eat-eshell-mode
              eat-eshell-visual-command-mode)
  :init
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)

  (keymap-set ceamx-launch-map "t" #'eat)

  (use-feature! popper
    :config
    (defvar popper-reference-buffers)
    (setopt popper-reference-buffers
      (append popper-reference-buffers '("\\*eat\\*")))))

(provide 'init-term)
;;; init-term.el ends here
#+end_src


** Version Control

#+begin_src emacs-lisp :tangle lisp/init-vcs.el
;;; init-vcs.el --- Git/VCS -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configurations for git.

;;; Code:

(require 'ceamx-paths)
(require 'lib-common)
(require 'lib-keys)

(use-feature! ediff
  :config
  ;; Keep the Ediff control panel in the same frame.
  (setopt ediff-window-setup-function #'ediff-setup-windows-plain))

(use-feature! vc
  :demand t
  :config
  (setopt vc-follow-symlinks t)

  ;; No need for all that other nonsense.
  (setopt vc-handled-backends '(Git))

  ;; NOTE: According to the documentation for `diff-hl', the diff algorithm
  ;; cannot be determined based on the user's global git config =diff.algorithm=
  ;; setting. The website source they linked to has disappeared with no archived
  ;; page available. So I have not verified this for certain.
  (setopt vc-git-diff-switches '("--histogram")))

;;;; `diff-hl' :: <https://github.com/dgutov/diff-hl>

;; <https://github.com/purcell/emacs.d/blob/master/lisp/init-vc.el>

;; NOTE: Fringe indicators will conflict with Flycheck.

(use-package diff-hl
  :commands (global-diff-hl-mode
             diff-hl-next-hunk
             diff-hl-previous-hunk)
  :autoload (diff-hl-magit-pre-refresh diff-hl-magit-post-refresh)
  :defines (diff-hl-mode-map)

  :init
  (add-hook 'ceamx-after-init-hook #'global-diff-hl-mode)

  ;; Display indicators in margins instead of fringes.
  ;; This will work in terminal sessions and also avoid the fringe conflict with
  ;; other indicators like Flycheck errors.
  (add-hook 'ceamx-after-init-hook #'diff-hl-margin-mode)

    ;; Support mouse click on indicator to show hunk.
  (when (display-graphic-p)
    (add-hook 'ceamx-after-init-hook #'diff-hl-show-hunk-mouse-mode)


  ;; Committing changes using a package other than `vc' requires integration.
  ;; <https://github.com/dgutov/diff-hl#integration>
  (use-feature! magit
    :init
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))

  ;; Enable `dired' integration.
  (use-feature! dired
    :config
    (add-hook 'dired-mode-hook #'diff-hl-dired-mode)))

  :config

;;;;; Keybindings

  (keymap-set diff-hl-mode-map "C-M-]" #'diff-hl-next-hunk)
  (keymap-set diff-hl-mode-map "C-M-[" #'diff-hl-previous-hunk))

;;;; git-commit :: <https://magit.vc/>

(use-package git-commit
  :after (transient)
  :commands (global-git-commit-mode)

  :init
  (global-git-commit-mode 1)

  (after! 'evil
    (declare-function evil-insert-state "evil")
    (add-hook 'git-commit-mode-hook #'evil-insert-state))

  (after! 'meow
    (declare-function meow-insert-mode "meow")
    (add-hook 'git-commit-mode-hook #'meow-insert-mode)))


;;;; git-timemachine :: <https://codeberg.org/pidu/git-timemachine>

(use-package git-timemachine
  :defer t
  :commands (git-timemachine
              git-timemachine-show-previous-revision
              git-timemachine-show-next-revision
              git-timemachine-blame
              git-timemachine-show-commit)

  :init
  (keymap-global-set "C-x v t" #'git-timemachine)

  ;; XXX: broken, see `ceamx/git-timemachine-dispatch'
  ;; (add-hook 'git-timemachine-mode-hook #'ceamx/git-timemachine-dispatch)

  :config

  (keys! git-timemachine-mode-map
    "M-p" #'git-timemachine-show-previous-revision
    "M-n" #'git-timemachine-show-next-revision
    "M-b" #'git-timemachine-blame
    "M-c" #'git-timemachine-show-commit)

  ;; FIXME: like `ceamx/window-dispatch', this breaks because the commands
  ;; should be run in the original buffer/window
  (transient-define-prefix ceamx/git-timemachine-dispatch ()
    "Transient menu for `git-timemachine-mode'."
    ;; :transient-suffix 'transient--do-stack
    [["Navigation"
       ("p" "previous revision" git-timemachine-show-previous-revision :transient t)
       ("n" "next revision" git-timemachine-show-next-revision :transient t)]
      ["Display"
        ("b" "blame" git-timemachine-blame)
        ("c" "commit" git-timemachine-show-commit )]
      [""
        ("q" "quit" git-timemachine-quit :transient nil)]])

  (declare-function git-timemachine--show-minibuffer-details "git-timemachine")

  ;; via <https://github.com/doomemacs/doomemacs/blob/07fca786154551f90f36535bfb21f8ca4abd5027/modules/emacs/vc/config.el#L76C1-L90C47>
  (def-advice! +git-timemachine--details-in-header-line-a (revision)
    :override #'git-timemachine--show-minibuffer-details
    "Show REVISION details in the header-line instead of the minibuffer."
    (let* ((date-relative (nth 3 revision))
            (date-full (nth 4 revision))
            (author (if git-timemachine-show-author (concat (nth 6 revision) ": ") ""))
            (sha-or-subject (if (eq git-timemachine-minibuffer-detail 'commit) (car revision) (nth 5 revision))))
      (setq header-line-format
        (format "%s%s [%s (%s)]"
          (propertize author 'face 'git-timemachine-minibuffer-author-face)
          (propertize sha-or-subject 'face 'git-timemachine-minibuffer-detail-face)
          date-full date-relative)))))

;;;; `browse-at-remote' :: <https://github.com/rmuslimov/browse-at-remote>

(use-package browse-at-remote
  :commands (browse-at-remote)
  :init
  (keymap-set vc-prefix-map "o" #'browse-at-remote))

;;;; `consult-gh' :: <https://github.com/armindarvish/consult-gh>

;; TODO: look through readme and review settings, add config as desired
;;
;; [2023-12-28]: I still haven't gotten it to work at all. Searches come up with
;; nothing and the tool keeps trying to write to the `gh' CLI's config file,
;; which is fortunately read-only in the Nix store.
;;
;; I really wish this tool was usuable but it's not surprising that GitHub would
;; change a bunch of API stuff, breaking integrations at any time.

;;
;; NOTE: The double-dashed option names are NOT private, despite the Elisp
;; naming convention. Try to ignore it.
;; (use-package consult-gh
;;   ;; FIXME: :elpaca (consult-gh :host github :repo "armindarvish/consult-gh")
;;   :defines ( consult-gh-default-clone-directory
;;              consult-gh-default-orgs-list)
;;   :init
;;   (dolist (owner '("montchr" "seadome"))
;;     (add-to-list 'consult-gh-default-orgs-list owner))

;;   ;; TODO: use/lose
;;   ;; use "gh org list" to get a list of all your organizations and adds them to default list
;;   ;; (setq consult-gh-default-orgs-list (append consult-gh-default-orgs-list (remove "" (split-string (or (consult-gh--command-to-string "org" "list") "") "\n"))))

;;   ;; Set the default folder for cloning repositories. By default Consult-GH will
;;   ;; confirm this before cloning.
;;   (setopt consult-gh-default-clone-directory
;;     (concat ceamx-projects-dir "repos")))

(provide 'init-vcs)
;;; init-vcs.el ends here
#+end_src

*** Magit

**** Customization

#+begin_src emacs-lisp :tangle lisp/init-vcs-magit.el
;;; init-vcs-magit.el --- Magit support              -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;  <https://magit.vc/>

;;; Code:

;;; Requirements

(require 'lib-common)

;; FIXME: move to configuration for `transient'
(with-eval-after-load 'transient
  (defvar transient-map)
  (declare-function transient-quit-one "transient")

  ;; Always close transient with ESC
  (keymap-set transient-map "ESC" #'transient-quit-one))

;;; Configure Magit

(package! magit)

(with-eval-after-load 'magit
  (defvar magit-mode-map)
  (defvar magit-status-mode-map)

  (declare-function magit-discard "magit-apply")
  (declare-function magit-dispatch "magit")
  (declare-function magit-display-buffer-fullframe-status-v1 "magit-mode")
  (declare-function magit-file-dispatch "magit-files")
  (declare-function magit-restore-window-configuration "magit-mode")
  (declare-function magit-revert "magit-sequence")
  (declare-function magit-status "magit-status")

  (setopt magit-diff-refine-hunk t)     ; show granular diffs in selected hunk
  (setopt magit-save-repository-buffers nil) ; avoid side-effects (e.g. auto-format)
  ;; (setopt magit-revision-insert-related-refs nil) ; parent/related refs: rarely useful
  (setopt magit-process-finish-apply-ansi-colors t) ; render ANSI colors in process output

  (setopt magit-bury-buffer-function #'magit-restore-window-configuration)
  ;; <https://magit.vc/manual/magit/Switching-Buffers.html#index-magit_002ddisplay_002dbuffer_002dfullframe_002dstatus_002dv1>
  (setopt magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

  ;; These should be bound automatically when `magit-define-global-key-bindings'
  ;; is =default= (which is the default value), but that does not seem to work.
  (define-keymap :keymap (current-global-map)
    "C-x g"    #'magit-status
    "C-x M-g"  #'magit-dispatch
    "C-c M-g"  #'magit-file-dispatch)

  ;; TODO: why does this not have an effect?
  (define-keymap :keymap magit-status-mode-map
    "_" #'magit-revert
    "V" nil
    "x" #'magit-discard)

  (keymap-set magit-status-mode-map "_" #'magit-revert)
  ;; TODO: rebind?
  (keymap-set magit-status-mode-map "V" nil)
  ;; NOTE: Overrides default binding of `magit-reset-quickly'.
  (keymap-set magit-status-mode-map "x" #'magit-discard)

  (transient-append-suffix 'magit-commit "-n"
    '("-S" "Disable GPG signing" "--no-gpg"))
  (transient-append-suffix 'magit-fetch "-p"
    '("-t" "Fetch all tags" ("-t" "--tags")))
  (transient-append-suffix 'magit-pull "-r"
    '("-a" "Autostash" "--autostash")))

(provide 'init-vcs-magit)
;;; init-vcs-magit.el ends here
#+end_src

*** Forge Integrations

#+begin_src emacs-lisp :tangle lisp/init-vcs-forge.el
;;; init-vcs-forge.el --- Support for git forge integration  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(require 'lib-common)

(use-package ghub
  :demand t)

;; TODO: maybe: <https://github.com/jwiegley/dot-emacs/blob/9d595c427136e2709dee33271db1a658493265bd/init.org#ghub>
;; :config
;; (require 'auth-source-pass)
;; (defvar ceamx-ghub-token-cache nil)
;; (def-advice! +ghub--token-use-cache-a (orig-func host username package &optional nocreate forge)
;;   :around #'ghub--token
;;   "Use a cached GitHub token."
;;   (or ceamx-ghub-token-cache
;;     (setq ceamx-ghub-token-cache
;;       (funcall orig-func host username package nocreate forge))))


(provide 'init-vcs-forge)
;;; init-vcs-forge.el ends here
#+end_src


** Projects

#+begin_src emacs-lisp :tangle lisp/config-projects.el
;;; config-projects.el --- Project settings          -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(require 'ceamx-paths)

(defvar ceamx-projects-dir
  (file-name-as-directory
   (or (getenv "XDG_PROJECTS_DIR")
       (concat ceamx-home-dir "Developer")))
  "The root directory for projects.")

(provide 'config-projects)
;;; config-projects.el ends here
#+end_src

#+begin_src emacs-lisp :tangle lisp/init-project.el
;;; init-project.el --- Project support              -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Configuration for project support, primarily with project.el.

;;; Code:

;; TODO: something?

(provide 'init-project)
;;; init-project.el ends here
#+end_src
*** DISABLED Projectile

lel


** Checkers (Flycheck + Flymake)

#+begin_src emacs-lisp :tangle lisp/init-flycheck.el
;;; init-flycheck.el --- Flycheck support            -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://www.flycheck.org/en/latest/index.html>

;; <https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html>

;;; Code:

(require 'config-keys)

(require 'lib-common)
(require 'lib-keys)

(use-package flycheck
  :commands (global-flycheck-mode flycheck-mode)
  :defines (flycheck-emacs-lisp-load-path
             flycheck-check-syntax-automatically
             flycheck-global-modes)

  :init
  (setopt flycheck-emacs-lisp-load-path 'inherit)
  ;; The default includes `newline', which would happen too frequently.
  (setopt flycheck-check-syntax-automatically '(save idle-change mode-enabled))

  (defmap! ceamx-toggle-map "f" #'flycheck-mode)

  (add-hook 'ceamx-after-init-hook #'global-flycheck-mode)

  :config

  (setopt flycheck-idle-change-delay 1.0)
  (setopt flycheck-display-errors-delay 0.25)
  (setopt flycheck-buffer-switch-check-intermediate-buffers t))

;;; Enable Flycheck integration with Consult via the `consult-flycheck' extension

(use-package consult-flycheck
  :after (consult flycheck)
  :commands (consult-flycheck)
  :init
  (keymap-global-set "M-g f" #'consult-flycheck))

(provide 'init-flycheck)
;;; init-flycheck.el ends here
#+end_src


** Snippets & Templates

*** Customization

#+BEGIN_SRC emacs-lisp :tangle lisp/init-templates.el
;;; init-templates.el --- Snippets and file templates  -*- lexical-binding: t; no-byte-compile: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for file templates and snippet expansion.

;; NOTE: `tempel' does not seem to pick up changes to files even after
;;       re-evalling the `use-package' declaration. However, it does
;;       pick up newly-added templates.

;;; Code:

(use-package tempel
  :commands (tempel-complete tempel-insert)

  :init

  (setopt tempel-path (expand-file-name "templates/*.eld" user-emacs-directory))

  ;; Setup completion at point for Tempel templates.
  (def-hook! +tempel-setup-capf-h () (conf-mode-hook prog-mode-hook text-mode-hook)
    "Add the Tempel Capf to `completion-at-point-functions'.

    `tempel-expand' only triggers on exact matches. Alternatively use
    `tempel-complete' if you want to see all matches, but then you
    should also configure `tempel-trigger-prefix', such that Tempel
    does not trigger too often when you don't expect it. NOTE: We add
    `tempel-expand' *before* the main programming mode Capf, such
    that it will be tried first."
    (setq-local completion-at-point-functions
      (cons #'tempel-expand
        completion-at-point-functions)))

  (global-tempel-abbrev-mode +1)

  :config

  ;; Require trigger prefix before template name when completing.
  ;; (setopt tempel-trigger-prefix "<")

  (global-keys!
    "M-+" #'tempel-complete
    "M-*" #'tempel-insert)

  (define-keymap :keymap tempel-map
    "TAB" #'tempel-next
    "S-TAB" #'tempel-previous))


;;;; `tempel-collection' :: <https://github.com/Crandel/tempel-collection>

;;  A set of pre-defined templates for `tempel'.

;;  <https://github.com/Crandel/tempel-collection/tree/main/templates>

;; TODO: consider integrating personally-useful templates into this project

(use-package tempel-collection
  :after (tempel))

(provide 'init-templates)
;;; init-templates.el ends here
#+END_SRC


*** Tasks

**** TODO Rename the existing feature to =init-snippets=


** Language Support

*** General Programming (=prog-mode= derived modes)

#+begin_src emacs-lisp :tangle lisp/init-prog.el
;;; init-prog.el --- Programming mode support        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; When programming happens, here we are.

;;; Code:

;;; Requirements

(require 'ceamx-keymaps)

(require 'lib-common)
(require 'lib-lisp)

;;; Hooks

(defun ceamx-prog-mode-init-h ()
  "Enable features and defaults useful in any `prog-mode'-derived major modes.
This function is especially useful to ensure functions are called
in a specific order. For this reason, condition checks on
`boundp'/`fboundp' are preferable to using `after!' or
`with-eval-after-load', as the latter may result in a
non-deterministic execution order.

Intended for use as a hook callback on `prog-mode-hook'."

  ;; `highlight-function-calls-mode' should be enabled after other highlighters
  ;; (e.g. `rainbow-delimiters-mode'), according to its readme.
  (when (fboundp 'highlight-function-calls-mode)
    (highlight-function-calls-mode 1)))

(add-hook 'prog-mode-hook #'ceamx-prog-mode-init-h)

;;
;;; Defaults


;;
;;; Packages

;;; hl-todo :: <https://github.com/tarsius/hl-todo>
;;  Highlight TODO and other codetags in comments and strings
;;  <https://peps.python.org/pep-0350/#specification>
(use-package hl-todo
  :commands (hl-todo-mode)
  :init
  (add-hook 'prog-mode-hook #'hl-todo-mode))

;;; `dumb-jump' :: <https://github.com/jacktasia/dumb-jump>
;;  "zero-configuration" jump-to-definition package with support for many langs
(use-package dumb-jump
  :autoload dumb-jump-xref-activate
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :config
  ;; FIXME: make conditional if ripgrep available
  (setopt dumb-jump-force-searcher 'rg))

(after! [hydra dumb-jump]
  ;; TODO: needs binding
  ;; via <https://github.com/jacktasia/dumb-jump?tab=readme-ov-file#hydra-for-effieciency>
  (defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back")))

;;; `rainbow-delimiters' :: <https://github.com/Fanael/rainbow-delimiters>
(use-package rainbow-delimiters
  :commands (rainbow-delimiters-mode)
  :init
  (add-hook 'ceamx-lisp-init-hook #'rainbow-delimiters-mode))

;;; `repl-toggle' :: <https://git.sr.ht/~tomterl/repl-toggle>
;;  Switch between `prog-mode' buffers and their corresponding REPLs.
;; FIXME: "cannot load"
;; (use-package repl-toggle
;;   :defines (rtog/mode-repl-alist)
;;   :config
;;   ;; TODO: `setopt'?
;;   (setq rtog/mode-repl-alist '( (php-mode . psysh)
;;                                 (emacs-lisp-mode . ielm)
;;                                 (nix-mode . nix-repl))))

;;; Keybindings

(keymap-global-set "M-C" ceamx-code-map)

(keys! ceamx-code-map
  "d" #'xref-find-definitions)

(provide 'init-prog)
;;; init-prog.el ends here
#+end_src



*** Tree-Sitter

#+begin_src emacs-lisp :tangle lisp/init-treesitter.el
;;; init-treesitter.el --- Tree-Sitter support          -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: languages, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;;; Requirements:

;; Emacs 29+ built with tree-sitter support.
;; If using Nix, this is handled by default, done.
;;
;; Linux: `pkgs.emacs29' or `emacs-overlay.packages.emacs-unstable-pgtk'
;; Darwin: `pkgs.emacs29-macport'

;; Add these to `programs.emacs.extraPackages':
;;
;;  - `epkgs.treesit-auto'
;;  - `epkgs.treesit-grammars.with-all-grammars'

;;;; Mode Association:

;; NOTE: This feature is intended to be loaded *after* all other language
;;       packages have been installed so that `treesit-auto' it can override `auto-mode-alist'.

;;  By default, Emacs plays it safe with tree-sitter language support so as not
;;  to override legacy mode file extension associations. This makes sense as a
;;  default, but it's a pain to have to override `auto-mode-alist' for every
;;  language individually.
;;
;;  `treesit-auto' is pretty smart about how it handles these behaviors; its
;;  readme provides more in-depth details.

;;  In short, `global-treesit-auto-mode' will:
;;
;;  - Automatically switch to <name>-ts-mode when the grammar for <name> is installed
;;  - Stick with <name>-mode if the grammar isn’t installed
;;  - Automatically install a grammar before opening a compatible file
;;  - Modify auto-mode-alist for tree-sitter modes

;;  See also <https://github.com/purcell/emacs.d/blob/master/lisp/init-treesitter.el>
;;  for a more manual approach.

;;; Code:

(require 'treesit)

(require 'lib-common)

;;; Automatically use available `treesit' modes via `treesit-auto'

;; <https://github.com/renzmann/treesit-auto>

;; NOTE: This package does *not* automatically manage mode-hook translation.
;; Those should be managed manually on a case-by-case basis. For example,
;; `nix-ts-mode-hook' does not currently inherit the value of `nix-mode-hook'.
;; Some Tree-Sitter modes, however, still derive from their non-Tree-Sitter
;; predecessor, and so will also run that mode's hooks in addition to its own.

(package! treesit-auto
  (require 'treesit-auto)

  ;; Grammars should be installed via Nixpkgs.
  (setopt treesit-auto-install nil)

  (treesit-auto-add-to-auto-mode-alist 'all)

  (global-treesit-auto-mode))

(provide 'init-treesitter)
;;; init-treesitter.el ends here
#+end_src


*** General LISPs

**** Options & Variables

#+begin_src emacs-lisp :tangle lisp/config-lisp.el
;;; config-lisp.el --- Lispy variable definitions  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Definitions relating to Emacs Lisp and other supported lispy languages.

;; Support indicated by `ceamx-lisp-modes-list'.

;;; Code:

(defvar ceamx-lisp-modes-list '(emacs-lisp-mode
                                ielm-mode
                                lisp-mode
                                inferior-lisp-mode
                                lisp-interaction-mode)
  "Supported Lisp modes.")

(defvar +emacs-lisp-outline-regexp "[ \t]*;;;\\(;*\\**\\) [^ \t\n]"
  "Regexp to use for `outline-regexp' in `emacs-lisp-mode'.
This marks a foldable marker for `outline-minor-mode' in elisp buffers.")

(provide 'config-lisp)
;;; config-lisp.el ends here
#+end_src

**** Customizations

#+begin_src emacs-lisp :tangle lisp/init-lisp.el
;;; init-lisp.el --- Emacs Lisp language configuration -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for working with Lisps of all kinds.

;;; Code:

;;;; Requirements

(require 'derived)
(require 'elpaca-autoloads)

(require 'lib-common)
(require 'lib-keys)
(require 'lib-lisp)

(require 'config-lisp)

;;;; Configure behavior for all Lisp modes with `ceamx-lisp-init-hook'

(add-hook 'ceamx-lisp-init-hook #'ceamx-enable-check-parens-on-save)

(after! 'flycheck
  (declare-function flycheck-mode "flycheck")
  (add-hook 'ceamx-lisp-init-hook #'flycheck-mode))

;; Add hooks to supported Lisp modes.
(dolist (mode ceamx-lisp-modes-list)
  (add-hook (derived-mode-hook-name mode) #'ceamx-lisp-init))

;; Use two-space indentation always.
(dolist (sym '(add-function advice-add plist-put))
  (put sym 'lisp-indent-function 2))

;; Prevent `calculate-lisp-indent' from indenting quoted lists as functions.
;; <https://emacs.stackexchange.com/a/52789/40956>
(advice-add #'calculate-lisp-indent :override #'ceamx-calculate-lisp-indent-a)

;;;; Configuration for `lispy', a structural expression editing experience

;; <https://oremacs.com/lispy/>
;; <https://github.com/abo-abo/lispy>

(package! lispy
  (add-hook 'ceamx-lisp-init-hook #'lispy-mode)

  (after! 'lispy
    ;; Prevent `lispy' from inserting escaped quotes when already inside a string,
    ;; in favor of just moving past the closing quote as I would expect.
    ;;
    ;; FIXME: This actually results in creating the quote pair *after* the
    ;; closing quote. "for example:"" "
    (setopt lispy-close-quotes-at-end-p t)

    (setopt lispy-completion-method 'default)

    (setopt lispy-eval-display-style 'message)

    ;; I have mixed feelings about this one because it can be jarring and easily
    ;; lead to mass-commenting expressions. Default is non-nil.
    (setopt lispy-move-after-commenting t)

    (keys! lispy-mode-map
      "M-j" nil                         ; shadows custom binding

      ;; via <https://github.com/abo-abo/lispy/pull/619>
      "`" #'self-insert-command)

    (after! 'outli
      ;; `outli-mode' overrides `lispy-mode' outline functionality, so it must
      ;; be activated afterwards.
      (add-hook 'ceamx-lisp-init-hook #'outli-mode))

    (after! 'macrostep
      (push 'macrostep lispy-compat))

    (after! 'popper
      (push "\\*lispy-message\\*" popper-reference-buffers))))

(provide 'init-lisp)
;;; init-lisp.el ends here
#+end_src

**** Library

#+begin_src emacs-lisp :tangle lisp/lib-lisp.el
;;; lib-lisp.el --- Lisp library functions           -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;;;; Variables

(defvar ceamx-lisp-init-hook '()
  "Hook to run in all supported Lisp modes.")

;;;; Functions

(defun ceamx-lisp-init ()
  "Enable features useful in any Lisp mode."
  ;; FIXME: conditional
  ;; FIXME: errors on startup (before loaded)
  (lispy-mode)
  ;; `outli' overrides some `lispy' features.
  ;; <https://github.com/jdtsmith/outli?tab=readme-ov-file#configuration>
  ;; FIXME: conditional
  (outli-mode)
  (run-hooks 'ceamx-lisp-init-hook))

(defun ceamx-enable-check-parens-on-save ()
  "Run `check-parens' when the current buffer is saved."
  (add-hook 'after-save-hook #'check-parens nil t))

(defun +emacs-lisp--in-package-buffer-p ()
  (let* ((file-path (buffer-file-name (buffer-base-buffer)))
          (file-base (if file-path (file-name-base file-path))))
    (and (derived-mode-p 'emacs-lisp-mode)
      (or (null file-base)
        (locate-file file-base (custom-theme--load-path) '(".elc" ".el"))))))

;;;; Commands

(defun ceamx/indent-last-sexp ()
  "Apply indentation to sexp before point."
  (interactive)
  (save-excursion
    (backward-list)
    (indent-sexp)))

;; Source: <https://emacs.stackexchange.com/a/52789/40956>
;; SPDX-License-Identifier: CC-BY-SA-4.0
(defun ceamx-calculate-lisp-indent-a (&optional parse-start)
  "Calculate Lisp indentation from PARSE-START with proper quoted list handling.
Intended as overriding advice to `calculate-lisp-indent'.

This function improves upon `calculate-lisp-indent' by fixing
longstanding bugs with its handling of quoted and backquoted
lists."
  ;; This line because `calculate-lisp-indent-last-sexp` was defined with `defvar`
  ;; with it's value ommited, marking it special and only defining it locally. So
  ;; if you don't have this, you'll get a void variable error.
  (defvar calculate-lisp-indent-last-sexp)
  (save-excursion
    (beginning-of-line)
    (let ((indent-point (point))
           state
           ;; setting this to a number inhibits calling hook
           (desired-indent nil)
           (retry t)
           calculate-lisp-indent-last-sexp containing-sexp)
      (cond ((or (markerp parse-start) (integerp parse-start))
              (goto-char parse-start))
        ((null parse-start) (beginning-of-defun))
        (t (setq state parse-start)))
      (unless state
        ;; Find outermost containing sexp
        (while (< (point) indent-point)
          (setq state (parse-partial-sexp (point) indent-point 0))))
      ;; Find innermost containing sexp
      (while (and retry
               state
               (> (elt state 0) 0))
        (setq retry nil)
        (setq calculate-lisp-indent-last-sexp (elt state 2))
        (setq containing-sexp (elt state 1))
        ;; Position following last unclosed open.
        (goto-char (1+ containing-sexp))
        ;; Is there a complete sexp since then?
        (if (and calculate-lisp-indent-last-sexp
              (> calculate-lisp-indent-last-sexp (point)))
          ;; Yes, but is there a containing sexp after that?
          (let ((peek (parse-partial-sexp calculate-lisp-indent-last-sexp
                        indent-point 0)))
            (if (setq retry (car (cdr peek))) (setq state peek)))))
      (if retry
        nil
        ;; Innermost containing sexp found
        (goto-char (1+ containing-sexp))
        (if (not calculate-lisp-indent-last-sexp)
          ;; indent-point immediately follows open paren.
          ;; Don't call hook.
          (setq desired-indent (current-column))
          ;; Find the start of first element of containing sexp.
          (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
          (cond ((looking-at "\\s(")
                  ;; First element of containing sexp is a list.
                  ;; Indent under that list.
                  )
            ((> (save-excursion (forward-line 1) (point))
               calculate-lisp-indent-last-sexp)
              ;; This is the first line to start within the containing sexp.
              ;; It's almost certainly a function call.
              (if (or
                    ;; Containing sexp has nothing before this line
                    ;; except the first element. Indent under that element.
                    (= (point) calculate-lisp-indent-last-sexp)

                    ;; First sexp after `containing-sexp' is a keyword. This
                    ;; condition is more debatable. It's so that I can have
                    ;; unquoted plists in macros. It assumes that you won't
                    ;; make a function whose name is a keyword.
                    ;; (when-let (char-after (char-after (1+ containing-sexp)))
                    ;;   (char-equal char-after ?:))

                    ;; Check for quotes or backquotes around.
                    (let* ((positions (elt state 9))
                            (last (car (last positions)))
                            (rest (reverse (butlast positions)))
                            (any-quoted-p nil)
                            (point nil))
                      (or
                        (when-let (char (char-before last))
                          (or (char-equal char ?')
                            (char-equal char ?`)))
                        (progn
                          (while (and rest (not any-quoted-p))
                            (setq point (pop rest))
                            (setq any-quoted-p
                              (or
                                (when-let (char (char-before point))
                                  (or (char-equal char ?')
                                    (char-equal char ?`)))
                                (save-excursion
                                  (goto-char (1+ point))
                                  (looking-at-p
                                    "\\(?:back\\)?quote[\t\n\f\s]+(")))))
                          any-quoted-p))))
                ;; Containing sexp has nothing before this line
                ;; except the first element.  Indent under that element.
                nil
                ;; Skip the first element, find start of second (the first
                ;; argument of the function call) and indent under.
                (progn (forward-sexp 1)
                  (parse-partial-sexp (point)
                    calculate-lisp-indent-last-sexp
                    0 t)))
              (backward-prefix-chars))
            (t
              ;; Indent beneath first sexp on same line as
              ;; `calculate-lisp-indent-last-sexp'.  Again, it's
              ;; almost certainly a function call.
              (goto-char calculate-lisp-indent-last-sexp)
              (beginning-of-line)
              (parse-partial-sexp (point) calculate-lisp-indent-last-sexp
                0 t)
              (backward-prefix-chars)))))
      ;; Point is at the point to indent under unless we are inside a string.
      ;; Call indentation hook except when overridden by lisp-indent-offset
      ;; or if the desired indentation has already been computed.
      (let ((normal-indent (current-column)))
        (cond ((elt state 3)
                ;; Inside a string, don't change indentation.
                nil)
          ((and (integerp lisp-indent-offset) containing-sexp)
            ;; Indent by constant offset
            (goto-char containing-sexp)
            (+ (current-column) lisp-indent-offset))
          ;; in this case calculate-lisp-indent-last-sexp is not nil
          (calculate-lisp-indent-last-sexp
            (or
              ;; try to align the parameters of a known function
              (and lisp-indent-function
                (not retry)
                (funcall lisp-indent-function indent-point state))
              ;; If the function has no special alignment
              ;; or it does not apply to this argument,
              ;; try to align a constant-symbol under the last
              ;; preceding constant symbol, if there is such one of
              ;; the last 2 preceding symbols, in the previous
              ;; uncommented line.
              (and (save-excursion
                     (goto-char indent-point)
                     (skip-chars-forward " \t")
                     (looking-at ":"))
                ;; The last sexp may not be at the indentation
                ;; where it begins, so find that one, instead.
                (save-excursion
                  (goto-char calculate-lisp-indent-last-sexp)
                  ;; Handle prefix characters and whitespace
                  ;; following an open paren.  (Bug#1012)
                  (backward-prefix-chars)
                  (while (not (or (looking-back "^[ \t]*\\|([ \t]+"
                                    (line-beginning-position))
                                (and containing-sexp
                                  (>= (1+ containing-sexp) (point)))))
                    (forward-sexp -1)
                    (backward-prefix-chars))
                  (setq calculate-lisp-indent-last-sexp (point)))
                (> calculate-lisp-indent-last-sexp
                  (save-excursion
                    (goto-char (1+ containing-sexp))
                    (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
                    (point)))
                (let ((parse-sexp-ignore-comments t)
                       indent)
                  (goto-char calculate-lisp-indent-last-sexp)
                  (or (and (looking-at ":")
                        (setq indent (current-column)))
                    (and (< (line-beginning-position)
                           (prog2 (backward-sexp) (point)))
                      (looking-at ":")
                      (setq indent (current-column))))
                  indent))
              ;; another symbols or constants not preceded by a constant
              ;; as defined above.
              normal-indent))
          ;; in this case calculate-lisp-indent-last-sexp is nil
          (desired-indent)
          (t
            normal-indent))))))

(provide 'lib-lisp)
;;; lib-lisp.el ends here
#+end_src


*** Emacs Lisp

**** Customizations

#+begin_src emacs-lisp :tangle lisp/init-lang-elisp.el
;;; init-lang-elisp.el --- Emacs Lisp development support  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, lisp

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

;;; Requirements

(require 'config-lisp)

(require 'lib-common)
(require 'lib-keys)
(require 'lib-lisp)

(declare-function blackout "blackout")

;;; Hooks

(defun ceamx-emacs-lisp-init ()
  "Sensible defaults for `emacs-lisp-mode'."
  (ceamx-lisp-init)
  (eldoc-mode 1)
  ;; TODO: do we really want this for `ielm' and other derived modes as well?
  (blackout "EL"))

(add-hook 'emacs-lisp-mode-hook #'ceamx-emacs-lisp-init)
(add-hook 'ielm-mode-hook #'ceamx-emacs-lisp-init)

(when (boundp 'eval-expression-minibuffer-setup-hook)
  (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode))

;;; Advices

;; via <https://github.com/doomemacs/doomemacs/blob/98d753e1036f76551ccaa61f5c810782cda3b48a/modules/lang/emacs-lisp/config.el#L124C1-L138C15>
(def-advice! +emacs-lisp-append-value-to-eldoc-a (fn sym)
  :around #'elisp-get-var-docstring
  "Display variable value next to documentation in eldoc."
  (when-let (ret (funcall fn sym))
    (if (boundp sym)
      (concat ret " "
        (let* ((truncated " [...]")
                (print-escape-newlines t)
                (str (symbol-value sym))
                (str (prin1-to-string str))
                (limit (- (frame-width) (length ret) (length truncated) 1)))
          (format (format "%%0.%ds%%s" (max limit 0))
            (propertize str 'face 'warning)
            (if (< (length str) limit) "" truncated))))
      ret)))

;;; Keybinds

(keymap-global-set "<remap> <indent-pp-sexp>" #'ceamx/indent-last-sexp)

(keys! emacs-lisp-mode-map
  "C-c C-f" nil                         ; `byte-compile-current-file'
  "C-c C-b" nil                         ; `elisp-byte-compile-buffer'

  "C-S-t" #'transpose-sexps)

;;; Packages

;;;; `eros' :: <https://github.com/xiongtx/eros>

;;  Evaluation Result OverlayS for Emacs Lisp

(use-package eros
  :commands (eros-mode eros-eval-last-sexp)
  :init
  (add-hook 'emacs-lisp-mode-hook #'eros-mode)
  (keymap-set emacs-lisp-mode-map "<remap> <eval-last-sexp>" #'eros-eval-last-sexp)

  (use-feature! lispy
    :autoload (lispy-define-key)
    :config
    (def-hook! +lispy-use-eros-eval-h () 'lispy-mode-hook
      "Use `eros-eval-last-sexp' in place of `lispy-eval' bindings."
      ;; FIXME: there is currently no way to hide lispy-eval output.
      ;;        nil results in an error.
      ;;        because of this, output is duplicated in the minibuffer and the
      ;;        eros overlay...
      ;;
      ;; (setopt lispy-eval-display-style nil)
      (lispy-define-key lispy-mode-map "e" #'eros-eval-last-sexp))))

;;;; `suggest' :: <https://github.com/Wilfred/suggest.el>

;;  discover elisp functions that do what you want,
;;  brought to you by enumerative program synthesis

(use-package suggest
  :commands (suggest)
  :init
  (keymap-set emacs-lisp-mode-map "C-c S" #'suggest))

;;;; `macrostep' :: <https://github.com/emacsorphanage/macrostep>

;;  "interactive macro-expander for Emacs"

(use-package macrostep
  :commands (macrostep-expand)

  :preface
  ;; <https://github.com/joddie/macrostep/issues/11>
  ;; <https://github.com/emacsorphanage/macrostep/issues/8>
  (defun ceamx/macrostep-expand ()
    "Wrapper for `macrostep-expand' providing workaround for errors.
The original function fails in the presence of whitespace after a sexp."
    (interactive)
    (when (and (= ?\n (char-after))
            (= (point) (cdr (bounds-of-thing-at-point 'sexp))))
      (backward-char))
    (macrostep-expand))

  :init
  (keymap-set emacs-lisp-mode-map "C-c x" #'ceamx/macrostep-expand))

;;; Install `xr' to convert string regexps to `rx' forms

;; <https://github.com/mattiase/xr>

;; TODO: keybindings...

(package! xr)

(provide 'init-lang-elisp)
;;; init-lang-elisp.el ends here
#+end_src


**** Library

#+begin_src emacs-lisp :tangle lisp/lib-elisp.el
;;; lib-elisp.el --- Helper utilities for Emacs Lisp development and language support  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery
;; Copyright (C) 2018  Adam Porter

;; Author: Chris Montgomery <chris@cdom.io>
;;         Adam Porter <adam@alphapapa.net>
;; Keywords: local, lisp, tools, internal, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Sources:

;; <https://github.com/alphapapa/emacs-package-dev-handbook/blob/4a78d753e965bc2cb87f72a72974a4514c4d18dd/README.org#emacs-lisp-macroreplace>

;;; Code:

;;; Macros

;; via <https://github.com/alphapapa/emacs-package-dev-handbook/blob/master/README.org#debug-warn-macro>
(cl-defmacro debug-warn! (&rest args)
  "Display a debug warning showing the runtime value of ARGS.
The warning automatically includes the name of the containing
function, and it is only displayed if `warning-minimum-log-level'
is `:debug' at expansion time (otherwise the macro expands to nil
and is eliminated by the byte-compiler).  When debugging, the
form also returns nil so, e.g. it may be used in a conditional in
place of nil.

Each of ARGS may be a string, which is displayed as-is, or a
symbol, the value of which is displayed prefixed by its name, or
a Lisp form, which is displayed prefixed by its first symbol.

Before the actual ARGS arguments, you can write keyword
arguments, i.e. alternating keywords and values.  The following
keywords are supported:

  :buffer BUFFER   Name of buffer to pass to `display-warning'.
  :level  LEVEL    Level passed to `display-warning', which see.
                   Default is :debug."
  ;; TODO: Can we use a compiler macro to handle this more elegantly?
  (pcase-let* ((fn-name (when byte-compile-current-buffer
                          (with-current-buffer byte-compile-current-buffer
                            ;; This is a hack, but a nifty one.
                            (save-excursion
                              (beginning-of-defun)
                              (cl-second (read (current-buffer)))))))
                (plist-args (cl-loop while (keywordp (car args))
                              collect (pop args)
                              collect (pop args)))
                ((map (:buffer buffer) (:level level)) plist-args)
                (level (or level :debug))
                (string (cl-loop for arg in args
                          concat (pcase arg
                                   ((pred stringp) "%S ")
                                   ((pred symbolp)
                                     (concat (upcase (symbol-name arg)) ":%S "))
                                   ((pred listp)
                                     (concat "(" (upcase (symbol-name (car arg)))
                                       (pcase (length arg)
                                         (1 ")")
                                         (_ "...)"))
                                       ":%S "))))))
    ;; FIXME: ensure available (from where?) or just defvar
    (when (eq :debug warning-minimum-log-level)
      `(let ((fn-name ,(if fn-name
                         `',fn-name
                         ;; In an interpreted function: use `backtrace-frame' to get the
                         ;; function name (we have to use a little hackery to figure out
                         ;; how far up the frame to look, but this seems to work).
                         `(cl-loop for frame in (backtrace-frames)
                            for fn = (cl-second frame)
                            when (not (or (subrp fn)
                                        (special-form-p fn)
                                        (eq 'backtrace-frames fn)))
                            return (make-symbol (format "%s [interpreted]" fn))))))
         (display-warning fn-name (format ,string ,@args) ,level ,buffer)
         nil))))

;;; Commands

;;;###autoload
(defun ceamx/emacs-lisp-macroreplace ()
  "Replace macro form before or after point with its expansion."
  (interactive)
  (if-let* ((beg (point))
             (end t)
             (form (or (ignore-errors
                         (save-excursion
                           (prog1 (read (current-buffer))
                             (setq end (point)))))
                     (ignore-errors
                       (forward-sexp -1)
                       (setq beg (point))
                       (prog1 (read (current-buffer))
                         (setq end (point))))))
             (expansion (macroexpand-all form)))
    ;; FIXME: replace obsolete function with what?
    (setf (buffer-substring beg end) (pp-to-string expansion))
    (user-error "Unable to expand")))

(provide 'lib-elisp)
;;; lib-elisp.el ends here
#+end_src


*** Eglot

**** Customizations

#+begin_src emacs-lisp :tangle lisp/init-eglot.el
;;; init-eglot.el --- Eglot support                  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Configure Eglot.

;; TODO: Consider implementing Doom's approach to handling performance.
;; <https://github.com/doomemacs/doomemacs/blob/03d692f129633e3bf0bd100d91b3ebf3f77db6d1/modules/tools/lsp/config.el>

;;; Code:

;;; Requirements

(require 'ceamx-keymaps)

(require 'lib-common)
(require 'lib-keys)

;;; Configure

(setopt eglot-sync-connect 1)
(setopt eglot-autoshutdown t)
(setopt eglot-send-changes-idle-time 0.5)

;; Disable events buffer, which poses performance issues over time as the
;; buffer grows in a longer-running Emacs instance.
(setopt eglot-events-buffer-size 0)

;; Prevent frequent focus-stealing.
(setopt eglot-auto-display-help-buffer nil)

(keys! ceamx-code-map
  "a" '("action.." . eglot-code-actions)
  "r" '("rename..." . eglot-rename))

(after! 'eglot
  (defvar eglot-server-programs)

  (def-advice! +eglot--ensure-available-mode (fn)
    :around #'eglot-ensure
    "Run `eglot-ensure' in supported modes."
    (when (alist-get major-mode eglot-server-programs nil nil
            (lambda (modes key)
              (if (listp modes)
                (member key modes)
                (eq key modes))))
      (funcall fn)))

  ;; Register eglot help buffers as popup windows.
  (after! [popper]
    (defvar popper-reference-buffers)
    (add-to-list 'popper-reference-buffers "^\\*eglot-help")))

;;; Configure Flycheck integration

(package! flycheck-eglot
  (add-hook 'eglot-managed-mode-hook #'flycheck-eglot-mode))

;;; `consult-eglot' :: <https://github.com/mohkale/consult-eglot>

(package! consult-eglot
  (defalias 'ceamx/list-workspace-symbols #'consult-eglot-symbols))

(provide 'init-eglot)
;;; init-eglot.el ends here
#+end_src


*** Data Formats (XML, CSV...)
:PROPERTIES:
:ID:       137d1e04-d0dc-4512-a450-fbafeef65804
:END:

#+begin_src emacs-lisp :tangle lisp/init-lang-data.el
;;; init-lang-data.el --- Data format support        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: data, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Support for working with data files like JSON, TOML, CSV, XML, etc.

;;; Code:

(require 'lib-common)

;;; JSON

;;;; Navigate arborescent JSON structures with `json-navigator'

;; <https://github.com/DamienCassou/json-navigator>

;; TODO: add bindings

(package! json-navigator)

;;; XML

(use-feature! nxml-mode
  :mode "\\.p\\(?:list\\|om\\)\\'"      ; plist, pom
  :mode "\\.xs\\(?:d\\|lt\\)\\'"        ; xslt, xsd
  :mode "\\.rss\\'"

  :config
  (setq nxml-slash-auto-complete-flag t)
  (setq nxml-auto-insert-xml-declaration-flag t)

  ;; FIXME: prob broken?
  (setq-hook! 'nxml-mode-hook tab-width nxml-child-indent))

;;; CSV/TSV

(use-package csv-mode
  :commands ( csv-align-fields
              csv-unalign-fields
              csv-sort-fields
              csv-sort-numeric-fields
              csv-kill-fields
              csv-transpose)
  :config
  (define-keymap :keymap csv-mode-map
    "a" #'csv-align-fields
    "u" #'csv-unalign-fields
    "s" #'csv-sort-fields
    "S" #'csv-sort-numeric-fields
    "k" #'csv-kill-fields
    "t" #'csv-transpose))


(provide 'init-lang-data)
;;; init-lang-data.el ends here
#+end_src



***

*** HTML

#+begin_src emacs-lisp :tangle lisp/init-lang-html.el
;;; init-lang-html.el ---HTML and templating engine support  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Configuration for `web-mode' and related.

;; <https://web-mode.org/>

;;; Code:

(use-package web-mode
  :commands (web-mode)

  :init
  ;; TODO: refactor
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

  :config
  (setopt web-mode-engines-alist
          '(("php" . "\\.phtml\\'")
            ("blade" . "\\.blade\\.")))

  ;; TODO: revisit this...
  ;; NOTE: This method of setting customizations is unusual,
  ;;       but recommended by `web-mode' documentation.
  (defun +web-mode--customization-hook ()
    "Customization hook for `web-mode'"
    (setopt web-mode-markup-indent-offset 2)
    (setopt web-mode-css-indent-offset 2)
    (setopt web-mode-code-indent-offset 2)
    (setopt web-mode-enable-auto-pairing t)
    (setopt web-mode-enable-css-colorization t)
    (setopt web-mode-enable-block-face t)
    (setopt web-mode-enable-part-face t))
  (add-hook 'web-mode-hook '+web-mode--customization-hook)

  ;; NOTE: The following customizations should NOT be set
  ;;       in `+web-mode--customization-hook'.
  (setopt web-mode-enable-current-element-highlight t))

(provide 'init-lang-html)
;;; init-lang-html.el ends here
#+end_src


*** JavaScript

#+begin_src emacs-lisp :tangle lisp/init-lang-js.el
;;; init-lang-js.el --- JavaScript/TypeScript language support improvements  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Emacs supports JavaScript and TypeScript out of the box, however it needs some help.

;; TODO: try <https://github.com/llemaitre19/jtsx> but it's not in melpa or nixpkgs yet

;;; Code:

(require 'lib-common)

(defun ceamx-init-javascript-modes ()
  (setopt js-indent-level 2)

  (after! [lsp-mode]
    (lsp-deferred)
    (lsp-lens-mode)
    (dolist (hook '(lsp-format-buffer
                     lsp-organize-imports))
      (add-hook 'before-save-hook hook nil t))))

;; TODO: must happen before `treesit-auto' so it can override
;; (add-to-list 'auto-mode-alist '("\\.js\\'"     . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.[cm]js\\'" . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.pac\\'"    . js2-mode))
;; (add-to-list 'interpreter-mode-alist '("node"  . js2-mode))

(use-feature! typescript-ts-mode
  :init
  (add-hook 'typescript-ts-base-mode #'ceamx-init-javascript-modes))

(provide 'init-lang-js)
;;; init-lang-js.el ends here
#+end_src


*** Lua

#+begin_src emacs-lisp :tangle lisp/init-lang-lua.el
;;; init-lang-lua.el --- Lua language support        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: languages, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Lua language support.

;;;; Sources:

;; - <https://github.com/purcell/emacs.d/blob/28194a035ca9a259030ba7ef58089561078c4893/lisp/init-lua.el>

;;; Code:

(require 'lib-common)

(use-package lua-mode
  :config
  (setq-default lua-indent-level 2))

(provide 'init-lang-lua)
;;; init-lang-lua.el ends here
#+end_src


*** Markdown


**** Customization

#+begin_src emacs-lisp :tangle lisp/init-lang-markdown.el
;;; init-lang-markdown.el --- Markdown support customizations  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; FIXME: no asteriks pair

;;; Code:

(require 'config-env)
(require 'lib-common)
(require 'lib-editor)
(require 'lib-lang-markdown)

(defvar org-src-lang-modes)

;; TODO: why not?
(define-keymap :keymap markdown-mode-map
  "C-c i l" #'markdown-insert-link
  ;; FIXME: pop latest kill
  "C-c i q" #'markdown-insert-blockquote)

;;; `markdown-mode' :: <https://github.com/jrblevin/markdown-mode>
(use-package markdown-mode
  :commands (markdown-mode)
  :autoload (markdown-match-generic-metadata)

  :init
  (defvar markdown-enable-wiki-links t)
  (defvar markdown-italic-underscore t)
  (defvar markdown-asymmetric-header t)
  (defvar markdown-gfm-additional-languages '("sh"))
  (defvar markdown-make-gfm-checkboxes-buttons t)
  (defvar markdown-fontify-whole-heading-line t)

  ;; HACK Due to jrblevin/markdown-mode#578, invoking `imenu' throws a
  ;;      'wrong-type-argument consp nil' error if you use native-comp.
  ;;      <https://github.com/jrblevin/markdown-mode/issues/578>
  (defvar markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p))))

  (defvar markdown-command #'ceamx-markdown-compile)

  ;; This is set to `nil' by default, which causes a wrong-type-arg error
  ;; when you use `markdown-open'. These are more sensible defaults.
  ;; TODO: make this a globally-usable variable, since it always holds true.
  (defvar
    markdown-open-command
    (cond (+sys-mac-p "open")
          (+sys-linux-p "xdg-open")))

  ;; A sensible and simple default preamble for markdown exports that
  ;; takes after the github asthetic (plus highlightjs syntax coloring).
  ;; via <https://github.com/doomemacs/doomemacs/blob/986398504d09e585c7d1a8d73a6394024fe6f164/modules/lang/markdown/config.el>
  (defvar markdown-content-type "application/xhtml+xml")
  (defvar markdown-css-paths
    '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
      "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css"))
  (defvar markdown-xhtml-header-content
    (concat "<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>"
      "<style> body { box-sizing: border-box; max-width: 740px; width: 100%; margin: 40px auto; padding: 0 10px; } </style>"
      "<script id='MathJax-script' async src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'></script>"
      "<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>"
      "<script>document.addEventListener('DOMContentLoaded', () => { document.body.classList.add('markdown-body'); document.querySelectorAll('pre[lang] > code').forEach((code) => { code.classList.add(code.parentElement.lang); }); document.querySelectorAll('pre > code').forEach((code) => { hljs.highlightBlock(code); }); });</script>"))

  (after! 'org-src
    (add-to-list 'org-src-lang-modes '("md" . markdown)))

  :config
  (def-advice! ceamx--disable-markdown-front-matter-fontification (&rest _)
    :override #'markdown-match-generic-metadata
    "Prevent fontification of YAML metadata blocks in `markdown-mode'.
This prevents a mis-feature wherein if the first line of a
Markdown document has a colon in it, then it's distractingly and
usually wrongly fontified as a metadata block. See
<https://github.com/jrblevin/markdown-mode/issues/328#issuecomment-405361296>
and
<https://github.com/radian-software/radian/blob/b2fac3a615186f77de0bdc7e4f06e9aa46c222bb/emacs/radian.el#L3199-L3206>."
    (ignore (goto-char (point-max)))))

(use-package evil-markdown
  :disabled t
  ;; FIXME: :elpaca (evil-markdown :host github :repo "Somelauw/evil-markdown")
  :after (evil evil-collection markdown-mode)
  :commands (evil-markdown-mode)
  :defines (evil-markdown-mode-map)

  :init
  (add-hook 'markdown-mode-hook #'evil-markdown-mode)

  (evil-define-key '(normal) 'evil-markdown-mode-map
    (kbd "M-r") #'browse-url-of-file)

  (evil-define-key '(insert) 'evil-markdown-mode-map
    (kbd "M-*") #'markdown-insert-list-item
    (kbd "M-b") #'markdown-insert-bold
    (kbd "M-i") #'markdown-insert-italic
    (kbd "M--") #'markdown-insert-hr)

  (evil-define-key '(motion) 'evil-markdown-mode-map
    "[h" #'markdown-previous-visible-heading
    "]h" #'markdown-next-visible-heading
    "[p" #'markdown-promote
    "]p" #'markdown-demote
    "[l" #'markdown-previous-link
    "]l" #'markdown-next-link))

(provide 'init-lang-markdown)
;;; init-lang-markdown.el ends here
#+end_src


**** Library

#+begin_src emacs-lisp :tangle lisp/lib-lang-markdown.el
;;; lib-lang-markdown.el --- Markdown helpers        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: languages, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;;;###autoload
(defun ceamx-markdown-compile (beg end output-buffer)
  "Compile Markdown with pandoc if available.
Returns process exit code."
  (when (executable-find "pandoc")
    (call-process-region beg end "pandoc" nil output-buffer nil
      "-f" "markdown"
      "-t" "html"
      "--highlight-style=pygments")))

(provide 'lib-lang-markdown)
;;; lib-lang-markdown.el ends here
#+end_src

*** Nix

#+begin_src emacs-lisp :tangle lisp/init-lang-nix.el
;;; init-lang-nix.el --- Nix language support -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configure Nix language support.

;;; Code:

(require 'lib-common)
(require 'lib-help)

;;; Install and configure `nix-mode'

;; <https://github.com/NixOS/nix-mode>

;; NOTE: `nix-mode' should not be loaded when using `nix-ts-mode'.

(package! nix-mode
  (require 'nix-mode)

  (add-hook 'nix-mode-hook #'eglot-ensure))

;;; DISABLED Install and configure `nix-ts-mode'

;; <https://github.com/remi-gelinas/nix-ts-mode>

;; FIXME: Disabled because it is currently inferior to `nix-mode' in a few ways,
;; especially broken indentation and pairing:
;; <https://github.com/remi-gelinas/nix-ts-mode/issues/14>
;; <https://github.com/remi-gelinas/nix-ts-mode/pull/15>

(noop!
  (package! nix-ts-mode
    (when (treesit-language-available-p 'nix)
      (require 'nix-ts-mode)

      (add-hook 'nix-ts-mode-hook #'eglot-ensure)

      (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-ts-mode))
      (add-to-list 'major-mode-remap-alist '(nix-mode . nix-ts-mode)))))

;;; Configure formatters

;;;; Set the official formatter (=nixfmt=) as the default formatter

(with-eval-after-load 'apheleia
  (defvar apheleia-mode-alist)
  (with-eval-after-load 'nix-ts-mode
    (add-to-list 'apheleia-mode-alist '(nix-ts-mode . nixfmt))))

;;;; Register =alejandra= as an additional formatter

(with-eval-after-load 'apheleia
  (defvar apheleia-formatters)
  (add-to-list 'apheleia-formatters '(alejandra "alejandra")))

;;; Configure Nix language servers

(with-eval-after-load 'eglot
  (defvar eglot-server-programs)
  (add-to-list 'eglot-server-programs '((nix-mode nix-ts-mode) . ("nil"))))

;; via `lsp-mode' package
(with-eval-after-load 'lsp-nix
  (setopt lsp-nix-nil-formatter nil))

;;; Install `devdocs' Nix docset

(def-hook! +devdocs-install-nix-docs ()
  '(nix-mode-hook nix-ts-mode-hook)
  "Install `devdocs' documents for the Nix language."
  (+devdocs-maybe-install "nix"))

(provide 'init-lang-nix)
;;; init-lang-nix.el ends here
#+end_src


*** Nushell

#+begin_src emacs-lisp :tangle lisp/init-shell-nu.el
;;; init-shell-nu.el --- Nushell support             -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Nushell integration and language major-mode.

;; <https://github.com/mrkkrp/nushell-mode>

;;; Code:

;; TODO: move to `init-lang-misc'

(use-package nushell-mode

  ;; FIXME: :elpaca (nushell-mode :host github :repo "mrkkrp/nushell-mode")
  )


(provide 'init-shell-nu)
;;; init-shell-nu.el ends here
#+end_src
**** TODO Rename file to =init-lang-nushell.el= or include in =init-lang-shell.el=
*** PHP

#+begin_src emacs-lisp :tangle lisp/init-lang-php.el
;;; init-lang-php.el --- PHP language support        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Support for PHP language.

;;; Code:

(require 'lib-common)

;; FIXME: append, don't define a new var entirely
;; (defvar xref-ignored-files '("_ide_helper_models.php" "_ide_helper.php")
;;   "List of files to be ignored by `xref'.")

;; FIXME: relocate this... somewhere...
(defun xref-ignored-file-p (item)
  "Return t if `item' should be ignored."
  (seq-some
   (lambda (cand)
     (string-suffix-p cand (oref (xref-item-location item) file))) xref-ignored-files))

(use-package php-mode
  :init
  ;; Render multiline comments using `font-lock-comment-face'.
  (add-hook 'php-mode-hook #'ceamx--multiline-comment-face-h)
  :config
  (setopt php-mode-template-compatibility nil)

  ;; TODO: from doom
  ;; (set-docsets! 'php-mode "PHP" "PHPUnit" "Laravel" "CakePHP" "CodeIgniter" "Doctrine_ORM")
  ;; (set-repl-handler! 'php-mode #'+php/open-repl)
  ;; (set-lookup-handlers! 'php-mode :documentation #'php-search-documentation)
  ;; (set-ligatures! 'php-mode
  ;;   ;; Functional
  ;;   :lambda "function()" :lambda "fn"
  ;;   :def "function"
  ;;   ;; Types
  ;;   :null "null"
  ;;   :true "true" :false "false"
  ;;   :int "int" :float "float"
  ;;   :str "string"
  ;;   :bool "list"
  ;;   ;; Flow
  ;;   :not "!"
  ;;   :and "&&" :and "and"
  ;;   :or "||" :or "or"
  ;;   :for "for"
  ;;   :return "return"
  ;;   :yield "use")

  )

;; FIXME: i am going to assume this is all irrelevant in 2024 please
;; (use-feature! lsp-mode
;;   :init
;;   (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\vendor")

;;   ;; FIXME: move these to lsp module?

;;   (def-advice! +lsp-ignored-locations-to-xref-items-a (items)
;;     :filter-return #'lsp--locations-to-xref-items
;;     "Remove ignored files from list of xref-items."
;;     (cl-remove-if #'xref-ignored-file-p items))

;;   (def-advice! +lsp-ui-peek--ignored-locations-a (items)
;;     :filter-return #'lsp-ui-peek--get-references
;;     "Remove ignored files from list of xref-items."
;;     (cl-remove-if #'xref-ignored-file-p items)))

(after! 'projectile
  (add-to-list 'projectile-globally-ignored-directories "vendor"))

(after! 'web-mode
  ;; This should override the default file extension association.
  (pushnew! web-mode-engines-alist '(("blade"  . "\\.blade\\."))))

(provide 'init-lang-php)
;;; init-lang-php.el ends here
#+end_src
*** Shell Scripting

#+begin_src emacs-lisp :tangle lisp/init-lang-shell.el
;;; init-lang-shell.el --- Shell script language support  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; NOTE: Make sure `flycheck-mode' is not enabled in shell script buffers, as
;; `flymake' will handle it just fine.

;;; Code:

(require 'lib-common)

(use-feature! emacs
  :config
  ;; Make files executable if their first line has a shebang.
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))

(use-feature! eglot
  :config
  (add-hook 'sh-mode-hook #'eglot-ensure)
  (add-hook 'bash-ts-mode-hook #'eglot-ensure)
  (add-to-list 'eglot-server-programs '((sh-mode bash-ts-mode) . ("bash-language-server" "start"))))

(use-feature! flymake
  :config
  (add-hook 'sh-mode-hook #'flymake-mode)
  (add-hook 'bash-ts-mode-hook #'flymake-mode))

(provide 'init-lang-shell)
;;; init-lang-shell.el ends here
#+end_src
*** YAML

#+begin_src emacs-lisp :tangle lisp/init-lang-yaml.el
;;; init-lang-yaml.el --- YAML language support      -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
;;; Code:

(use-package yaml-mode
  :commands (yaml-mode)
  :init
  (dolist (pattern '("\\.yml\\'"
                     "\\.yaml\\'"
                     "Procfile\\'"))
    (add-to-list 'auto-mode-alist `(,pattern . yaml-mode))))

(provide 'init-lang-yaml)
;;; init-lang-yaml.el ends here
#+end_src



*** Miscellaneous Languages

#+begin_src emacs-lisp :tangle lisp/init-lang-misc.el
;;; init-lang-misc.el --- Miscellaneous language support -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for miscellaneous languages that don't warrant
;;  their own initialization files.

;;; Code:

(use-package apache-mode)

(use-package just-mode)

(use-package robots-txt-mode)

(use-package vimrc-mode
  :commands (vimrc-mode)
  :init
  (add-to-list 'auto-mode-alist '("\\.(idea)?vim\\(rc\\)?\\'" . vimrc-mode)))

(provide 'init-lang-misc)
;;; init-lang-misc.el ends here
#+end_src


** Notetaking

#+begin_src emacs-lisp :tangle lisp/config-notes.el
;;; config-notes.el --- Notes settings               -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(require 'f)

(require 'ceamx-paths)

(defvar ceamx-notes-dir
  (f-join ceamx-home-dir "Documents/notes")
  "Base directory for note storage.")

(defvar ceamx-agenda-dir
  (f-join ceamx-notes-dir "g2d"))

(defvar ceamx-dailies-dir
  (f-join ceamx-notes-dir "daily"))

(defvar ceamx-notes-default-dir
  (f-join ceamx-notes-dir "default"))

(defvar ceamx-journal-dir
  (f-join ceamx-notes-dir "journal"))

(defvar ceamx-work-notes-dir
  (f-join ceamx-notes-dir "work"))

(provide 'config-notes)
;;; config-notes.el ends here
#+end_src

#+begin_src emacs-lisp :tangle lisp/init-notes.el
;;; init-notes.el --- Configuration for notetaking   -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Generic notetaking configurations.

;;; Code:

(require 'f)

(require 'config-notes)

;; Create all required directories if not already present.
(dolist (dir (list ceamx-notes-dir ceamx-journal-dir ceamx-agenda-dir))
  (f-mkdir-full-path dir))

;;
;;; consult-notes <https://github.com/mclear-tools/consult-notes>

(use-package consult-notes
  ;; FIXME: :elpaca (:host github :repo "mclear-tools/consult-notes")
  :commands (consult-notes
              consult-notes-search-in-all-notes))

;; via <https://github.com/mclear-tools/consult-notes#embark-support>
;; (after! [consult-notes embark]
;; 	(defun ceamx/consult-notes-embark-action (cand)
;;     "Do something with CAND."
;;     (interactive "fNote: ")
;;     ;; FIXME: needs function
;;     ;;
;;     ;; > Note that Embark will run on the CAND at point, which will often return
;;     ;; > either a file name, or a file name plus other annotations, depending on
;;     ;; > what your sources are. So you’ll have to write a function to manipulate
;;     ;; > CAND to give you a viable path to the file or a directory containing
;;     ;; > the file.
;;     (my-function))

;;   (defvar-keymap consult-notes-map
;;     :doc "Keymap for Embark notes actions."
;;     :parent embark-file-map
;;     "m" #'ceamx/consult-notes-embark-action)

;;   (add-to-list 'embark-keymap-alist `(,consult-notes-category . consult-notes-map))

;;   ;; Make `embark-export' use dired for notes.
;;   (setf (alist-get consult-notes-category embark-exporters-alist) #'embark-export-dired))


(provide 'init-notes)
;;; init-notes.el ends here
#+end_src



*** Denote

#+begin_src emacs-lisp :tangle lisp/init-notes-denote.el
;;; init-notes-denote.el --- Denote configuration          -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://protesilaos.com/emacs/denote>

;;; Code:

(require 'config-notes)

(use-package denote
  :config
  (setopt denote-directory ceamx-notes-default-dir)
  (setopt denote-known-keywords '("emacs"))
  (setopt denote-infer-keywords t)
  (setopt denote-sort-keywords t)
  (setopt denote-prompts '(title keywords))
  ;; TODO: exclude ".archive"
  ;; (setopt denote-excluded-directories-regexp nil)
  (setopt denote-excluded-keywords-regexp nil)
  ;; Pick dates, where relevant, with Org's advanced interface:
  (setopt denote-date-prompt-use-org-read-date t)
  (setopt denote-allow-multi-word-keywords t)
  (setopt denote-date-format nil)       ; read doc string
  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
  ;; advanced.
  (setopt denote-backlinks-show-context t)
  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
  ;; We use different ways to specify a path for demo purposes.
  (setopt denote-dired-directories
    (list denote-directory
      (thread-last denote-directory (expand-file-name "attachments"))))
  (add-hook 'dired-mode-hook #'denote-dired-mode)
  ;; Alternatively:
  ;; (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

  ;; Here is a custom, user-level command from one of the examples we
  ;; showed in this manual.  We define it here and add it to a key binding
  ;; below.
  (defun my-denote-journal ()
    "Create an entry tagged 'journal' with the date as its title.
If a journal for the current day exists, visit it.  If multiple
entries exist, prompt with completion for a choice between them.
Else create a new file."
    (interactive)
    (let* ((today (format-time-string "%A %e %B %Y"))
           (string (denote-sluggify today))
           (files (denote-directory-files-matching-regexp string)))
      (cond
       ((> (length files) 1)
        (find-file (completing-read "Select file: " files nil :require-match)))
       (files
        (find-file (car files)))
       (t
        (denote
         today
         '("journal"))))))

  ;; Key bindings specifically for Dired.
  (define-keymap :keymap dired-mode-map
    "C-c C-d C-i" #'denote-link-dired-marked-notes
    "C-c C-d C-r" #'denote-dired-rename-marked-files
    "C-c C-d C-R" #'denote-dired-rename-marked-files-using-front-matter)

  (with-eval-after-load 'org-capture
    (setopt denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("n" "New note (with denote.el)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))

  ;; Also check the commands `denote-link-after-creating',
  ;; `denote-link-or-create'.  You may want to bind them to keys as well.

  ;; If you want to have Denote commands available via a right click
  ;; context menu, use the following and then enable
  ;; `context-menu-mode'.
  (add-hook 'context-menu-functions #'denote-context-menu))


;;
;;; denote-menu <https://github.com/namilus/denote-menu>
;;

(use-package denote-menu
  :after (denote)
  :commands (list-denotes
              denote-menu-clear-filters
              denote-menu-filter
              denote-menu-filter-by-keyword
              denote-menu-filter-out-keyword
              denote-menu-export-to-dired)
  :config
  (keymap-global-set "C-c z" #'list-denotes)

  ;; TODO: `define-keymap'
  (keymap-set denote-menu-mode-map "c" #'denote-menu-clear-filters)
  (keymap-set denote-menu-mode-map "/ r" #'denote-menu-filter)
  (keymap-set denote-menu-mode-map "/ k" #'denote-menu-filter-by-keyword)
  (keymap-set denote-menu-mode-map "/ o" #'denote-menu-filter-out-keyword)
  (keymap-set denote-menu-mode-map "e" #'denote-menu-export-to-dired))

;;
;;; Integrations
;;

;; <https://github.com/mclear-tools/consult-notes#denote>
(after! [denote consult-notes]
  (consult-notes-denote-mode)
  ;; Search only for text files in Denote dir.
  (setopt consult-notes-denote-files-function
        (function denote-directory-text-only-files)))



(provide 'init-notes-denote)
;;; init-notes-denote.el ends here
#+end_src


** Org-Mode

*** Tasks

**** TODO Meow overwrites repeat-mode?

**** TODO Fix no-cycle when press TAB at headline EOL

I think this happens because when there is folded content EOL is considered
part of that folded content, so the TAB press is technically not on the
headline.


**** TODO Repeat-mode for navigating tree

**** TODO Bind =org-insert-subheading=

**** TODO Figure out why completion is broken

**** TODO Figure out why Elisp source blocks are broken

**** TODO Electric-pair for equals-sign


*** Customizations

#+begin_src emacs-lisp :tangle lisp/init-org.el
;;; init-org.el --- org-mode initialisation -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for `org-mode'.

;;;; Resources

;; <https://github.com/james-stoup/emacs-org-mode-tutorial>

;;; Investigate:

;; TODO: <https://orgmode.org/worg/org-contrib/org-choose.html>
;; TODO: <https://github.com/tarsius/org-elisp-help/blob/main/org-elisp-help.el>

;;; Code:

;;; Requirements

(require 'lib-common)

(require 'config-notes)
(require 'config-org)

;;; Configuration of important paths

;; Most notes will be stored in `ceamx-notes-dir'.
;;
;; The value of `org-directory' will be used as a default destination for new
;; notes, especially as they relate to tasks and agendas. For that reason, use
;; the `ceamx-agenda-dir'.
;;
;; Must be set before loading Org-Mode.
(defvar org-directory ceamx-agenda-dir)
(f-mkdir-full-path org-directory)

;;; Configure general Org-Mode settings

;; <https://github.com/minad/org-modern#configuration>

(use-feature! org
  :demand t
  :commands (org-priority-up org-priority-down)

  :init
  (add-hook 'org-mode-hook #'prettify-symbols-mode)

  (def-hook! +org-mode-init-keys-h ()
    'org-mode-hook
    "Adjust global keybindings in `org-mode' buffers."
    (keymap-global-set "M-g o" #'consult-org-heading))

  :config
  (setopt org-agenda-files
    (append
      (f-glob "*.org" ceamx-agenda-dir)
      (f-glob "*.org" ceamx-work-notes-dir)))

;;;; Editing settings

;;;;; Tags

  (setopt org-auto-align-tags nil)
  (setopt org-tags-column 0)

  (setopt org-fold-catch-invisible-edits 'smart)

;;;;; Headings / List Items

  ;; Prevent TAB behavior oddities at the end of headlines.
  ;; When nil, pressing TAB at the end of a headline whose content is folded
  ;; will act on the folded (non-visible) area instead of the headline, which
  ;; may cause unexpected changes to the content (depending on the setting of `org-catch-invisible-edits'.
  (setopt org-special-ctrl-a/e t)

  ;; Instead of forcing this always, use the function
  ;; `org-insert-heading-respect-content' directly, bound to [C-<return>].
  (setopt org-insert-heading-respect-content nil)

  (setopt org-M-RET-may-split-line nil)
  (setopt org-cycle-emulate-tab t)
  (setopt org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))

;;;;; Source code blocks

  ;; Indenting code blocks by default is unnecessary and confusing.
  (setopt org-edit-src-content-indentation 0)
  (setopt org-src-preserve-indentation t)

;;;; Appearance settings

;;;;; Text formatting

  (setopt org-ellipsis "…")
  (setopt org-hide-emphasis-markers nil)
  (setopt org-pretty-entities t)

;;;;; Images

  (setopt org-image-actual-width 300)
  (setopt org-startup-with-inline-images t)

;;;;; Folding and indentation

  (setopt org-indent-indentation-per-level 4)
  (setopt org-startup-folded 'content)

  ;; Avoid unnecessary indentation effects unless specified in file header.
  (setopt org-startup-indented nil)

;;;; Workflow and state settings

  (setopt org-log-done 'time)
  (setopt org-todo-keywords
    '((sequence
        "TODO(t)"
        "INPRG(i@/!)"
        "BLOCKED(b@)"
        "HOLD(h@)"
        "PROJ(p)"
        "|"
        "DONE(d!)"
        "CANCELLED(x@/!)")))

;;;; Keybinding settings

  (setopt org-return-follows-link t)

  (keys! org-mode-map
    "C-c <up>" #'org-priority-up
    "C-c <down>" #'org-priority-down
    "C-c a" #'org-agenda
    "C-c l" #'org-store-link
    "C-c c" #'org-capture

    ;; Swap these around, as I am more likely to adjust subtree than insert an
    ;; arbitrary date from the calendar.
    "C-c <" #'org-promote-subtree
    "C-c C-<" #'org-date-from-calendar
    "C-c >" #'org-demote-subtree
    "C-c C->" #'org-goto-calendar)

;;;; Agenda settings

;;;;; Agenda appearance

  (setopt org-agenda-tags-column 0)
  (setopt org-agenda-block-separator ?─)
  (setopt org-agenda-time-grid
    '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (setopt org-agenda-current-time-string
    "⭠ now ─────────────────────────────────────────────────"))

;;; Configurate `org-capture' templates with the help of `doct'

;; <https://github.com/progfolio/doct>

(use-package doct
  :demand t
  :autoload (doct))

(use-feature! org-capture
  :after (doct)
  :config
  (setopt org-capture-templates
    (doct `(("Inbox"
              :keys "t"
              ;; TODO: make sure this icon spec is up to date with 2024
              :icon ("checklist" :set "octicon" :color "green")
              ;; TODO: should this be evaled/expanded?
              :file ceamx-org-capture-default-file
              :prepend t
              :headline "Inbox"
              :type entry
              :template ("* TODO %?"
                          "%i %a"))))))

;;; org-ql :: <https://github.com/alphapapa/org-ql>

;; > A searching tool for Org-mode, including custom query languages, commands,
;; > saved searches and agenda-like views, etc.

(use-package org-ql)

;;; org-modern <https://github.com/minad/org-modern>

;; (use-package org-modern
;;   :commands (org-modern-mode org-modern-agenda)
;;   :init
;;   (add-hook 'org-mode-hook #'org-modern-mode)
;;   (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))

;;; Provide agenda improvements with `org-super-agenda'

(use-package org-super-agenda
  :demand t)

;;; Support drag-and-drop images to org-mode

;; <https://github.com/abo-abo/org-download>

(use-package org-download
  :ensure t
  :demand t
  :init
  (require 'org-download)
  (add-hook 'dired-mode-hook #'org-download-enable))

;;; Automatically surround pasted code with source block markup via `org-rich-yank'

;; <https://github.com/unhammer/org-rich-yank>

(use-package org-rich-yank
  :ensure t
  :demand t                             ; See README as to why
  :after (org-download)
  :config
  (keymap-set org-mode-map "C-M-y" #'org-rich-yank))

;;; Use `org-web-tools' to view, capture, and archive webpages in org-mode

(use-package org-web-tools
  :defer t)

;;; Automatically tangle literate Org files with `auto-tangle-mode'

(package! (auto-tangle-mode
         :host github
         :repo "progfolio/auto-tangle-mode.el")
  (autoload 'auto-tangle-mode "auto-tangle-mode"))

(provide 'init-org)
;;; init-org.el ends here
#+end_src


*** User Options

#+begin_src emacs-lisp :tangle lisp/config-org.el
;;; config-org.el --- org-mode variables             -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(require 'config-notes)

(defvar ceamx-org-capture-default-file
  (expand-file-name
    (concat (file-name-as-directory ceamx-agenda-dir) "inbox.org"))
  "Path to default inbox file for new `org-capture' entries.")

(provide 'config-org)
;;; config-org.el ends here
#+end_src


** Controls

#+begin_src emacs-lisp :tangle lisp/init-controls.el
;;; init-controls.el --- Controlling various subsystems  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; " Is Control controlled by its need to control? "

;;; Code:

;;; Requirements

(require 'ceamx-keymaps)

(require 'lib-keys)

;;; Launch

(keymap-global-set "C-c C-o" '("[ Launch ]" . ceamx-launch-map))
(keymap-global-set "C-c o" '("[ Launch ]" . ceamx-launch-map))

;; (define-keymap :keymap ceamx-launch-map)

;;; Toggle

(keymap-global-set "C-c C-t" '("[ Toggle ]" . ceamx-toggle-map))
(keymap-global-set "C-c t" '("[ Toggle ]" . ceamx-toggle-map))

(defmap! ceamx-toggle-map
  "l" #'display-line-numbers-mode
  "w" '("side windows" . window-toggle-side-windows))


(provide 'init-controls)
;;; init-controls.el ends here
#+end_src


** Dashboard

#+begin_src emacs-lisp :tangle lisp/init-dashboard.el
;;; init-dashboard.el --- Dashboard support  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://github.com/emacs-dashboard/emacs-dashboard>

;;; Code:

(require 'ceamx-paths)

(require 'lib-common)

(use-package dashboard
  :ensure t
  :demand t
  :after (nerd-icons)

  :preface
  (setopt initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

  :init
  (add-hook 'ceamx-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'ceamx-after-init-hook #'dashboard-initialize)
  ;; HACK: Work around <https://github.com/emacs-dashboard/emacs-dashboard/issues/499>
  ;; (dashboard-setup-startup-hook)
  (add-hook 'window-size-change-functions #'dashboard-resize-on-hook 100)
  (add-hook 'window-setup-hook #'dashboard-resize-on-hook)

  :config
  (setopt dashboard-banner-logo-title "C E A M X")
  (setopt dashboard-startup-banner 'official)
  (setopt dashboard-projects-backend 'project-el)
  (setopt dashboard-center-content t)
  (setopt dashboard-display-icons-p t)
  (setopt dashboard-icon-type 'nerd-icons)
  ;; NOTE: This value results in a warning because `dashboard-items' specifies an
  ;; incorrect `:type'. The value should be an alist, not a list of alists. At
  ;; the time of writing, the value is copied directly from the package README.
  ;; <https://github.com/emacs-dashboard/emacs-dashboard/issues/489>
  (setopt dashboard-items '((recents  . 5)
                             (bookmarks . 5)
                             (projects . 5)
                             (agenda . 5)
                             (registers . 5))))

(provide 'init-dashboard)
;;; init-dashboard.el ends here
#+end_src


** Dired, the Directory Editor

#+begin_src emacs-lisp :tangle lisp/init-dired.el
;;; init-dired.el --- Dired -*- lexical-binding: t -*-

;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  Configuration for Dired and extensions.

;; FIXME: Hide directories like ".git" and ".direnv" by default...
;;        eza/fd/rg/etc. do this by default but Dired should prob use GNU ls

;;; Code:

(require 'lib-common)

;;; Dired, the Directory Editor

(use-feature! dired
  :commands (dired-omit-mode)

  :config
  (setopt dired-auto-revert-buffer t)
  (setopt dired-dwim-target t)
  (setopt dired-kill-when-opening-new-dired-buffer t)
  (setopt dired-listing-switches "-al --group-directories-first")
  (setopt dired-mouse-drag-files t)

  ;; TODO: does this really belong here?
  (setopt mouse-drag-and-drop-region-cross-program t)

  (define-keymap :keymap dired-mode-map
    "M-p" #'dired-up-directory))

;;; Provide Dired with polished interface and feature enhancements with `dirvish'

;;  <https://github.com/alexluigit/dirvish>
;;  <https://github.com/alexluigit/dirvish/blob/main/docs/CUSTOMIZING.org#Sample-config>

(use-package dirvish
  :commands (dirvish-override-dired-mode
              dirvish-peek-mode
              dirvish-side-follow-mode)

  :init
  (after! 'dired
    (dirvish-override-dired-mode))

  ;; Omit "uninteresting" files.
  ;; See `dired-omit-files', `dired-omit-lines', `dired-omit-extensions'
  (add-hook 'dired-mode-hook #'dired-omit-mode)

  :config
  (dirvish-peek-mode)                   ; Preview minibuffer file selections
  (dirvish-side-follow-mode)

  ;; TODO: use consts; there's no straightforward way to access these values
  ;; without custom elisp afaik
  ;; FIXME: ensure directories exist!
  (setopt dirvish-quick-access-entries
    '(("c" "~/Documents/cheatsheets/" "Cheatsheets")
       ("D" "~/Downloads/" "Downloads")
       ("r" "~/Documents/reference" "Reference")
       ("n" "~/Documents/notes/" "Notes")))

  (setopt dirvish-mode-line-format
    '( :left (sort symlink)
       :right (omit yank index)))

  ;; previous value, in case:
  ;; (setopt dirvish-attributes '(all-the-icons file-time file-size collapse subtree-state vc-state))
  (setopt dirvish-attributes
    '(vc-state
       subtree-state
       nerd-icons
       collapse
       file-time
       file-size))
  (setopt dirvish-subtree-state-style 'nerd)

  ;; <https://github.com/alexluigit/dirvish/blob/main/docs/CUSTOMIZING.org#mouse-settings>
  (def-hook! ceamx--dirvish-no-mouse-follows-link (&rest _)
    'dirvish-find-entry-hook
    "Disable `mouse-1-click-follows-link' in `dirvish' buffers."
    (setopt mouse-1-click-follows-link nil))

  (define-keymap :keymap dirvish-mode-map
    ;; NOTE: `mouse-1-click-follows-link' must be nil (see above)
    "<mouse-1>" #'dirvish-subtree-toggle-or-open
    "<mouse-2>" #'dired-mouse-find-file-other-window
    "<mouse-3>" #'dired-mouse-find-file
    "a" #'dirvish-quick-access
    "f" #'dirvish-file-info-menu
    "y" #'dirvish-yank-menu
    "N" #'dirvish-narrow
    "^" #'dirvish-history-last
    "h" #'dirvish-history-jump          ; remapped `describe-mode'
    "s" #'dirvish-quicksort             ; remapped `dired-sort-toggle-or-edit'
    "v" #'dirvish-vc-menu               ; remapped `dired-view-file'
    "q" #'dirvish-quit
    "TAB" #'dirvish-subtree-toggle
    "M-f" #'dirvish-history-go-forward
    "M-b" #'dirvish-history-go-backward
    "M-l" #'dirvish-ls-switches-menu
    "M-m" #'dirvish-mark-menu
    "M-t" #'dirvish-layout-toggle
    "M-s" #'dirvish-setup-menu
    "M-e" #'dirvish-emerge-menu
    "M-j" #'dirvish-fd-jump))

;;; Provide addtional syntax highlighting for Dired with `diredfl'

;; <https://github.com/purcell/diredfl>

(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
    ;; highlight parent and directory preview as well
    (dirvish-directory-view-mode . diredfl-mode))

  :config
  (set-face-attribute 'diredfl-dir-name nil :bold t))

(provide 'init-dired)
;;; init-dired.el ends here
#+end_src

**


** Printing
#+begin_src emacs-lisp :tangle lisp/init-printing.el
;;; init-printing.el --- Support for printing documents  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; FIXME: prints raw PDF data

;;; Code:

(require 'lib-common)

(use-feature! printing
  :defer 2
  :commands (pr-update-menus)
  :config
  (require 'printing)
  ;; EPSON WF-3520
  (setopt printer-name "LABORTTY")
  ;; (setopt lpr-switches '())
  (pr-update-menus))

(provide 'init-printing)
;;; init-printing.el ends here
#+end_src


**


** DISABLED Newsreader



#+begin_src emacs-lisp :tangle lisp/init-news.el
;;; init-feeds.el --- News feed (RSS/Atom) subscription support  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: news, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; But do I really want to know what's happening outside of Emacs?

;; FIXME: use <https://github.com/skeeto/elfeed>
;; FIXME: OPML instead of weird lists

;;; Code:

;; (require 'ceamx-user)

;; (use-feature! [newsticker]
;;   (setopt newsticker-url-list ceamx-news-feed-url-list))



(provide 'init-news)
;;; init-news.el ends here
#+end_src


*** TODO Feature name =init-feeds= does not match the filename =init-news.el=


** Surfing the Wild Web of Words (EWW)

#+begin_src emacs-lisp :tangle lisp/init-eww.el
;;; init-eww.el --- Surfing the Wild Web of Words  -*- lexical-binding: t; -*-

;; TODO: headers

;;; Commentary:

;;; Code:

;;; Requirements

(require 'ceamx-keymaps)
(require 'lib-keys)

(require 'lib-eww)

(autoload 'eww "eww")

;;; Configuration
#+end_src


*** DISABLED Tell Emacs we want its Web Wowser to handle URL browsing by default

Currently, since so many URLs point to GitHub, and GitHub will not function
without JavaScript, it does not make sense to use EWW by default.

#+begin_src emacs-lisp :tangle lisp/init-eww.el
;; (setopt browse-url-browser-function 'eww-browse-url)
#+end_src


**** TODO Use a different browser for some domains


*** Configure EWW settings before loading

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(setopt shr-use-colors t)
(setopt shr-folding-mode t)
(setopt shr-bullet "• ")

(setopt eww-search-prefix "https://duckduckgo.com/html?q=")

;; HTTP headers may contain user information, which we can limit as needed.
;; When providing a list of symbols, the symbols indicate what NOT to send.
;; TODO: Move this elsewhere, as it probably affects other HTTP requests.
(setopt url-privacy-level '(email lastloc))
#+end_src


*** EWW: Keybindings

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(keys! ceamx-launch-map
  "b" #'eww
  "W" #'ceamx/eww-wiki)

(after! 'eww
  (keys! eww-mode-map
    "," '("scroll down" . scroll-up-command)
    "." '("scroll up" . scroll-down-command)
    "o" '("open link" . link-hint-open-link)))
#+end_src

*** Cleanup the rendering of some pages

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(add-hook 'eww-after-render-hook #'ceamx-eww-rerender)
#+end_src

#+begin_src emacs-lisp :tangle lisp/init-eww.el
(provide 'init-eww)
;;; init-eww.el ends here
#+end_src


*** EWW: Library

#+begin_src emacs-lisp :tangle lisp/lib-eww.el
;;; lib-eww.el --- Helpers for Ceamx EWW  -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery
;; Copyright (C) 2018  Howard X. Abrams

;; Author: Chris Montgomery <chris@cdom.io>
;;         Howard X. Abrams <howard.abrams@workday.com>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.

;;; Commentary:

;;; Sources:

;; - <https://gitlab.com/howardabrams/spacemacs.d/-/blob/51196e861da9a76a02f1159397ba85b936cdfe27/layers/ha-eww/funcs.el>
;; - <https://writequit.org/org/settings.html#sec-1-61>

;;; Code:

;;; Requirements

(require 'cl-lib)
(require 'url)

;;; Variables

(defun ceamx/eww-wiki (text)
  "Search Wikipedia for TEXT."
  (interactive (list (read-string "Wiki for: ")))
  (eww (format "https://en.m.wikipedia.org/wiki/Special:Search?search=%s"
               (url-encode-url text))))

(defvar ceamx-eww-reddit-comment-header-regexp
  (rx "level "
      (one-or-more digit)
      (zero-or-more anything)
      line-end

      (group (one-or-more anything))
      line-end

      (one-or-more digit)
      " points"
      (one-or-more anything)
      line-end)
  "Regular expression for matching Reddit comments.")

(defvar ceamx-eww-github-repo-landing-readme-header-regexp
  (rx line-start
      "• "
      (one-or-more anything) ; SVG icon for the readme
      "README"
      line-end)
  "Regular expression matching the header for the README file content.")

(defvar ceamx-eww-github-begin-file-content-regexp
  (rx
   (one-or-more digit)
   " lines ("
   (one-or-more digit)
   " sloc) "
   (one-or-more digit)
   " ")
  "Regular expression for matching the start of a repo file on GitHub.")

;; TODO: support formats other than markdown too
(defvar ceamx-eww-github-footer-text-regexp
  (rx line-start
      (one-or-more anything)            ; SVG of GitHub logo
      " © "
      (one-or-more digit)
      " GitHub, Inc."
      line-end)
  "GitHub's copyright line is a good indication of the end of the content.
Note that as of 2024-03-13, repo file views no longer have a footer.")

;;; Functions

(defun ceamx/eww-clean-reddit ()
  "Remove a lot of the cruft in a rendered Reddit page."
  (interactive)
  (read-only-mode -1)

  ;; 2 comments
  ;; 79% Upvoted
  ;; What are your thoughts? Log in or Sign uplog insign up
  ;; Sort by

  ;; level 1
  ;; vale_fallacia
  ;; 1 point · 12 hours ago

  (flush-lines (rx line-start
                   (zero-or-more whitespace)
                   "Submit"))
  (while (re-search-forward ceamx-eww-reddit-comment-header-regexp nil t)
    (replace-match (concat "** " (match-string 1))))
  (read-only-mode 1))

(defun ceamx/eww-clean-github ()
  "Jump to the beginning of the content on a GitHub repo page."
  (interactive)
  (when (re-search-forward ceamx-eww-github-footer-text-regexp nil t)
    (read-only-mode -1)
    ;; (previous-line 2) ; "interactive use only"
    (forward-line -2)
    (delete-region (point) (point-max))
    (goto-char (point-min)))

  (when (or (re-search-forward ceamx-eww-github-begin-file-content-regexp nil t)
            (re-search-forward ceamx-eww-github-repo-landing-readme-header-regexp nil t))
    (forward-line 2)
    (recenter-top-bottom 0)))

(defun ceamx/eww-clean-stackoverflow ()
  "Jump to the start of interesting content on a Stack Overflow page."
  (interactive)
  (read-only-mode -1)

  ;; (mapcar (lambda (regex) (flush-lines regex))
  ;;         '("^up vote "
  ;;           "^answered "
  ;;           "^asked [A-Z]" "^edited [A-Z]"
  ;;           "^add a comment "
  ;;           "^share|"
  ;;           "^active oldest"))
  (mapc (lambda (regex) (flush-lines regex))
        '("^up vote "
          "^answered "
          "^asked [A-Z]" "^edited [A-Z]"
          "^add a comment "
          "^share|"
          "^active oldest"))

  (goto-char 0)
  (re-search-forward "Ask Question" nil t)
  (backward-paragraph 2)
  (forward-line)
  (recenter-top-bottom 0)

  (flush-lines "^Ask Question")
  (read-only-mode 1))

(defun ceamx-eww-rerender ()
  "Invoke a rerenderer function based on the URL to be displayed."
  (declare-function eww-current-url "eww")
  (declare-function eww-readable "eww")

  (let* ((url  (url-generic-parse-url (eww-current-url)))
         (host (url-host url))
         (path (car (url-path-and-query url)))
         (bits (split-string host "\\."))
         (site (cl-first (last bits 2))))
    (cond
     ((equal site "google")        (eww-readable))
     ((equal site "reddit")        (ceamx/eww-clean-reddit))
     ((equal site "github")        (ceamx/eww-clean-github))
     ((equal site "stackoverflow") (ceamx/eww-clean-stackoverflow)))))

;; FIXME: dependency i am not using -- replace function
;; (defun ceamx/eww-copy-feed-url ()
;;   "Take the EWW's current URL location and pass it to the `feed-discovery' function."
;;   (interactive)
;;   (feed-discovery-copy-feed-url (eww-current-url)))

(provide 'lib-eww)
;;; lib-eww.el ends here
#+end_src

*** EWW: Sources

**** [[https://gitlab.com/howardabrams/spacemacs.d/-/blob/51196e861da9a76a02f1159397ba85b936cdfe27/layers/ha-eww/funcs.el][layers/ha-eww/funcs.el · 51196e861da9a76a02f1159397ba85b936cdfe27 · Howard Abrams / spacemacs.d · GitLab]]


** Tools

*** General

**** Customization

#+begin_src emacs-lisp :tangle lisp/init-tools.el
;;; init-tools.el --- Tools and utilities            -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Tools and, of course, utilities.

;;; Code:

;;; Requirements

(require 'seq)

(require 'lib-common)

;;; Install `pandoc-mode'

;; <https://joostkremers.github.io/pandoc-mode/>

(package! pandoc-mode
  (add-hook 'markdown-mode-hook #'pandoc-mode)

  (add-hook 'pandoc-mode-hook #'pandoc-load-default-settings))

;;; Install the `unpackaged' library of useful yet unsubstantial Emacs Lisp code

;; <https://github.com/alphapapa/unpackaged.el>

(package! (unpackaged :host github :repo "alphapapa/unpackaged.el"))

;;; DISABLED Install `org-tanglesync' to sync tangled source code blocks

;; (package! org-tanglesync
;;   ;; FIXME: try to not do this
;;   (require 'org-tanglesync)

;;   (add-hook 'org-mode-hook #'org-tanglesync-mode)
;;   ;; (remove-hook 'org-mode-hook #'org-tanglesync-mode)

;;   (add-hook 'prog-mode-hook #'org-tanglesync-watch-mode)
;;   ;; (remove-hook 'prog-mode-hook #'org-tanglesync-watch-mode)

;;   ;; (add-hook 'text-mode-hook #'org-tanglesync-watch-mode)
;;   ;; (remove-hook 'text-mode-hook #'org-tanglesync-watch-mode)

;;   (setopt org-tanglesync-watch-files
;;     (seq-map (apply-partially #'file-name-concat user-emacs-directory)
;;       '("config-sync.org")))

;;   (global-keys!
;;     "C-c M-i" #'org-tanglesync-process-buffer-interactive
;;     "C-c M-a" #'org-tanglesync-process-buffer-automatic))

(provide 'init-tools)
;;; init-tools.el ends here
#+end_src


*** Augementated Intelligentry [=init-tools-ai.el=]

Providing integrations with LLMs and other simulation machines.

**** Customization

#+BEGIN_SRC emacs-lisp :tangle lisp/init-tools-ai.el
;;; init-tools-ai.el --- Support for AI/LLM interaction  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://github.com/xenodium/chatgpt-shell/blob/main/README.org>

;;; Code:

(use-package chatgpt-shell
  :ensure t
  :config
  (setopt chatgpt-shell-openai-key
    (lambda ()
      (auth-source-pass-get 'secret "openai-key"))))

(provide 'init-tools-ai)
;;; init-tools-ai.el ends here
#+END_SRC


*** Budgeting
#+begin_src emacs-lisp :tangle lisp/init-tools-ledger.el
;;; init-tools-ledger.el --- Support for ledger      -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://hledger.org/>
;; <https://github.com/narendraj9/hledger-mode>
;; <https://hledger.org/1.30/hledger.html#journal>

;;; Code:

(require 'lib-common)

(defvar ceamx-ledger-dir (expand-file-name "~/ledger"))

(use-package hledger-mode
  :mode ("\\.journal\\'" "\\.hledger\\'")
  :commands (hledger-enable-reporting)

  :preface
  (defun ceamx/hledger-next-entry ()
    "Move to next entry and pulse."
    (interactive)
    (hledger-next-or-new-entry)
    (hledger-pulse-momentary-current-entry))

  (defun ceamx/hledger-prev-entry ()
    "Move to last entry and pulse."
    (interactive)
    (hledger-backward-entry)
    (hledger-pulse-momentary-current-entry))

  ;; TODO: use theme values
  ;; (defface hledger-warning-face
  ;;   '((((background dark))
  ;;      :background "Red" :foreground "White")
  ;;     (((background light))
  ;;      :background "Red" :foreground "White")
  ;;     (t :inverse-video t))
  ;;   "Face for warning"
  ;;   :group 'hledger)

  ;; (defun +hledger-view-mode-hl-freq-accts-h ()
  ;;     "Highlight frequently-changing hledger accounts.
  ;; For use as a hook on `hledger-view-mode-hook'."
  ;;     (run-with-timer 1
  ;;       nil
  ;;       (lambda ()
  ;;         (when (equal hledger-last-run-command
  ;;                 "balancesheet")
  ;;           ;; highlight frequently changing accounts
  ;;           (highlight-regexp "^.*\\(savings\\|cash\\).*$")
  ;;           (highlight-regexp "^.*credit-card.*$"
  ;;             'hledger-warning-face)))))


  (defun +hledger-accounts-completions ()
    "Return completion candidates for hledger accounts."
    (when-let ((bounds (and (boundp 'hledger-accounts-cache)
                            (bounds-of-thing-at-point 'symbol))))
      (list (car bounds) (point) hledger-accounts-cache)))

  :init

  (def-hook! +hledger-accounts-capf-h () '(hledger-mode-hook)
             "Add hledger accounts to completion-at-point functions."
             (add-hook 'completion-at-point-functions 'hledger-completion-accounts))

  (setopt hledger-jfile (file-name-concat ceamx-ledger-dir "main.journal"))

  ;; (setq hledger-email-secrets-file (expand-file-name "secrets.el" emacs-assets-directory))

  ;; Expanded account balances in the overall monthly report are
  ;; mostly noise and do not convey any meaningful information.
  ;; (setopt hledger-show-expanded-report nil)

  ;; TODO:
  ;; (when (boundp 'my-hledger-service-fetch-url)
  ;;   (setq hledger-service-fetch-url
  ;;     my-hledger-service-fetch-url))

  (dolist (fn '(hl-line-mode
                ;; FIXME: possibly performance issue? emacs at constant 20% but
                ;; probably unrelated
                ;; +hledger-view-mode-hl-freq-accts-h

                ;; TODO: ???
                ;; center-text-for-reading
                ))
    (add-hook 'hledger-view-mode-hook fn))

  :config
  (push "\\*Personal Finance\\*" popper-reference-buffers)

  (define-keymap :keymap hledger-mode-map
    "C-c e" #'hledger-jentry
    ;; NOTE: Overrides global binding for completion-at-point/cape commands.
    "M-p" #'ceamx/hledger-prev-entry
    "M-n" #'ceamx/hledger-next-entry))

(use-package flycheck-hledger
  :after (flycheck hledger-mode)

  :init
  (use-feature! flycheck
    :commands (flycheck-mode)
    :init
    (add-hook 'hledger-mode-hook #'flycheck-mode))

  :config
  (setopt flycheck-hledger-strict t))

;; TODO
;; (use-package hledger-input
;;   ;; :pin manual
;;   ;; :load-path "packages/rest/hledger-mode/"
;;   ;; :bind (("C-c e" . hledger-capture)
;;   ;;        :map hledger-input-mode-map
;;   ;;        ("C-c C-b" . popup-balance-at-point))
;;   :preface
;;   (defun popup-balance-at-point ()
;;     "Show balance for account at point in a popup."
;;     (interactive)
;;     (if-let ((account (thing-at-point 'hledger-account)))
;;         (message (hledger-shell-command-to-string (format " balance -N %s "
;;                                                           account)))
;;       (message "No account at point")))

;;   :config
;;   (setq hledger-input-buffer-height 20)
;;   (add-hook 'hledger-input-post-commit-hook #'hledger-show-new-balances)
;;   (add-hook 'hledger-input-mode-hook #'auto-fill-mode)
;;   (add-hook 'hledger-input-mode-hook
;;             (lambda ()
;;               (make-local-variable 'company-idle-delay)
;;               (setq-local company-idle-delay 0.1))))

(provide 'init-tools-ledger)
;;; init-tools-ledger.el ends here
#+end_src

*** PDF-Tools
#+begin_src emacs-lisp :tangle lisp/init-tools-pdf.el
;;; init-tools-pdf.el --- Support for working with PDF files  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local, docs

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; <https://github.com/vedang/pdf-tools>

;;; Sources:

;; <https://github.com/jwiegley/dot-emacs/blob/master/init.org>

;; `pdf-tools' should be installed installed via Nixpkgs because it requires
;; some separate binaries.

;; TODO: <https://github.com/doomemacs/doomemacs/blob/master/modules/tools/pdf/config.el>

;;; Code:

(require 'lib-common)

(use-feature! pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :custom
  (pdf-tools-handle-upgrades nil)
  :config
  (dolist
    (pkg
      '(pdf-annot pdf-cache pdf-dev pdf-history pdf-info pdf-isearch
         pdf-links pdf-misc pdf-occur pdf-outline pdf-sync
         pdf-util pdf-view pdf-virtual))
    (require pkg))
  (pdf-tools-install))

;; (use-package pdf-tools
;;   :commands (pdf-tools-install)

;;   :init
;;   (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
;;   (add-to-list 'magic-mode-alist '("%PDF" . pdf-view-mode))

;;   (setopt pdf-tools-handle-upgrades nil)
;;   :config
;;   (dolist
;;     (pkg
;;       '(pdf-annot pdf-cache pdf-dev pdf-history pdf-info pdf-isearch
;;          pdf-links pdf-misc pdf-occur pdf-outline pdf-sync
;;          pdf-util pdf-view pdf-virtual))
;;     (require pkg))
;;   (pdf-tools-install))

;; (use-package saveplace-pdf-view
;;   :defer 5)

(provide 'init-tools-pdf)
;;; init-tools-pdf.el ends here
#+end_src

** Fun

#+begin_src emacs-lisp :tangle lisp/init-fun.el
;;; init-fun.el --- Configure the fun                -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; It's fun.

;;; Code:

(require 'lib-common)

;;;; `zone' [builtin]

;; <https://www.emacswiki.org/emacs/ZoneMode>

(use-feature! zone
  :autoload (zone-when-idle)
  :defines (zone-timer)

  :config
  ;; TODO: verify
  (def-hook! ceamx-zone-when-idle-h ()
    'ceamx-emacs-startup-hook
    "Zone out when idle.
Return the new `zone' timer."
    (zone-when-idle (* 60 10))))

;; FIXME: broken: wrong type argument arrayp (for pgm arg)
;;        (where did this even come from? emacswiki?)
;; (defun zone-choose (pgm)
;;   "Choose a PGM to run for `zone'."
;;   (interactive
;;     (list
;;       (completing-read
;;         "Program: "
;;         (mapcar 'symbol-name zone-programs))))
;;   (let ((zone-programs (list (intern pgm))))
;;     (zone)))

(provide 'init-fun)
;;; init-fun.el ends here
#+end_src


* Extras

Stuff that doesn't fit anywhere else and easily hides amongst the mess of files.

** Tasks

*** TODO Consolidate =lib-simple= and =lib-text=


** "Simple" Library =lib-simple.el=

#+begin_src emacs-lisp :tangle lisp/lib-simple.el
;;; lib-simple.el --- Common utility commands        -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Chris Montgomery
;; Copyright (C) 2020-2023  Protesilaos Stavrou
;; Copyright (c) 2023  Bruno Boal <egomet@bboal.com>

;; Author: Chris Montgomery <chris@cdom.io>
;;         Protesilaos Stavrou <info@protesilaos.com>
;;         Bruno Boal <egomet@bboal.com>
;; Keywords: local, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;; Sources:

;; <https://github.com/protesilaos/dotfiles/blob/df9834d8db815920bfd7aacfaf11ef16fa089c53/emacs/.emacs.d/ceamx-lisp/ceamx-simple.el>
;; <https://github.com/BBoal/emacs-config/blob/95520648c5f2ed0784d42e98afff035a6964fd2f/bb-lisp/bb-simple.el>

;;; Code:

;;; Requirements

(require 'config-common)

;;; Variables

(defgroup ceamx-simple ()
  "Generic utilities for editing."
  :group 'editing)

(defcustom ceamx-simple-date-specifier "%F"
  "Date specifier for `format-time-string'.
Used by `ceamx/insert-date'."
  :type 'string
  :group 'ceamx-simple)

(defcustom ceamx-simple-time-specifier "%R %z"
  "Time specifier for `format-time-string'.
Used by `ceamx/insert-date'."
  :type 'string
  :group 'ceamx-simple)

;;; Commands

;;;###autoload
(defun ceamx/insert-date (&optional arg)
  "Insert the current date as `ceamx-simple-date-specifier'.

With optional prefix ARG (\\[universal-argument]) also append the
current time understood as `ceamx-simple-time-specifier'.

When region is active, delete the highlighted text and replace it
with the specified date."
  (interactive "P")
  (let* ((date ceamx-simple-date-specifier)
          (time ceamx-simple-time-specifier)
          (format (if arg (format "%s %s" date time) date)))
    (when (use-region-p)
      (delete-region (region-beginning) (region-end)))
    (insert (format-time-string format))))

(defun ceamx-simple--pos-url-on-line (char)
  "Return position of `ceamx-common-url-regexp' at CHAR."
  (when (integer-or-marker-p char)
    (save-excursion
      (goto-char char)
      (re-search-forward ceamx-common-url-regexp (line-end-position) :noerror))))

;;;###autoload
(defun ceamx/escape-url-line (char)
  "Escape all URLs or email addresses on the current line.
When called from Lisp CHAR is a buffer position to operate from
until the end of the line.  In interactive use, CHAR corresponds
to `line-beginning-position'."
  (interactive
   (list
    (if current-prefix-arg
        (re-search-forward
         ceamx-common-url-regexp
         (line-end-position) :no-error
         (prefix-numeric-value current-prefix-arg))
      (line-beginning-position))))
  (when-let ((regexp-end (ceamx-simple--pos-url-on-line char)))
    (goto-char regexp-end)
    (unless (looking-at ">")
      (insert ">")
      (when (search-backward "\s" (line-beginning-position) :noerror)
        (forward-char 1))
      (insert "<"))
    (ceamx/escape-url-line (1+ regexp-end)))
  (goto-char (line-end-position)))

;;;###autoload
(defun ceamx/escape-url-region (&optional beg end)
  "Apply `ceamx/escape-url-line' on region lines between BEG and END."
  (interactive
   (if (region-active-p)
       (list (region-beginning) (region-end))
     (error "There is no region!")))
  (let ((beg (min beg end))
        (end (max beg end)))
    (save-excursion
      (goto-char beg)
      (setq beg (line-beginning-position))
      (while (<= beg end)
        (ceamx/escape-url-line beg)
        (beginning-of-line 2)
        (setq beg (point))))))

;;;###autoload
(defun ceamx/escape-url-dwim ()
  "Escape URL on the current line or lines implied by the active region.
Call the commands `ceamx/escape-url-line' and
`ceamx/escape-url-region' ."
  (interactive)
  (if (region-active-p)
    (ceamx/escape-url-region (region-beginning) (region-end))
    (ceamx/escape-url-line (line-beginning-position))))

(provide 'lib-simple)
;;; lib-simple.el ends here
#+end_src


** General Text Library

#+begin_src emacs-lisp :tangle lisp/lib-text.el
;;; lib-text.el --- Text utilities                   -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chris@cdom.io>
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;;; Sources:

;; <https://github.com/doomemacs/doomemacs/blob/986398504d09e585c7d1a8d73a6394024fe6f164/lisp/lib/text.el>

;;; Code:

;;;###autoload
(defvar ceamx-point-in-comment-functions ()
  "List of functions to run to determine if point is in a comment.

Each function takes one argument: the position of the point. Stops on the first
function to return non-nil.

Used by `ceamx-point-in-comment-p'.")

;;;###autoload
(defun ceamx-point-in-comment-p (&optional pos)
  "Return non-nil if POS is in a comment.
POS defaults to the current position."
  (let ((pos (or pos (point))))
    (if ceamx-point-in-comment-functions
        (run-hook-with-args-until-success 'ceamx-point-in-comment-functions pos)
      (nth 4 (syntax-ppss pos)))))

(provide 'lib-text)
;;; lib-text.el ends here
#+end_src


* Partials
:PROPERTIES:
:header-args: :noweb no
:END:

** TODO File-level ~:noweb yes~ does not seem to have an effect

Setting this on a heading works.


** File header

#+name: file-header
#+begin_src emacs-lisp :noweb no
;; Copyright (c) 2022-2024  Chris Montgomery <chris@cdom.io>

;; Author: Chris Montgomery <chris@cdom.io>
;; URL: https://git.sr.ht/~montchr/ceamx
;; Version: 0.1.0

;; This file is NOT part of GNU Emacs.

;; This file is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.
#+end_src


* To Investigate

- <https://github.com/Genivia/ugrep#using-ugrep-within-emacs>
- <https://manueluberti.eu/posts/2022-08-07-emacs-ugrep/#fn:3>
- <https://manueluberti.eu/posts/2023-10-01-embark-ugrep/>
- <https://manueluberti.eu/posts/2021-09-10-rgrep-and-vc-git-grep/>
- <https://elpa.gnu.org/packages/xr.html>
- <https://github.com/leoliu/easy-kill>

** Issues

*** TODO org-mode needs ~tab-width~ set to 8 otherwise constant errors
