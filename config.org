# -*- eval: (load-file "./ceamx-dev-loader.el") -*-
:PROPERTIES:
:ID:       3101f339-2824-4a4c-baa2-7f83a2d3555d
:END:
#+title: Ceamx: An Emacs Configuration
#+author: Chris Montgomery
#+email: chmont@protonmail.com
#+language: en
#+property: header-args:emacs-lisp+ :results silent :comments org
#+property: header-args:shell+      :results replace
#+property: header-args             :mkdirp yes :tangle no :exports code :noweb yes

This is a user configuration for GNU Emacs.

The target operating system is GNU/Linux, though the configuration
will usually also work on macOS.

* Agenda [0/0]
:PROPERTIES:
:VISIBILITY: folded
:ID:       812b1bf4-a323-427d-b3cd-44f916d6f437
:END:
* Bootstrap
:PROPERTIES:
:VISIBILITY: folded
:END:
** =early-init.el=
:PROPERTIES:
:header-args: :tangle early-init.el :comments both
:VISIBILITY: folded
:END:

*** File Header

#+begin_src emacs-lisp :tangle early-init.el :startup folded :comments no
;;; early-init.el --- Early initialization file  -*- lexical-binding: t; no-byte-compile: t; -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
;;; Code:
#+end_src

*** Prevent package.el from enabling all packages before init

- [[https://old.reddit.com/r/emacs/comments/np6ey4/how_packageel_works_with_use_package/][How package.el Works with Use Package : emacs]]


When nil and using the builtin package manager, ~package-initialize~ must be
invoked in the init process prior to ~require~ing any packages installed with
~package-install~.

When non-nil, there is no need to invoke ~package-initialize~.

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

*** Define proxy hooks for ~after-init-hook~ and ~emacs-startup-hook~

#+begin_src emacs-lisp
(defvar ceamx-after-init-hook '())
(defun ceamx-after-init-hook ()
  (run-hooks 'ceamx-after-init-hook))

(defvar ceamx-emacs-startup-hook '())
(defun ceamx-emacs-startup-hook ()
  (run-hooks 'ceamx-emacs-startup-hook))
#+end_src

*** Performance
**** Minimize garbage collection during startup

[[https://old.reddit.com/r/emacs/comments/yzb77m/an_easy_trick_i_found_to_improve_emacs_startup/iwz1vek/][eli-zaretskii comments on An easy trick I found to improve Emacs start-up time]]:

#+begin_quote
My advice is to spend some time measuring the effect of increased GC threshold
on operations that you care about and that take a long enough time to annoy,
and use the lowest threshold value which produces a tangible improvement.
Start with the default value, then enlarge it by a factor of 2 until you see
only insignificant speedups. I would not expect the value you arrive at to be
as high as 100 MiB.
#+end_quote

See also:

<https://github.com/jwiegley/dot-emacs/blob/master/init.org#startup>

**** Provide insight into garbage-collection activity to inform tuning decisions

#+begin_src emacs-lisp
;; TODO: will a `init-file-debug' check work here?
(setq garbage-collection-messages t)
#+end_src

**** Prevent garbage-collection during init

#+begin_src emacs-lisp
;; NOTE: Either use `gcmh' or make sure to reset this later.  Or else!
(setq gc-cons-threshold (* 128 1024 1024)) ; 128MiB
#+end_src

**** DISABLED Simplify filename pattern-matching during init

- Note taken on [2024-11-19 Tue 20:52] \\
  This was not properly excluded from tangling until restructuring my config
  today!  So it has actually been present in =early-init.el= for some time...
- Note taken on [2024-03-23 Sat 03:24] \\
  Quick followup: I would not be surprised if this had something to do with adding
  ~ceamx-restore-file-name-handler-alist-h~ on ~ceamx-after-init-hook~, which is
  equivalent to ~elpaca-after-init-hook~.
- Note taken on [2024-03-23 Sat 03:01] \\
  This snippet appears to cause Emacs to lose track of its own source files in most sessions.

  ~describe-function~ and ~helpful-function~ report symbols "without a source
  file".  I did not have much to go on until I became aware of ~find-function~.
  After invoking the latter on a function whose source could not be located, I
  noticed a clue: ~find-function~ somehow knew about the source file with a =.el=
  extension.  I investigated the Emacs =lisp/= directory and saw that there are no
  =.el= files -- only =.elc= and =.el.gz=.  The =.elc= files are unreadable, but
  Emacs is still able to read the compressed =gz= archives.  I still do not know
  exactly why it forgot.

  The issue has not been consistent, which likely indicates a race condition.  For
  a while, I assumed the issue occurred in consecutive sessions after calling
  ~restart-emacs~, but that was not the case.

  Disabling this hack is the only consistent way I found to help Emacs find
  itself.  Re-enabling it caused the issue to recur.  In the end, after
  disabling, I see absolutely no difference in startup performance.
  Optimization-by-copypasta strikes again.

  This has been a very frustrating regression in many/most of my Emacs sessions.
  I rely a lot on being able to read Emacs Lisp source code to understand how
  Emacs works -- that is how I learn.  Without being able to view source, I am
  left only with a lack of clarity.

- <https://github.com/jwiegley/dot-emacs/blob/79bc2cff3a28ecd1a315609bbb607eb4ba700f76/init.org#during-loading-of-this-module-clear-file-name-handler-alist>
- <https://old.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/>

#+begin_src emacs-lisp :tangle no
(defvar ceamx-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun ceamx-restore-file-name-handler-alist-h ()
  "Restore the original value of the `file-name-handler-alist' variable.
Intended for use as a callback on `ceamx-after-init-hook'."
  (setq file-name-handler-alist ceamx-file-name-handler-alist)
  (makunbound 'ceamx-file-name-handler-alist))

(add-hook 'ceamx-after-init-hook #'ceamx-restore-file-name-handler-alist-h)
#+end_src

*** Directories and well-known-files
:PROPERTIES:
:ID:       c7734cbe-7b46-40d6-bab4-3003417ac852
:END:

Add the top-level directories to the load path:

#+begin_src emacs-lisp
(dolist (subdir '("autoloads" "lisp" "site-lisp"))
  (let ((dir (expand-file-name subdir user-emacs-directory)))
    (add-to-list 'load-path dir)))
#+end_src

Load the essential core libraries:

#+begin_src emacs-lisp
(require 'ceamx-paths)
(require 'ceamx-lib)
#+end_src

Add all =site-lisp= subdirectories to load-path:

#+begin_src emacs-lisp
(prependq! load-path (ceamx-subdirs ceamx-site-lisp-dir))
#+end_src

Store packages in the designated directory:

#+begin_src emacs-lisp
(setq package-user-dir ceamx-packages-dir)
#+end_src

*** Native compilation settings

#+begin_src emacs-lisp
;; Use preferred cache directories for native compilation.
(startup-redirect-eln-cache ceamx-eln-dir)
(add-to-list 'native-comp-eln-load-path ceamx-eln-dir)

(setq native-comp-async-report-warnings-errors 'silent)
(setq native-compile-prune-cache t)

;; Don't load outdated byte-compiled files.
;;
;; NOTE: This does not handle *recompiling* the outdated files.
;; That would need to be handled during init.
;;
;; More info: <https://github.com/emacscollective/auto-compile/blob/main/README.org>
(setq load-prefer-newer t)

;; Package installation will provoke a lot of warnings from third-party
;; packages, but there's nothing we can do about those.
(setq byte-compile-warnings nil)
#+end_src

*** Disable the bell

#+begin_src emacs-lisp
(setq ring-bell-function #'ignore)
#+end_src

*** Appearance: integrate with desktop environment

#+begin_src emacs-lisp
;; Prevent X11 from taking control of visual behavior and appearance.
(setq inhibit-x-resources t)
#+end_src

*** FIXME these should be renamed or moved as their namespace indicates
:PROPERTIES:
:ID:       1c6484de-65ca-4533-a6bb-baa9e01f5f0a
:END:
they would normally live in the ~ceamx-ui~ feature.

#+begin_src emacs-lisp
(defconst ceamx-ui-gsettings-ui-namespace "org.gnome.desktop.interface")

(defvar ceamx-ui-tiling-window-manager-regexp "sway"
  "Regular expression matching supported tiling window managers.")

(defmacro with-desktop-session! (&rest body)
  "Expand BODY if desktop session is not a tiling window manager.
See `ceamx-ui-tiling-window-manager-regexp' for the definition of
supported tiling window managers."
  (declare (indent 0))
  `(when-let* ((session (getenv "DESKTOP_SESSION"))
               (not (string-match-p session ceamx-ui-tiling-window-manager-regexp)))
     ,@body))

(defun ceamx-ui-gsettings-theme ()
  "Get the currently-active GNOME/GTK color scheme."
  (shell-command-to-string (format "gsettings get %s color-scheme"
                                   ceamx-ui-gsettings-ui-namespace)))

(defun ceamx-ui-gsettings-dark-theme-p ()
  "Whether GNOME/GTK are using a theme with a dark color scheme."
  (string-match-p "dark" (ceamx-ui-gsettings-theme)))

(defun ceamx-ui-desktop-dark-theme-p ()
  "Predicate whether a desktop environment is displaying a dark appearance."
  (or (ceamx-ui-gsettings-dark-theme-p)))

(defun ceamx-ui-re-enable-frame-theme (_frame)
  "Re-enable active theme, if any, upon FRAME creation.
Add this to `after-make-frame-functions' so that new frames do
not retain the generic background set by the function
`ceamx-init-prevent-initial-light-flash'."
  (when-let* ((theme (car custom-enabled-themes)))
    (enable-theme theme)))
#+end_src

*** Appearance: basic frame settings
:PROPERTIES:
:ID:       5cb09a22-f6b2-418d-bf82-24ff743b1cf9
:END:

#+begin_src emacs-lisp
(setq frame-resize-pixelwise t
      frame-inhibit-implied-resize t
      frame-title-format '("%b")
      use-dialog-box t
      use-file-dialog nil
      use-short-answers t              ; affects `yes-or-no-p'
      read-answer-short t              ; affects `read-answer' (completion)
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message user-login-name
      inhibit-startup-buffer-menu t)

(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

;; `tooltip-mode' is broken for me in pgtk -- might be an Emacs bug,
;; causes constant errors when moving mouse over modeline.
;;
;; FIXME: actually, this is behaving inconsistently: disabling it does
;; not necessarily work, and toggling it off/on allows `tooltip-mode'
;; to function normally...  maybe needs to happen later in init?
(tooltip-mode -1)
#+end_src

*** Appearance: default frame parameters
:PROPERTIES:
:ID:       712b6440-d9e3-48ac-ab2a-9211ed351602
:END:

#+begin_src emacs-lisp
(with-desktop-session!
  (mapc
   (lambda (var)
     (add-to-list var '(width . (text-pixels . 800)))
     (add-to-list var '(height . (text-pixels . 900)))
     (add-to-list var '(scroll-bar-width . 10))     )
   '(default-frame-alist initial-frame-alist)))
#+end_src

*** Appearance: avoid flash of light in a dark environment
:PROPERTIES:
:ID:       dd8efe90-3f35-48c6-ba11-056060ec47cd
:END:

- source :: <https://protesilaos.com/emacs/dotemacs#h:7d3a283e-1595-4692-8124-e0d683cb15b2>


#+begin_src emacs-lisp
(defun ceamx-init-prevent-initial-light-flash ()
  "Avoid the bright flash of light during startup in dark environments."
  (when (ceamx-ui-desktop-dark-theme-p)
    (set-face-attribute 'default nil
                        :background "#000000"
                        :foreground "#ffffff")
    (set-face-attribute 'mode-line nil
                        :background "#000000"
                        :foreground "#ffffff"
                        :box 'unspecified)
    (add-hook 'after-make-frame-functions #'ceamx-ui-re-enable-frame-theme)))

(ceamx-init-prevent-initial-light-flash)
#+end_src

*** Rename the default/initial frame

#+begin_src emacs-lisp
(defvar ceamx-default-frame-name "home"
  "Name for the default Emacs frame.")

(defun ceamx-after-init-default-frame-name-h ()
  "Set the name for the default frame.
Simple wrapper for a call to `set-frame-name' providing
`ceamx-default-frame-name' as the NAME argument.

Intended for use as a callback on the `ceamx-after-init-hook'."
  (set-frame-name ceamx-default-frame-name))

(add-hook 'ceamx-after-init-hook #'ceamx-after-init-default-frame-name-h)
#+end_src

** =init.el=
:PROPERTIES:
:header-args: :tangle init.el :comments both
:END:

*** File header

#+begin_src emacs-lisp :tangle init.el :comments no
;;; init.el --- Ceamx -*- lexical-binding: t; no-byte-compile: t; -*-

;; Copyright (c) 2022-2025  Chris Montgomery <chmont@protonmail.com>

;; Author: Chris Montgomery <chmont@protonmail.com>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.


;;; Commentary:
;;; Code:
#+end_src

*** Requirements

#+begin_src emacs-lisp
(require 'cl-lib)

(require 'ceamx-paths)
(require 'ceamx-lib)
#+end_src

*** Configure default identity

#+begin_src emacs-lisp
(setq-default user-full-name "Chris Montgomery"
              user-mail-address "chmont@protonmail.com")
#+end_src

*** Profiling

- source :: <https://github.com/progfolio/.emacs.d/blob/ed159dc6076664ad9976949d8cb3af8e86fe39d1/init.org#profiling>

#+begin_src emacs-lisp :lexical t
(add-hook 'ceamx-after-init-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract (current-time) before-init-time)))
                     gcs-done)))
#+end_src

Optionally, display a report after startup:

#+begin_src emacs-lisp :lexical t :tangle no
(profiler-start 'cpu+mem)
(add-hook 'ceamx-after-init-hook (lambda () (profiler-stop) (profiler-report)))
#+end_src

ELP is useful for seeing which functions in a package are "hot":

#+begin_src emacs-lisp :var file="elpaca" :lexical t :tangle no
(require 'elp)
(with-eval-after-load file
  (elp-instrument-package file))
(add-hook ceamx-after-init-hook
          (lambda () (elp-results) (elp-restore-package (intern file))))
#+end_src

*** Initialize the =ceamx= user options

#+begin_src emacs-lisp
(defgroup ceamx nil
  "User-configurable options for Ceamx."
  :group 'emacs)
#+end_src

**** The user option to define directory trees whose files should be opened in read-only buffers :config:

#+begin_src emacs-lisp
(defcustom ceamx-buffer-read-only-dirs-list (list ceamx-packages-dir)
  "List of directories whose files should be opened in read-only buffers."
  :group 'ceamx
  :type '(string))
#+end_src

**** The user option to determine whether to load ~custom-file~

#+begin_src emacs-lisp
(defcustom ceamx-load-custom-file t
  "Whether to load the user `custom-file' (custom.el)."
  :group 'ceamx
  :type '(boolean))
#+end_src

*** Configure ~custom-file~ location
:PROPERTIES:
:ID:       59f6ed70-cdb4-45fd-8980-0d57d1aad12e
:END:

#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom.el"))
#+end_src

*** Security improvements
:PROPERTIES:
:ID:       870f1c8f-5998-4960-9c0d-98121a73df16
:END:

#+begin_src emacs-lisp
;; Prevent Emacs from pinging domain names unexpectedly.
(setq ffap-machine-p-known 'reject)

(with-eval-after-load 'gnutls
  (eval-when-compile
    (require 'gnutls))

  ;; Disallow insecure TLS connections.
  (setq gnutls-verify-error t)
  ;; This is an acceptably-modern security expectation.
  (setq gnutls-min-prime-bits 3072))
#+end_src

*** Declare safe local variable directories and values relating to Emacs initialization
:PROPERTIES:
:ID:       dfe910c3-8b2f-4702-b380-ae8d669b981e
:END:

#+begin_src emacs-lisp
(setopt safe-local-variable-directories
        ;; NOTE: `user-emacs-directory' is intentionally not included
        ;; here because its value can change based on the value of the
        ;; "--init-directory" initialization flag.
        (list (file-name-concat ceamx-config-dir "emacs")
              (file-name-concat ceamx-config-dir "ceamx")))
(setopt safe-local-variable-values
        '((eval load-file "./ceamx-dev-loader.el")
          (eval add-hook 'after-save-hook #'org-gfm-export-to-markdown t t)))
#+end_src

*** Enable/disable some commands that are disabled/enabled by default

#+begin_src emacs-lisp
;; Enable these commands
(dolist (cmd '(downcase-region
               list-timers
               narrow-to-page
               narrow-to-region
               upcase-region))
  (put cmd 'disabled nil))

;; Disable these commands
(dolist (cmd '(diary iconify-frame overwrite-mode))
  (put cmd 'disabled t))
#+end_src

*** Display the scratch buffer as initial buffer
:PROPERTIES:
:ID:       8faa0cb3-1b4d-4218-a2c3-0016aba1d95b
:END:

#+begin_src emacs-lisp
(setq initial-buffer-choice nil
      initial-major-mode 'lisp-interaction-mode
      inhibit-startup-screen t)
(setq initial-scratch-message
      (format ";; This is `%s'.  Use `%s' to evaluate and print results.\n\n"
              'lisp-interaction-mode
              (propertize
               (substitute-command-keys "\\<lisp-interaction-mode-map>\\[eval-print-last-sexp]")
               'face 'help-key-binding)))
#+end_src

*** Add the =site-lisp= directory to ~load-path~

#+begin_src emacs-lisp

#+end_src

*** =site-lisp/on=: Define additional Emacs event hooks
:PROPERTIES:
:ID:       7f77da4e-3109-4dca-80c1-38c838ee5d70
:END:

#+begin_src emacs-lisp
(require 'on)
#+end_src

*** Initialize package management

Third-party package managers should be configured in init.el directly instead
of within a `require'd file so that they may be re-initialized properly.

**** Bootstrap the package manager

Packages are installed with Elpaca.

Previously, I have used =package.el= or Nixpkgs to manage packages.  See the
[[*Alternatives]] subheading for details
***** Elpaca
:PROPERTIES:
:ID:       af51c154-98f0-487d-ba00-90db3d1d032f
:END:

#+begin_src emacs-lisp
(defvar elpaca-directory (expand-file-name "elpaca/" ceamx-packages-dir))

;; Avoid aggressive GitHub API rate limiting.
(defvar elpaca-queue-limit 10)
#+end_src

Elpaca needs to know about the Nix build date of the current version
of Emacs to set ~elpaca-core-date~ correctly.  [[https://github.com/progfolio/elpaca/wiki/Usage-with-Nix#retrieving-the-date-via-file-name][From the wiki]]:

#+begin_src emacs-lisp
(require 'ceamx-lib)

;; TODO: this should probably take effect for *any* Nix-built Emacs
;; package, not just on NixOS
(when (ceamx-host-nixos-p)
  (setq elpaca-core-date (list (ceamx-emacs-nix-build-date))))
#+end_src

The installation code only needs to be changed when the Elpaca warns
about an installer version mismatch.

This should be copied verbatim from the Elpaca documentation, with the
definition for ~elpaca-directory~ removed.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.9)
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

***** Alternatives
****** Nixpkgs

I actually think this is the easiest approach, with the least amount of fiddling
necessary.

But: I would prefer using standalone/portable Emacs-specific package
management so Nix is not a hard requirement.  This is primarily because I
am eagerly anticipating the stable release of the official Emacs for
Android, or at least some established norms/idioms/best-practices for
configuration on Android.

Currently I don't see any clear path towards supporting Nix there, at
least not for a while.  I would prefer to have interoperability between
Emacs for Android and Nix for Android instead of the GNU-signed Termux
app, but AFAIK that would require building both Emacs and Nix for
Android APKs from source to self-sign, which I don't want to do right
now.

Oh yeah, and there's also WSL when I am forced to use Microsoft Windows
for something (like Adobe Acrobat).  Ideally I would use the NixOS on WSL
setup but that's a little bit of a project to integrate into my
wasteland of a system configuration repo.

****** package.el

When I forget what pain feels like, I remind myself by attempting to use
=package.el=.  Soon I find that nothing works in a sane manner, and, the
worst part: it's barely configurable as Emacs should be.  This results in
many nasty hacks.  I do not think =package.el= is ready for daily usage
in my life.

I tried leaning into package.el because:

1. It is built into Emacs, allowing for portability and predictable
   behavior across machines.  Ostensibily.
2. I thought using it would be a matter of "back-to-the-basics"/KISS.

But:

While the documentation seems thorough, I frequently need to dive into
its source code to figure out why some weird behavior is happening.
Several configurations I've referenced apply advices to its internal
functions to hammer package.el into a usable machine.

Somehow, even though both =package.el= and =use-package= are part of
Emacs, they do not work well together.  TODO: add links to issues here

package.el forces the use of =user-custom-file=, with no option to
specify a different file or otherwise change this behavior.  I am
absolutely not interested in committing =custom.el= whenever the state
of my installed packages changes.  I like the idea of a lockfile, as
every package manager should use one (except Nix, which transcends such
barbaric practices entirely), but the current state of this behavior
makes that impossible without resorting to hacks.  TODO: mention the
snippet I recently came across (saved to bookmark manager).

I've left a lot of comments throughout this configuration's explaining
some of =package.el='s unintutive and sometimes downright terrible or
broken behavior.  TODO: resurface these, which were probably deleted.

I imagine one day these issues will be resolved and stabilized in future
versions of Emacs, but until then, I would only be a reluctant user and
find myself still prone to indecision in this field.

On that note, I have since switched back to Elpaca.

**** Run the custom init and startup hooks on ~elpaca-after-init-hook~

#+begin_src emacs-lisp
(add-hook 'elpaca-after-init-hook #'ceamx-after-init-hook)
(add-hook 'elpaca-after-init-hook #'ceamx-emacs-startup-hook)
#+end_src

**** Pretend file-visiting-buffers in the package directory are read-only

#+begin_src emacs-lisp
(require 'ceamx-simple)

(def-hook! ceamx-register-read-only-buffers-h ()
  'ceamx-after-init-hook
  "Use read-only buffers for files in some directories.
The affected directories are listed in `ceamx-buffer-read-only-dirs-list'"

  ;; Define a read-only directory class
  (dir-locals-set-class-variables
   'read-only
   '((nil . ((buffer-read-only . t)))))

  ;; Associate directories with the read-only class
  (dolist (dir ceamx-buffer-read-only-dirs-list)
    (dir-locals-set-directory-class (file-truename dir) 'read-only)))
#+end_src

**** Encourage a ~no-littering~ policy for packages to artifice in the designated areas

- Website :: <https://github.com/emacscollective/no-littering/>

By default, Emacs features and many packages default to dumping their state
files into ~user-emacs-directory~.  This makes sense for the sake of visibility.
However, because E rarely thinks about any of those machine-generated and
non-human-friendly files, they may be effectively designated as clutter.  Ceamx
offloads these sanitation duties to the =no-littering= package because it works
effectively and almost-invisibly.

In some cases, especially for new packages / package features / targets, it may
be necessary to manage such configuration by hand.

Ceamx avoids ~use-package~ here so that:

- ~no-littering~ may be installed and loaded as early as possible
- the time-consuming invocations of ~elpaca-wait~ should be kept to the absolute minimum

#+begin_src emacs-lisp
(require 'ceamx-paths)

;; These must be set prior to package load.
(setq no-littering-etc-directory ceamx-etc-dir)
(setq no-littering-var-directory ceamx-var-dir)

(elpaca no-littering
  (require 'no-littering))
#+end_src

**** Install the latest versions of some builtin features and their dependencies

Installing the latest development versions of ~eglot~ and ~magit~ (for example)
comes with the significant caveat that their dependencies often track the latest
versions of builtin Emacs libraries.  Those can be installed via GNU ELPA.

Since core libraries like ~seq~ are often dependencies of many other packages or
otherwise loaded immediately (like ~eldoc~), installation and activation of the
newer versions needs to happen upfront to avoid version conflicts and
mismatches.  For example, Ceamx does not want some package loaded earlier in init to
think it is using the builtin version of ~seq~, while a package loaded later in
init uses a differnt version.  E is not sure how realistic such a scenario might
be, or whether it would truly pose a problem, but the point is that we should
aim for consistency.

Oftentimes, these builtins must be unloaded before loading the newer version.
This applies especially to core libraries like ~seq~ or the enabled-by-default
~global-eldoc-mode~ provided by ~eldoc~, but not ~jsonrpc~, since its
functionality is specific to more niche features like inter-process
communication in the case of ~eglot~.

A feature must only be unloaded once, *before* loading the version installed by
Elpaca.  Normally, that is not an issue because the init file is only loaded
once on session startup.  But upon re-loading the init file inside a running
session, the Elpaca-installed version will become unloaded.  To prevent that,
the unloading should happen only once -- during session startup -- hence the
check for a non-nil ~after-init-time~.

#+begin_verse
I don't understand why the Elpaca-installed feature\/package only seems to be
loaded during the initial session startup?  Unless the unloading happens
conditionally based on ~after-init-time~ as described above, every time the init
file is reloaded and ~elpaca-process-queues~ runs in
~+auto-tangle-reload-init-h~, I get a bunch of errors (not warnings!) about
~eglot~ and ~org~ as missing dependencies.
#+end_verse

***** Install the latest version of ~seq~ builtin library, carefully

~magit~ requires a more recent version of ~seq~ than the version included in
Emacs 29.

Requires special care because unloading it can make other libraries freak out.
<https://github.com/progfolio/elpaca/issues/216#issuecomment-1868444883>

#+begin_src emacs-lisp
(defun +elpaca-unload-seq (e)
  "Unload the builtin version of `seq' and continue the `elpaca' build E."
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

(defun +elpaca-seq-build-steps ()
  "Update the `elpaca' build-steps to activate the latest version of the builtin `seq' package."
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps
                     elpaca-build-steps))
          (list '+elpaca-unload-seq 'elpaca--activate-package)))

(elpaca `(seq :build ,(+elpaca-seq-build-steps)))
#+end_src

***** Install the latest version of the builtin ~jsonrpc~ library

Required by (and originally extracted from) ~eglot~.

#+begin_src emacs-lisp
(elpaca jsonrpc
  (require 'jsonrpc))
#+end_src

***** Install the latest version of the ~eldoc~ builtin library, carefully

Required by ~eglot~.

~eldoc~ requires a delicate workaround to avoid catastrophy
<https://github.com/progfolio/elpaca/issues/236#issuecomment-1879838229>


#+begin_src emacs-lisp
(unless after-init-time
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (defvar global-eldoc-mode nil))

(elpaca eldoc
  (require 'eldoc)
  (global-eldoc-mode))
#+end_src

***** Install the latest version of the builtin ~eglot~ package

#+begin_src emacs-lisp
(unless after-init-time
  (when (featurep 'eglot)
    (unload-feature 'eglot)))

(elpaca eglot)
#+end_src

***** Install the latest version of the builtin ~flymake~ package

#+begin_src emacs-lisp
(unless after-init-time
  (when (featurep 'flymake)
    (unload-feature 'flymake)))

(elpaca flymake)
#+end_src

***** Install the latest version of Org-Mode

#+begin_src emacs-lisp
(unless after-init-time
  (when (featurep 'org)
    (unload-feature 'org)))

(elpaca (org :autoloads "org-loaddefs.el"))
#+end_src

**** Install the latest version of ~use-package~
:PROPERTIES:
:ID:       87854bdb-fb6f-4117-884e-81354c924c07
:END:

#+begin_src emacs-lisp
(elpaca use-package)
#+end_src

**** =elpaca-use-package=: integrate ~elpaca~ and ~use-package~

#+begin_src emacs-lisp
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
#+end_src

**** Elpaca-Wait № 1: ~no-littering~ + ~use-package~ :wait:

Reason:

- Continuing otherwise will result in race conditions on the
  definition of storage paths.
- ~use-package~ must be loaded for byte-compilation checks

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

**** Configure ~use-package~ behavior

#+begin_src emacs-lisp
(setopt use-package-always-ensure t)
(setopt use-package-expand-minimally t)

(when (bound-and-true-p init-file-debug)
  (require 'use-package)
  (setopt use-package-expand-minimally nil)
  (setopt use-package-verbose t)
  (setopt use-package-compute-statistics t))
#+end_src

**** Improve ~use-package~ completion-at-point availability
:PROPERTIES:
:ID:       863979e9-5559-4abf-903e-307f528e6263
:END:

#+begin_src emacs-lisp
(def-advice! ceamx+use-package--bind-handle-sharp-quotes-a (args)
  :filter-args #'use-package-normalize-binder
  "Make `use-package' handle sharp-quoted functions correctly in `:bind'.
Performs a recursive find-and-replace on sharp quotes in the arguments,
because that's the simple solution and the performance overhead is
unimportant since it happens during compilation anyway."
  (ceamx--remove-sharp-quotes args))
#+end_src

**** =blackout=: adjust mode-line lighters :modeline:

- Use-Package keyword :: =:blackout=

#+begin_src emacs-lisp
(use-package blackout
  :ensure (:wait t)
  :demand t)
#+end_src

**** Install and configure =setup.el=

#+begin_src emacs-lisp
(elpaca setup
  (require 'setup))

(elpaca-wait)
#+end_src

Add Elpaca support to =setup.el=:

#+begin_src emacs-lisp
(defun +setup-wrap-to-install-elpaca-package (body _name)
  "Wrap BODY in an `elpaca' block when `:ensure' is provided."
  (if (assq 'ensure setup-attributes)
      `(elpaca ,(cdr (assq 'ensure setup-attributes))
         ,@(macroexp-unprogn body))
    body))

(add-to-list 'setup-modifier-list #'+setup-wrap-to-install-elpaca-package)

(setup-define :ensure
  (lambda (order &rest recipe)
    (push (cond
           ((eq order t) `(ensure . ,(setup-get 'feature)))
           ((eq order nil) `(ensure . nil))
           (`(ensure . (,order ,@recipe))))
          setup-attributes)
    ;; If the macro returned non-nil, it would try to insert the
    ;; modified list returned by `push'.  As this value usually cannot
    ;; be evaluated, it is better to return nil (which the byte
    ;; compiler will optimize away).
    nil)
  :documentation "Install ORDER with the `elpaca' package manager.
The ORDER can be used to deduce the feature context."
  :shorthand #'cadr)
#+end_src

Add the =:autoload= contextual macro:

#+begin_src emacs-lisp
;; <https://www.emacswiki.org/emacs/SetupEl#h5o-7>
(setup-define :autoload
  (lambda (func)
    (let ((fn (if (memq (car-safe func) '(quote function))
                  (cadr func)
                func)))
      `(unless (fboundp (quote ,fn))
         (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
  :documentation "Autoload COMMAND if not already bound."
  :debug '(form)
  :repeatable t
  :signature '(FUNC ...))
#+end_src

Add the =:load-after= contextual macro:

#+begin_src emacs-lisp
(setup-define :load-after
    (lambda (&rest features)
      (let ((body `(require ',(setup-get 'feature))))
        (dolist (feature (nreverse features))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
    :documentation "Load the current feature after FEATURES.")
#+end_src

*** =gcmh=: manage running garbage collection on idle :package:perf:

- Website :: <https://akrl.sdf.org/>
- Code :: <https://gitlab.com/koral/gcmh>

During normal use, the GC threshold will be set to a high value.
When idle, GC will be triggered with a low threshold.

#+begin_src emacs-lisp
(package! gcmh
  (blackout 'gcmh-mode)
  (add-hook 'ceamx-emacs-startup-hook #'gcmh-mode))
#+end_src

**** Background and Rationale

While browsing many other user configs, I have noticed several slightly
different approaches to managing garbage collection, especially with the
intent of reducing startup time.

One approach is to offload this configuration to ~gcmh~, safely hiding the
details away.  =gcmh= is written by Andrea Corallo, one of the Emacs
co-maintainers, also known for introducing =gccemacs=.

As a direct response to a Reddit thread sharing =gcmh=, Eli Zaretskii recommends
caution in this field.  Corallo also weighs in.  Basically, Zaretskii recommends
not overthinking things:

[[https://old.reddit.com/r/emacs/comments/bg85qm/garbage_collector_magic_hack/eln27qh/][eli-zaretskii
comments on Garbage Collector Magic Hack]]:

#+begin_quote
My problem with the advice to make the GC threshold at such high values
begins the moment you start publishing your personal tweaks as general
advice to others. IMO, this requires at least a lot of caveats, because
your advice is likely to be followed by people whose workflows and
system configurations are very different. Simply put, you might get
others in trouble by promoting your personal hacks as "magic".
#+end_quote

From what I gather, =gcmh= has evolved a bit, so the previous criticism
no longer applies.

And, again, with more detail about fiddling carelessly with
=gc-cons-threshold=:

[[https://old.reddit.com/r/emacs/comments/yzb77m/an_easy_trick_i_found_to_improve_emacs_startup/iwz1vek/][eli-zaretskii
comments on An easy trick I found to improve Emacs start-up time]]

#+begin_quote
The GC threshold setting after init is too high, IMNSHO, and its value
seems arbitrary.

If the OP thinks that Emacs will GC as soon as it allocates 100 MiB,
then that's a grave mistake. What really happens is the first time Emacs
/considers doing GC/, if at that time more than 100 MiB have been
allocated for Lisp objects, Emacs will GC. And since neither Lisp
programs nor the user have /any/ control on how soon Emacs will decide
to check whether GC is needed, the actual amount of memory by the time
Emacs checks could be many times the value of the threshold.

My advice is to spend some time measuring the effect of increased GC
threshold on operations that you care about and that take a long enough
time to annoy, and use the lowest threshold value which produces a
tangible improvement. Start with the default value, then enlarge it by a
factor of 2 until you see only insignificant speedups. I would not
expect the value you arrive at to be as high as 100 MiB.
#+end_quote

*** Install utility libraries
:PROPERTIES:
:ID:       d04ef910-34e0-4961-aeb6-c2741af41455
:END:

#+begin_src emacs-lisp
(package! llama
  (require 'llama))
(package! f)
(package! request)
(package! transient
  (require 'transient)
  (after! transient
    (keymap-set transient-map "<escape>" #'transient-quit-one)))
#+end_src

** =init.el=: Environment
:PROPERTIES:
:header-args: :tangle init.el
:ID:       451ef1a7-544c-45de-95d0-ca09abee5d23
:END:

*** Disable unnecessary OS-specific command-line options :macos:

#+begin_src emacs-lisp
(unless (ceamx-host-macos-p)
  (setq command-line-ns-option-alist nil))

(unless (ceamx-host-gnu-linux-p)
  (setq command-line-x-option-alist nil))
#+end_src

*** =exec-path-from-shell=: Inherit environment variables from variable environments :package:

#+begin_src emacs-lisp
(package! exec-path-from-shell
  (require 'exec-path-from-shell)
  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH" "LSP_USE_PLISTS"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))
#+end_src

*** =inheritenv=: Make temporary buffers inherit buffer-local environment variables :package:

- website :: <https://github.com/purcell/inheritenv>

#+begin_src emacs-lisp
(package! inheritenv
  (with-eval-after-load 'exec-path-from-shell
    (require 'inheritenv)))
#+end_src

*** =with-editor=: Ensure shell/term modes use session as =$EDITOR= :package:

#+begin_src emacs-lisp
(package! with-editor
  (keymap-global-set "<remap> <async-shell-command>"
                     #'with-editor-async-shell-command)
  (keymap-global-set "<remap> <shell-command>"
                     #'with-editor-shell-command)

  (add-hook 'shell-mode-hook #'with-editor-export-editor)
  (add-hook 'eshell-mode-hook #'with-editor-export-editor)
  (add-hook 'term-exec-hook #'with-editor-export-editor)

  ;; Make sure that `eat' does not break `magit-commit'.
  ;; <https://codeberg.org/akib/emacs-eat/issues/55#issuecomment-871388>
  (with-eval-after-load 'eat
    (add-hook 'eat-mode-hook #'shell-command-with-editor-mode)))
#+end_src

*** =envrc= :: Direnv integration :package:
:PROPERTIES:
:ID:       4572e438-3d90-4ed3-88af-a7c2493a2e19
:END:

- src :: <https://github.com/purcell/envrc>
- upstream :: <https://github.com/direnv/direnv>

Q: How does this differ from `direnv.el`?

<https://github.com/wbolster/emacs-direnv> repeatedly changes the global
Emacs environment, based on tracking what buffer you're working on.

Instead, `envrc.el` simply sets and stores the right environment in each
buffer, as a buffer-local variable.

#+begin_src emacs-lisp
(package! envrc
  (after! exec-path-from-shell
    (envrc-global-mode))
  (after! popper
    (add-to-list 'popper-reference-buffers "\\*envrc\\*")))
#+end_src

*** Elpaca-Wait № 3 :wait:

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

*** TRAMP Support

#+begin_src emacs-lisp
(setopt tramp-default-method "ssh")
(setopt tramp-default-remote-shell "/bin/bash")
(setopt tramp-connection-timeout (* 60 10))
;; Do not auto-save remote files. Note the reversed logic.
(setopt remote-file-name-inhibit-auto-save t)                 ; Emacs 30
(setopt remote-file-name-inhibit-auto-save-visited t)
;; Avoid expensive operations on remote files.
(setopt remote-file-name-inhibit-delete-by-moving-to-trash t) ; Emacs 30

(after! tramp
  (dolist (path '("~/.local/bin"
                  "~/.nix-profile/bin"
                  "~/.local/state/nix/profiles/profile/bin/"
                  "/nix/var/nix/profiles/default/bin"
                  "/run/current-system/sw/bin"))
    (add-to-list 'tramp-remote-path path)))
#+end_src

*** Input languages

#+begin_src emacs-lisp
(set-language-environment "UTF-8")

;; `set-language-environment' also presumptively sets `default-input-method'.
(setopt default-input-method nil)
#+end_src

#+begin_src emacs-lisp
;; Disable bidirectional text scanning
;; (setq-default bidi-display-reordering 'left-to-right)
;; (setq-default bidi-paragraph-direction 'left-to-right)
;; (setq bidi-inhibit-bpa t)
#+end_src

*** Mouse support

#+begin_src emacs-lisp
(setopt mouse-yank-at-point t)

;; Avoid collision of mouse with point
(mouse-avoidance-mode 'exile)
#+end_src

Support scrolling with the mouse wheel or trackpad gestures within
non-graphical frames.  Mouse support is available by default in
graphical frames.

#+begin_src emacs-lisp
(unless (display-graphic-p)

  ;; Basic mouse support e.g. click and drag
  (xterm-mouse-mode 1)

  ;; By default, `scroll-down' and `scroll-up' scroll by a huge amount.
  (eval-and-compile
    (defun ceamx/scroll-down ()
      "Scroll down one line."
      (interactive)
      (scroll-down 1))

    (defun ceamx/scroll-up ()
      "Scroll up one line."
      (interactive)
      (scroll-up 1)))

  (global-set-key [mouse-4] #'ceamx/scroll-down)
  (global-set-key [mouse-5] #'ceamx/scroll-up))
#+end_src

*** Load site-specific configuration, to be ignored by version control

#+begin_src emacs-lisp
(require 'site-config (file-name-concat user-emacs-directory "site-config") t)
#+end_src

** =init.el= :: Leader Prefix Keybindings
:PROPERTIES:
:header-args: :tangle init.el
:ID:       cd713eda-629c-460c-921e-d99ce8f6742f
:END:

#+begin_src emacs-lisp
(define-keymap :keymap (current-global-map)
  "C-c a" nil ; reserved for agenda
  "C-c b" (cons "[ BUFFER    ]" #'ceamx-buffer-prefix)
  "C-c c" nil ; reserved for capture
  "C-c C" (cons "[ CAPTURE   ]" #'ceamx-capture-prefix)
  ;; "C-c d"
  "C-c e" (cons "[ EDIT      ]" #'ceamx-structural-editing-prefix)
  "C-c E" (cons "[ CRYPTION  ]" #'ceamx-cryption-prefix)
  "C-c f" (cons "[ FILE      ]" #'ceamx-file-prefix)
  "C-c i" (cons "[ INSERT    ]" #'ceamx-insert-prefix)
  ;; "C-c j"
  "C-c l" (cons "[ CODE      ]" #'ceamx-code-prefix)
  "C-c l f" (cons "folding..." (define-prefix-command 'ceamx-code-f-prefix))
  "C-c l F" (cons "formatting..." (define-prefix-command 'ceamx-code-F-prefix))
  ;; "C-c m"
  "C-c n" (cons "[ NOTES     ]" #'ceamx-note-prefix)
  "C-c o" (cons "[ LAUNCH    ]" #'ceamx-launch-prefix)
  "C-c p" (cons "[ COMPLETE  ]" #'ceamx-completion-prefix)
  "C-c q" (cons "[ SESSION   ]" #'ceamx-session-prefix)
  ;; "C-c r"
  ;; "C-c s" (cons "[ ]")
  "C-c t" (cons "[ TOGGLE    ]" #'ceamx-toggle-prefix)
  ;; "C-c u"
  ;; "C-c v"
  "C-c w" (cons "[ WORKSPACE ]" #'ceamx-window-prefix)
  ;; "C-c x"
  ;; "C-c y"
  ;; "C-c z"
  )
#+end_src

* Features
:PROPERTIES:
:ID:       0b88377f-2539-49a1-917d-2d2eac806e37
:END:
** User Interface & Appearance :ui:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-ui.el
:VISIBILITY: folded
:ID:       565cc0f1-4f0a-4435-8efc-9f6ee3df4e10
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-ui.el :comments no
  ;; -*- lexical-binding: t;  -*-

  (require 'ceamx-lib)
  (require 'ceamx-ui)
#+end_src

*** Configure cursor appearance

#+begin_src emacs-lisp
(package! cursory
  (require 'cursory)

  (def-hook! ceamx-init-theme-cursory-h ()
    'ceamx-after-init-hook
    "Enable `cursory-mode' and load the latest preset."
    (cursory-mode 1)
    (cursory-set-preset (or (cursory-restore-latest-preset) 'box)))

  (setopt cursory-latest-state-file
          (expand-file-name "cursory-latest-state.eld" ceamx-var-dir))

  (setopt cursory-presets
          '((box
             :blink-cursor-interval 0.8)
            (box-no-blink
             :blink-cursor-mode -1)
            (bar
             :cursor-type (bar . 2)
             :blink-cursor-interval 0.8)
            (bar-no-other-window
             :inherit bar
             :cursor-in-non-selected-windows nil)
            (bar-no-blink
             :cursor-type (bar . 2)
             :blink-cursor-mode -1)
            (t
             :cursor-type box
             :cursor-in-non-selected-windows hollow
             :blink-cursor-mode 1
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.2
             :blink-cursor-delay 0.2))))
#+end_src

*** Customize the Customization buffers and menus

#+begin_src emacs-lisp
(setopt custom-theme-allow-multiple-selections nil)

(setopt custom-unlispify-menu-entries nil)
(setopt custom-unlispify-tag-names nil)
(setopt custom-unlispify-remove-prefixes nil)

(add-hook 'Custom-mode-hook #'custom-toggle-hide-all-widgets nil t)
#+end_src

*** Load common interface toolkits

Required as dependencies for multiple packages, including some
packages (like ~nix-mode~) who don't properly declare their
dependencies.

**** =grid=: textual data table presentation

- Source :: [[https://github.com/ichernyshovvv/grid.el][ichernyshovvv/grid.el]]
- Retrieved :: [2024-06-07 Fri 11:45]

#+begin_quote
This library allows you to put text data into boxes and align them horizontally,
applying margin, padding, borders.
#+end_quote

#+begin_src emacs-lisp
(package! (grid :host github :repo "ichernyshovvv/grid.el"))
#+end_src

**** =hydra=

- Documentation :: <https://github.com/jerrypnz/major-mode-hydra.el/#pretty-hydra>

#+begin_src emacs-lisp
(package! hydra
  (require 'hydra))
(package! pretty-hydra)
#+end_src

**** =symbol-overlay= :: highlight symbols with keymap-enabled overlays

#+begin_src emacs-lisp
(package! symbol-overlay)
#+end_src

**** =sideline= :: show information on the side
:PROPERTIES:
:ID:       556ce67a-0d8b-4ef3-8f01-d34e65faeed6
:END:

#+begin_src emacs-lisp
(package! sideline
  (require 'sideline)

  (setopt sideline-backends-left-skip-current-line t
          sideline-backends-right-skip-current-line t)
  (setopt sideline-order-left 'down
          sideline-order-right 'up)
  (setopt sideline-format-left "%s   "
          sideline-format-right "   %s")
  (setopt sideline-priority 100)
  (setopt sideline-display-backend-name t))
#+end_src

*** Theme :theme:
:PROPERTIES:
:ID:       34b88767-203e-4538-8832-2310328e8aa5
:END:

**** Consider all themes "safe"

#+begin_src emacs-lisp
(setopt custom-safe-themes t)
#+end_src

**** Add a custom hook ~ceamx-after-enable-theme-hook~ to run after enabling a theme
:PROPERTIES:
:ID:       ed7bff96-74c6-4476-bf4d-7909b077b839
:END:

- Source :: <https://github.com/jdtsmith/kind-icon/issues/34#issuecomment-1668560185>

#+begin_src emacs-lisp
(defvar ceamx-after-enable-theme-hook nil)

(defun ceamx-after-enable-theme (&rest _args)
  "Hook to run after enabling theme."
  (run-hooks 'ceamx-after-enable-theme-hook))

(advice-add 'enable-theme :after #'ceamx-after-enable-theme)
#+end_src

**** =standard-themes= :: themes like the default but more consistent
:PROPERTIES:
:ID:       09f2005b-1d4d-4d92-9f36-2327ca55757d
:END:

#+begin_src emacs-lisp
(when (display-graphic-p)
  (package! standard-themes
    (require 'standard-themes)))

(after! standard-themes
  (ceamx-ui-define-preferred-themes
   'standard 'standard-dark 'standard-light)

  (setopt standard-themes-bold-constructs t
          standard-themes-italic-constructs t)
  (setopt standard-themes-disable-other-themes t)
  (setopt standard-themes-mixed-fonts t
          standard-themes-variable-pitch-ui t)
  (setopt standard-themes-prompts '(extrabold italic))
  (setopt standard-themes-to-toggle (ceamx-ui-theme-family-preferred-themes 'standard))
  (setopt standard-themes-to-rotate
          '(standard-dark
            standard-dark-tinted
            standard-light
            standard-light-tinted)))
#+end_src

**** =modus-themes= :: accessible theme conforming to WCAG AAA
:PROPERTIES:
:ID:       3700042e-1b73-416f-aaa1-2cbd9f2101f0
:END:

- Website :: <https://protesilaos.com/modus-themes/>

#+begin_src emacs-lisp
(package! modus-themes
  (require 'modus-themes)

  (ceamx-ui-define-preferred-themes
   'modus 'modus-vivendi-tinted 'modus-operandi)

  (setopt modus-themes-italic-constructs t
          modus-themes-bold-constructs t
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui t)
  (setopt modus-themes-to-toggle
          (ceamx-ui-theme-family-preferred-themes 'modus))
  (setopt modus-themes-disable-other-themes nil)
  (setopt modus-themes-headings
          '((1 . (variable-pitch bold 1.1))
            (agenda-structure . (variable-pitch light 2.2))
            (agenda-date . (variable-pitch regular 1.3))
            (t . (variable-pitch semibold 1.0)))))
#+end_src

**** =ef-themes= :: colorful yet legible themes
:PROPERTIES:
:ID:       3f512af0-7bad-4447-a14d-08a5371e14c5
:END:

- Website :: <https://protesilaos.com/emacs/ef-themes>

#+begin_src emacs-lisp
(package! ef-themes
  (require 'ef-themes)

  (ceamx-ui-define-preferred-themes
   'ef 'ef-winter 'ef-frost)

  (setopt ef-themes-to-toggle (ceamx-ui-theme-family-preferred-themes 'ef))
  (setopt ef-themes-mixed-fonts t
          ef-themes-variable-pitch-ui t))
#+end_src

**** Configure the preferred themes

#+begin_src emacs-lisp
(use-feature! ceamx-ui
  :config
  (setopt ceamx-ui-theme-family 'ef))
#+end_src

**** Set approximate stomping coordinates for hyper-astronomic relativity calculations

#+begin_src emacs-lisp
(require 'cal-dst)

(setopt calendar-latitude 39.968)
(setopt calendar-longitude -75.133)
#+end_src

**** =circadian= :: theme phasing based on sunrise/sunset time
:PROPERTIES:
:ID:       badbc4d6-c784-4936-bd84-e1312a67273c
:END:

#+begin_src emacs-lisp
(package! circadian
  (require 'ceamx-ui)

  (if (eq 'solar ceamx-ui-theme-circadian-interval)
      (progn
        (add-hook 'ceamx-after-init-hook #'circadian-setup)

        (setopt circadian-themes `((:sunrise . ,ceamx-ui-theme-light)
                                   (:sunset . ,ceamx-ui-theme-dark))))
    (add-hook 'ceamx-after-init-hook
              (lambda ()
                (if (ceamx-ui-desktop-dark-theme-p)
                    (ceamx-ui/load-dark-theme)
                  (ceamx-ui/load-light-theme))))))
#+end_src

*** =avy= :: can do anything
:PROPERTIES:
:ID:       05cb2761-07fc-476b-8b78-0d08e0a89469
:END:

+ Package :: <https://github.com/abo-abo/avy>
+ Article :: <https://karthinks.com/software/avy-can-do-anything/>

#+begin_src emacs-lisp
(package! avy
  (defer! 2 (require 'avy))

  (define-keymap :keymap (current-global-map)
    "C-;" #'avy-goto-char-timer
    ;; "C-'" is reserved for special commands e.g. `avy-org-goto-heading-timer'

    "M-g w" #'avy-goto-word-1)

  (after! org
    (keymap-set org-mode-map "C-'" #'avy-org-goto-heading-timer)
    (keymap-set org-mode-map "C-\"" #'avy-org-refile-as-child)))

(after! avy
  (setopt avy-style 'at-full)
  (setopt avy-all-windows t)
  (setopt avy-case-fold-search t)

  ;; Prevent conflicts with themes.
  (setopt avy-background nil)

  ;; Anything lower feels unusable.
  (setopt avy-timeout-seconds 0.25))
#+end_src

*** Highlight current line in programming modes

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hl-line-mode)

(after! hl-line
  ;; Disable line highlight in unfocused windows.
  (setopt hl-line-sticky-flag nil))
#+end_src

*** =lin= :: improve line-highlighting for major-modes orientated around line selection

#+begin_src emacs-lisp
(package! lin
  (add-hook 'ceamx-after-init-hook #'lin-global-mode))
#+end_src

*** =pulsar= :: pulse current line after function invocations

#+begin_src emacs-lisp
(package! pulsar
  (add-hook 'ceamx-after-init-hook #'pulsar-global-mode)
  (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line))

(after! pulsar
  (setopt pulsar-pulse t
          pulsar-delay 0.055
          pulsar-iterations 10)
  (setopt pulsar-face 'pulsar-magenta
          pulsar-highlight-face 'pulsar-cyan)

  (dolist (fn '(pulsar-pulse-line-red
                pulsar-recenter-top
                pulsar-reveal-entry))
    (add-hook 'next-error-hook #'fn)))
#+end_src

*** Window highlighting

#+begin_src emacs-lisp
(setopt highlight-nonselected-windows nil)
#+end_src

*** Hide frame decorations
:PROPERTIES:
:ID:       c532e9e7-8729-4442-8bd7-2c50717a9dc7
:END:

#+begin_src emacs-lisp
(unless (ceamx-host-macos-p)
  (add-to-list 'default-frame-alist '(undecorated . t)))

(when (ceamx-host-macos-p)
  ;; `undecorated-round' is macOS-specific.
  (add-to-list 'default-frame-alist '(undecorated-round . t))

  ;; GUI menu bar is necessary otherwise Emacs will be treated as a
  ;; non-application OS window (e.g. no focus capture).
  ;; <https://github.com/doomemacs/doomemacs/blob/d657be1744a1481dc4646d0b62d5ee1d3e75d1d8/lisp/doom-start.el#L118-L128>
  (def-hook! ceamx-frame--maybe-restore-gui-menu-bar-h (&optional frame)
    '(after-make-frame-functions window-setup-hook)
    "TODO: Provide source for this approach (Doom?), and why it does what it does."
    (when-let (frame (or frame (selected-frame)))
      (when (display-graphic-p frame)
        (set-frame-parameter frame 'menu-bar-lines 1))))

  ;; Stop C-z from minimizing windows.
  (keymap-global-unset "C-z" t))
#+end_src

*** =spacious-padding= :: a comfortable layout density

#+begin_src emacs-lisp
(package! spacious-padding
  (add-hook 'ceamx-after-init-hook #'spacious-padding-mode))

(after! spacious-padding
  (setopt spacious-padding-widths
          '( :internal-border-width 20
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 20
             :scroll-bar-width 8
             :left-fringe-width 12
             :right-fringe-width 12))

  (setopt spacious-padding-subtle-mode-line t))
#+end_src

*** =olivetti= :: "distraction-free" editing

- Package :: <https://github.com/rnkn/olivetti>

#+begin_src emacs-lisp
(package! olivetti
  (keymap-set ctl-x-x-map "o" #'olivetti-mode))

(after! olivetti
  (setopt olivetti-body-width 0.7
          olivetti-minimum-body-width 80
          olivetti-recall-visual-line-mode-entry-state t))
#+end_src

*** =logos= :: a simple focus mode with page breaks or outlines :present:
:PROPERTIES:
:ID:       9f620970-a54b-46bf-bbc4-ad3712646506
:END:

#+begin_src emacs-lisp
(package! logos
  (define-keymap :keymap (current-global-map)
    "C-x n N" #'logos-narrow-dwim

    "C-x ]" #'logos-forward-page-dwim
    "C-x [" #'logos-backward-page-dwim)

    "M-]" #'logos-forward-page-dwim
    "M-[" #'logos-backward-page-dwim)

(after! logos
  (setopt logos-outlines-are-pages t)
  (setopt logos-outline-regexp-alist
          `((emacs-lisp-mode . ,(format "\\(^;;;+ \\|%s\\)" logos-page-delimiter))
            (org-mode . ,(format "\\(^\\*+ +\\|^-\\{5\\}$\\|%s\\)" logos-page-delimiter))
            (markdown-mode . ,(format "\\(^\\#+ +\\|^[*-]\\{5\\}$\\|^\\* \\* \\*$\\|%s\\)" logos-page-delimiter))
            (conf-toml-mode . "^\\[")))

  ;; These apply buffer-locally when `logos-focus-mode' is enabled.
  (setq-default logos-hide-cursor t
                logos-hide-mode-line t
                logos-hide-header-line t
                logos-hide-buffer-boundaries t
                logos-hide-fringe t
                logos-variable-pitch t
                logos-buffer-read-only nil
                logos-scroll-lock nil
                logos-olivetti t)

  (add-hook 'enable-theme-functions #'logos-update-fringe-in-buffers)

  (def-hook! ceamx-essentials-logos-recenter-top-h ()
    '(logos-page-motion-hook)
    "Place point at the top when changing pages in non-`prog-mode' modes."
    (unless (derived-mode-p 'prog-mode)
      ;; NOTE: '0' value will recenter at the absolute top.
      (recenter 1))))
#+end_src

*** =focus= :: a lexical focus mode

+ Package :: <https://github.com/larstvei/Focus>

Focusing by sentence, paragraph, or code block.

#+begin_src emacs-lisp
;; TODO: keybindings to C-c t z as prefix
(package! focus
  (define-keymap :keymap ceamx-toggle-prefix
    "Z" #'focus-mode))
#+end_src

*** =moc= :: "Master of Ceremonies" presentation utilities :present:

+ Package :: <https://github.com/positron-solutions/moc/>

#+begin_src emacs-lisp
(package! (moc :host github :repo "positron-solutions/moc"))
#+end_src

*** Allow restoring deleted frames

#+begin_src emacs-lisp
(undelete-frame-mode 1)
#+end_src
*** Customize menu bar appearance :menubar:

Disable the menu bar by default:

#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

*** Customize tab bar appearance :tabs:

Enable the tab bar:

#+begin_src emacs-lisp
(tab-bar-mode 1)

(setopt tab-bar-auto-width t
        tab-bar-auto-width-max '((120) 20))
#+end_src

*** Typography :font:
**** Text rendering and scaling

#+begin_src emacs-lisp
(setq x-underline-at-descent-line nil)

(setq-default text-scale-remap-header-line t)
#+end_src

**** =fontaine= :: pre-configure font presets
:PROPERTIES:
:ID:       a007fa6e-ea76-4a29-86a2-7ff87885c0c1
:END:

<https://protesilaos.com/emacs/fontaine>

TIP: You can test out alterations quickly with, for example:
     (internal-set-lisp-face-attribute 'default :weight 'semilight)

#+begin_src emacs-lisp
(package! fontaine
  (when (display-graphic-p)
    (def-hook! ceamx-init-theme-activate-fontaine-h ()
      'ceamx-after-init-hook
      "Activate `fontaine-mode' with the last-saved preset.
If there is no previous preset state to load, fall back to the
\"regular\" preset."
      (fontaine-mode)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))

(after! fontaine
  (setopt fontaine-latest-state-file
          (expand-file-name "fontaine-latest-state.eld" ceamx-var-dir))

  ;; For some reason I do not yet understand, according to some
  ;; hearsay, font sizes best scale in multiples of 3-point
  ;; increments.
  (setopt fontaine-presets
          `((tiny
             :bold-weight medium
             :default-height ,(pcase (system-name)
                               (_ 78))
             :default-weight ,(pcase (system-name)
                               (_ 'semilight)))

            (small
             :bold-weight semibold
             :default-height ,(pcase (system-name)
                               (_ 90))
             :default-weight ,(pcase (system-name)
                               (_ 'regular)))

            (regular
             :bold-weight semibold)

            (medium
             :default-height ,(pcase (system-name)
                               ("boschic" 124)
                               (_ 120)))

            (large
             :default-height ,(pcase (system-name)
                               (_ 144)))

            (xlarge
             :default-height ,(pcase (system-name)
                               (_ 156)))

            (big-mclarge-huge
             :default-weight semilight
             :default-height ,(pcase (system-name)
                               (_ 180))
             :bold-weight extrabold)

            (t
             :default-family "Aporetic Sans Mono"
             :default-weight regular
             :default-height ,(pcase (system-name)
                               ("tuuvok" 102)
                               (_ 105))

             :fixed-pitch-family "Aporetic Sans Mono"
             :fixed-pitch-weight nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Aporetic Serif Mono"
             :variable-pitch-weight nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil
             :mode-line-active-weight nil
             :mode-line-active-height 0.9

             :mode-line-inactive-family nil
             :mode-line-inactive-weight nil
             :mode-line-inactive-height 0.9

             :header-line-family nil
             :header-line-weight nil
             :header-line-height 0.9

             :line-number-family nil
             :line-number-weight nil
             :line-number-height 0.9

             :tab-bar-family nil
             :tab-bar-weight nil
             :tab-bar-height 1.0

             :bold-family nil
             :bold-weight bold

             :italic-family nil
             :italic-weight nil
             :italic-slant italic

             :line-spacing nil))))
#+end_src

**** ~ligature.el~ :: improved ligature support
:PROPERTIES:
:ID:       faf642cc-811e-4b58-bbaa-51e9e11b1dff
:END:

+ Package :: <https://github.com/mickeynp/ligature.el>

A better implementation of ligature support than the builtin
~prettify-symbols-mode~.

<https://old.reddit.com/r/emacs/comments/keji66/what_is_bad_about_prettifysymbolsmode/>

#+begin_src emacs-lisp
(package! ligature
  (when (display-graphic-p)
    (after! fontaine
      (global-ligature-mode 1))))

(after! ligature
  ;; Enable all Iosevka ligatures in programming modes.
  ;; <https://github.com/mickeynp/ligature.el/wiki#iosevka>
  (ligature-set-ligatures
   'prog-mode
   '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->"
     "<---->" "<!--" "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">="
     "<=>" "<==>" "<===>" "<====>" "<!---" "<~~" "<~" "~>" "~~>"
     "::" ":::" "==" "!=" "===" "!==" ":=" ":-" ":+" "<*" "<*>"
     "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++")))
#+end_src

**** =show-font= :: a tool to preview fonts

+ Package :: <https://protesilaos.com/emacs/show-font>

  #+begin_src emacs-lisp
(when (display-graphic-p)
  (package! show-font)

  (after! show-font
    (setopt show-font-pangram 'ceamx)
    (setopt show-font-character-sample
            "
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
0123456789   !@#$¢%^&*~|
`'\"‘’“”.,;:  ()[]{}—-_+=<>

()[]{}<>«»‹› 6bB8&0ODdoa 1tiIlL|\/
!ij c¢ 5$Ss 7Z2z 9gqp nmMNNMW uvvwWuuw
x×X .,·°;:¡!¿?`'‘’   ÄAÃÀ TODO
")))
#+end_src

*** Iconography & Symbolisms :icons:
:PROPERTIES:
:ID:       8732b348-e123-4f0b-b499-49b81bf750d9
:END:
**** Provide common dependency: ~nerd-icons~ :package:
:PROPERTIES:
:ID:       0eb3c103-ba4b-40ee-9341-e5cab30e075f
:END:

#+begin_src emacs-lisp
(package! nerd-icons
  (require 'nerd-icons)

  (keymap-set ceamx-insert-prefix "I" #'nerd-icons-insert)

  (define-keymap :keymap (current-global-map)
    "C-x 8 i" (cons "icons" (define-prefix-command 'ceamx-insert-icons-prefix 'ceamx-insert-icons-prefix-map))
    "C-x 8 i i" #'nerd-icons-insert))

(after! nerd-icons
  (setopt nerd-icons-font-family "Symbols Nerd Font Mono"))
#+end_src

**** Provide common dependency: ~svg-lib~ :package:

#+begin_src emacs-lisp
(package! svg-lib)
#+end_src

**** =page-break-lines= :: improve appearance of form feed characters :package:

- docs :: <https://github.com/purcell/page-break-lines/blob/master/README.md>

#+begin_src emacs-lisp
(package! page-break-lines
  (add-hook 'ceamx-after-init-hook #'global-page-break-lines-mode))
#+end_src

**** TODO ~svg-tag-mode~: Decorate buffer elements with SVG :package:
:PROPERTIES:
:header-args: :tangle no
:END:

- Source :: <https://github.com/Icy-Thought/emacs.d/blob/main/config.org#svg-tag-decorating-buffers-with-svg>

#+begin_src emacs-lisp
(package! svg-tag-mode
  (add-hook 'prog-mode-hook #'svg-tag-mode)
  (add-hook 'text-mode-hook #'svg-tag-mode))
#+end_src

*** Provide the ~ceamx-init-ui~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-ui.el :comments no
(provide 'ceamx-init-ui)
;;; ceamx-init-ui.el ends here
#+end_src

** Modeline :modeline:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-modeline.el
:VISIBILITY: folded
:ID:       7e592f24-8ad1-4432-862a-5873a7bb18dd
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-modeline.el :comments no
;; -*- lexical-binding: t; -*-

(require 'ceamx-lib)
#+end_src

*** =mlscroll= :: scrollbar for the modeline

#+begin_src emacs-lisp
(package! mlscroll
  (mlscroll-mode 1))
#+end_src

*** =minions= :: minimize many mode-line minor-modes
:PROPERTIES:
:ID:       af187c9b-e6b2-47dc-a1b0-848a38455d74
:END:

#+begin_src emacs-lisp
(package! minions
  (minions-mode 1)
  (setopt minions-prominent-modes
          '(auto-tangle-mode
            jinx-mode
            which-key-mode)))
#+end_src

*** Set up the ~ceamx-modeline~
:PROPERTIES:
:ID:       e8fa729f-3a84-4b3b-88eb-450406dde0a5
:END:

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)

(setopt display-time-24hr-format t)

(use-feature! ceamx-modeline
  :hook (ceamx-after-init . ceamx-modeline-mode)
  :init
  (keymap-set ceamx-toggle-prefix "m" #'ceamx-modeline-mode)
  :config
  (setq-default mode-line-format
                '("%e"
                  ceamx-modeline-kbd-macro
                  ceamx-modeline-narrow
                  ceamx-modeline-remote-status
                  ceamx-modeline-window-dedicated-status
                  " "
                  ceamx-modeline-buffer-identification
                  " "
                  ceamx-modeline-major-mode
                  " "
                  ceamx-modeline-position
                  ceamx-modeline-process
                  " "
                  (project-mode-line project-mode-line-format)
                  ceamx-modeline-vc-branch
                  " "
                  ceamx-modeline-eglot
                  " "
                  ;; ceamx-modeline-flymake
                  " "
                  mode-line-format-right-align ; Emacs 30
                  mode-line-modes
                  " "
                  ceamx-modeline-format-on-save
                  ;; ceamx-modeline-notmuch-indicator
                  " "
                  ceamx-modeline-misc-info
                  ;;ceamx-modeline-scrollbar
                  )))
#+end_src

*** =keycast= :: show current command and its binding :present:

- Website :: <https://github.com/tarsius/keycast>

Supports display in the mode-line, header-line, tab-bar, and as
messages in a dedicated frame.

NOTE: Incompatible with kitchen-sink modeline packages like
=doom-modeline= and =telephone-line=.

#+begin_src emacs-lisp
(after! keycast
  (dolist (input '(self-insert-command org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil))))
#+end_src

*** Provide the ~ceamx-init-modeline~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-modeline.el :comments no
(provide 'ceamx-init-modeline)
;;; ceamx-init-modeline.el ends here
#+end_src

** Essentials
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-essentials.el
:VISIBILITY: folded
:ID:       befd5701-44ee-4324-9a6c-63e39bd5e459
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-essentials.el :comments no
;; -*- lexical-binding: t; -*-
#+end_src

*** Baseline configurations
:PROPERTIES:
:ID:       9d89d38e-1fa6-41e5-b5a7-8c1c3422a34c
:END:

#+begin_src emacs-lisp
;; Increase number of messages saved in log.
(setopt message-log-max 10000)

;; "A second, case-insensitive pass over `auto-mode-alist' is time wasted."
(setopt auto-mode-case-fold nil)

(define-keymap :keymap (current-global-map)
  "M-c" #'capitalize-dwim
  "M-f" #'forward-word
  "M-F" #'forward-symbol
  "M-l" #'downcase-dwim
  "M-o" #'delete-blank-lines
  "M-Q" #'repunctuate-sentences
  "M-u" #'upcase-dwim
  "M-z" #'zap-up-to-char              ; orig: `zap-to-char'
  "M-=" #'count-words
  "M-SPC" #'cycle-spacing

  "C-h F" #'apropos-function
  "C-h L" #'apropos-library
  "C-h U" #'apropos-user-option
  "C-h V" #'apropos-variable

  ;; TODO: move to window config
  "C-x O" #'next-multiframe-window

  ;; Minimizing frames is the job of the window manager.
  "C-x C-z" nil)

;; Keymap for buffers
;; TODO: copy some of these to `ceamx-toggle-prefix'
(define-keymap :keymap ctl-x-x-map
  "f" #'follow-mode
  "l" #'visual-line-mode
  "r" #'rename-uniquely)


#+end_src

*** =ceamx-simple=: Simple & common commands
:PROPERTIES:
:ID:       3fcbca20-29f3-4e91-ba76-6bad1199adc3
:END:

#+begin_src emacs-lisp
(use-feature! ceamx-simple
  :demand t

  :config
  (define-keymap :keymap ceamx-file-prefix
  ;; TODO
  ;; "y" #'+yank-this-file-name

  "c" '("copy..." . ceamx-simple/copy-current-file)
  "d" '("delete" . ceamx-simple/delete-current-file)
  "f" #'find-file
  "F" #'find-file-other-window
  "r" '("move..." . ceamx-simple/move-current-file)
  "s" #'save-buffer
  "U" #'ceamx-simple/sudo-find-file

  "C-d" '("diff with..." . ceamx-simple/diff-with-file))

  (define-keymap :keymap ceamx-insert-prefix
    "d" #'ceamx-simple/insert-date)

  (define-keymap :keymap (current-global-map)
    "ESC ESC" #'ceamx/keyboard-quit-dwim
    "C-g" #'ceamx/keyboard-quit-dwim

    "C-x k" #'ceamx-simple/kill-current-buffer ; orig: `kill-buffer'
    "C-x K" #'kill-buffer

    ;; FIXME: move defun to `ceamx-simple'
    "M-DEL" #'ceamx/backward-kill-word

    "C-M-SPC" #'ceamx-simple/mark-sexp

    ;; Commands for lines
    ;; TODO: currently `easy-kill'
    ;; "M-w" #'ceamx-simple/kill-ring-save
    "M-k" #'ceamx-simple/kill-line-backward
    "C-S-d" #'ceamx-simple/duplicate-line-or-region
    ;; TODO: redundant with `easy-kill'
    "C-S-w" #'ceamx-simple/copy-line
    "C-S-y" #'ceamx-simple/yank-replace-line-or-region
    "C-RET" #'ceamx-simple/new-line-below
    "C-S-RET" #'ceamx-simple/new-line-above

    ;; Commands for text insertion or manipulation
    "C-<" #'ceamx-simple/escape-url-dwim
    "M-Z" #'ceamx-simple/zap-to-char-backward

    ;; Commands for buffers
    "M-s b" #'ceamx-simple/buffers-major-mode
    "M-s v" #'ceamx-simple/buffers-vc-root)

  (define-keymap :keymap prog-mode-map
    "M-RET" #'ceamx-simple/continue-comment)

  (keymap-substitute (current-global-map)
                     #'default-indent-new-line
                     #'ceamx-simple/continue-comment))
#+end_src

*** =crux= :: a [c]ollection of [r]idiculously [u]seful e[x]tensions
:PROPERTIES:
:ID:       5fe13339-e827-421a-a059-f0fea7bff481
:END:

#+begin_src emacs-lisp
(package! crux
  (define-keymap :keymap (current-global-map)
    "C-k" #'crux-smart-kill-line
    "C-^" #'crux-top-join-line

    "C-x 4 t" #'crux-transpose-windows

    "C-S-d" #'crux-duplicate-current-line-or-region
    "C-S-RET" #'crux-smart-open-line-above
    "C-M-S-d" #'crux-duplicate-and-comment-current-line-or-region

    "M-o" #'crux-other-window-or-switch-buffer ; orig. `delete-blank-lines'

    "S-RET" #'crux-smart-open-line)

  (define-keymap :keymap ceamx-buffer-prefix
    "f" #'crux-cleanup-buffer-or-region
    "M-w" #'crux-kill-buffer-truename)

  (define-prefix-command 'ceamx-region-prefix 'ceamx-region-prefix-map)

  (keymap-global-set "C-c r" #'ceamx-region-prefix)

  (define-keymap :keymap ceamx-region-prefix-map
    "f" #'crux-cleanup-buffer-or-region
    "TAB" #'crux-indent-rigidly-and-copy-to-clipboard)

  (define-keymap :keymap ceamx-file-prefix
    "c" #'crux-copy-file-preserve-attributes
    "d" #'crux-delete-file-and-buffer
    "r" #'crux-rename-file-and-buffer))
#+end_src

*** =tmr= :: set timers using a convenient notation
:PROPERTIES:
:ID:       67caf305-67ce-42b5-9ff3-98b0f9ac6b06
:END:

+ Website :: <https://protesilaos.com/emacs/tmr>

#+begin_src emacs-lisp
(package! tmr
  (require 'tmr)

  (keymap-global-set "C-c T" #'tmr-prefix-map)

  (setopt tmr-notification-urgency 'normal)
  (setopt tmr-description-list 'tmr-description-history)

  (defvar-keymap ceamx+embark-tmr-action-map
    :doc "Action map for TMRs, which can be utilized by Embark."
    "k" #'tmr-remove
    "r" #'tmr-remove
    "R" #'tmr-remove-finished
    "c" #'tmr-clone
    "a" #'tmr-toggle-acknowledge
    "e" #'tmr-edit-description
    "s" #'tmr-reschedule)

  (defvar embark-keymap-alist)
  (defvar embark-post-action-hooks)

  (after! embark
    (add-to-list 'embark-keymap-alist '(tmr-timer . ceamx+embark-tmr-action-map))
    (cl-loop
     for cmd the key-bindings of ceamx+embark-tmr-action-map
     if (commandp cmd) do
     (add-to-list 'embark-post-action-hooks (list cmd 'embark--restart)))))
#+end_src

*** =persistent-scratch= :: Preserve the scratch buffer across sessions
:PROPERTIES:
:ID:       a85e81df-a194-4ecf-b1ca-5d95279cb45f
:END:

#+begin_src emacs-lisp
(package! persistent-scratch
  (persistent-scratch-setup-default))
#+end_src

*** Configure sane window-scrolling behavior

#+begin_src emacs-lisp
(use-feature! window
  :bind
  ("C-x <" . scroll-right)
  ("C-x >" . scroll-left)
  ("<wheel-left>" . scroll-left)
  ("<wheel-right>" . scroll-right)

  :config
  ;; Available cycle positions for `recenter-top-bottom'.
  ;; (setopt recenter-positions '(top middle bottom))
  (setopt recenter-positions '(middle top bottom)) ; default

  ;; Horizontally-scroll only the current line when point column moves
  ;; beyond window boundaries.
  (setopt auto-hscroll-mode 'current-line)

  (setopt scroll-error-top-bottom t
          ;; Prevent unwanted horizontal scrolling upon navigation.
          scroll-preserve-screen-position t
          scroll-conservatively 10000)

  ;; Add a margin when scrolling vertically (or don't).
  (setq-default scroll-margin 1))
#+end_src

*** Auto-revert buffers

#+begin_src emacs-lisp
(use-feature! autorevert
  :hook (ceamx-after-init . global-auto-revert-mode)
  :config
  ;; Ensure the non-file-visiting buffers are also auto-reverted as needed.  For
  ;; example, this will cause Dired to refresh a file list when the directory
  ;; contents have changed.
  (setopt global-auto-revert-non-file-buffers t)

  (setopt auto-revert-interval 2))
#+end_src

*** Normalize whitespace and indentation handling

#+begin_src emacs-lisp
(use-feature! emacs
  :hook ((before-save . delete-trailing-whitespace))

  :config
  (setq-default indent-tabs-mode nil
                tab-width 8)

  (setopt backward-delete-char-untabify-method 'hungry)
  (setopt mode-require-final-newline 'visit-save)
  (setopt sentence-end-double-space t)

  (electric-indent-mode 1))
#+end_src

*** Visualize notable and unusual whitespace

#+begin_src emacs-lisp
(use-feature! emacs
  :hook ((prog-mode . whitespace-mode))

  :config
  (setq-default indicate-empty-lines nil)

  (setopt whitespace-style
          '(face
            tabs
            tab-mark
            trailing
            missing-newline-at-eof
            ;; space-after-tab::space
            ;; space-before-tab::space
            space-after-tab
            space-before-tab)))
#+end_src

*** =editorconfig= :: enforce EditorConfig settings
:PROPERTIES:
:ID:       d0133690-e4a8-40a7-abcf-12816589d4b7
:END:

- Website :: <https://editorconfig.org>

#+begin_src emacs-lisp
;; via <https://github.com/doomemacs/doomemacs/commit/43870bf8318f6471c4ce5e14565c9f0a3fb6e368>
(defun +editorconfig-enforce-org-mode-tab-width-h (props)
  "Prevent `editorconfig' from changing `tab-width' in `org-mode'.
A \"tab-width\" of any value other than 8 is an error state in
org-mode, so it must not be changed.

PROPS is as in `editorconfig-after-apply-functions'."
  (when (and (gethash 'indent_size props)
             (derived-mode-p 'org-mode))
    (setq tab-width 8)))

(package! editorconfig
  (add-hook 'ceamx-emacs-startup-hook #'editorconfig-mode)

  ;; TODO: needs prefix to be defined early!
  ;;  (keymap-global-set "C-c l f e" #'editorconfig-format-buffer)

  (after! editorconfig
    (add-hook 'editorconfig-after-apply-functions
              #'+editorconfig-enforce-org-mode-tab-width-h)))

#+end_src

*** Movement / Regions / Basic Editing
:PROPERTIES:
:ID:       2c6a6df3-2b31-4638-bdcd-c9e63e367ea0
:END:

#+begin_src emacs-lisp
(define-keymap :keymap (current-global-map)
  ;; Since `comment-dwim' is bound to [M-;], I find it unintuitive
  ;; that `comment-line' is bound to [C-x C-;].
  "C-x M-;" #'comment-line)
#+end_src

**** =mwim=: Replace ~beginning-of-line~ and ~end-of-line~ with DWIM alternatives

#+begin_src emacs-lisp
(package! mwim
  ;; FIXME: overrides `org-mode' bindings!
  (keymap-global-set "C-a" #'mwim-beginning)
  (keymap-global-set "C-e" #'mwim-end))
#+end_src

**** =beginend= :: rebind context-sensitive =(beginning,end)-of-buffer=

+ Package :: https://github.com/DamienCassou/beginend

  #+begin_src emacs-lisp
(package! beginend
  (blackout 'beginend-global-mode)
  (beginend-global-mode))
#+end_src

**** =easy-kill= :: killing is easy when you're emacs :package:
:PROPERTIES:
:ID:       a3727c22-4373-47aa-ac61-e1355c5e048d
:END:

+ Package documentation :: <https://github.com/leoliu/easy-kill/blob/master/README.rst>

+ =w= :: word
+ =s= :: sexp
+ =l= :: list
+ =d= :: defun
+ =D= :: defun name
+ =f= :: file
+ =b= :: buffer name
  + =-= :: ~default-directory~
  + =+= :: absolute path
  + =0= :: basename

#+begin_src emacs-lisp
(use-package easy-kill
  :ensure t
  :bind
  ("M-w" . #'easy-kill)   ; orig. `kill-ring-save'
  ("C-M-@" . #'easy-mark) ; orig. `mark-sexp'
  )
#+end_src

**** Replace region when inserting text

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

**** =expreg= :: simple alternativate to ~expand-region~ using ~treesit~

+ Package :: <https://github.com/casouri/expreg>

#+begin_src emacs-lisp
(package! expreg
  (keymap-global-set "C-+" #'expreg-expand)
  (keymap-global-set "C-=" #'expreg-contract))
#+end_src

**** =drag-stuff= :: drag stuff around in arbitrary directions :package:
:PROPERTIES:
:ID:       1febb9e9-ec19-4765-b6bb-21613e7667fb
:END:

<https://github.com/rejeep/drag-stuff.el>

This package appears to be abandoned since 2017.  As of <2024-12-27>,
it still works relatively well, but has some issues:

+ Possible subtle conflicts with ~org-metaup~ and ~org-metadown~?
+ Numerous warnings about deprecated functions <https://github.com/rejeep/drag-stuff.el/issues/36>

I haven't yet found any other package to move arbitrary regions
up/down while preserving column position.

~move-text-mode~ <https://github.com/emacsfodder/move-text> claims to do
this, but fails pretty badly, moving the region/selection to the first
column regardless of its original position.

#+begin_src emacs-lisp
(use-package drag-stuff
  ;; :ensure t
  :bind
  (([M-up] . drag-stuff-up)
   ([M-right] . drag-stuff-right)
   ([M-down] . drag-stuff-down)
   ([M-left] . drag-stuff-left)))
#+end_src

**** Visualize and electrify matching character pairs :pairs:

See the Info node [[info:emacs#Matching]]


#+begin_src emacs-lisp
(setopt blink-matching-paren t)
;; Avoid "expression" style, which looks too much like a selected region.
(setopt show-paren-style 'parenthesis)

(setopt electric-pair-preserve-balance t)
(setopt electric-pair-delete-adjacent-pairs t)
(setopt electric-pair-skip-whitespace t)
;; TODO: evaluating...
(setopt electric-pair-open-newline-between-pairs t)

(electric-pair-mode 1)
(show-paren-mode 1)
#+end_src

**** Consider camelCaseWORDs as separate words
:PROPERTIES:
:ID:       b0593fa1-e228-4fcd-89f2-f7bbdf5f9d2c
:END:

While it can be useful in some contexts, I wish that ~subword-mode~ did not break
~ceamx/backward-kill-word~.  See also [[*Provide a command to intelligently kill
words backwardsly]]

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

**** TODO ~string-inflection~ :: commands to cycle through word casing
:PROPERTIES:
:ID:       bf713b67-b25a-41c7-87ba-f5c9a9f7852b
:END:

Needs better bindings.

#+begin_src emacs-lisp
(package! string-inflection)

(use-feature! ceamx-editor
  :after string-inflection
  :commands (ceamx/cycle-string-inflection)
  :init
  (defvar-keymap ceamx-string-repeat-map
    :repeat t

    "c" #'ceamx/cycle-string-inflection))
#+end_src

**** =ialign= :: Interactively ~align-regexp~ :package:
:PROPERTIES:
:ID:       7c7b2b24-f6e4-4af5-934f-0d66b65bba6c
:END:

<https://github.com/mkcms/interactive-align/blob/master/README.org#usage>

#+begin_src emacs-lisp
(package! ialign
  (keymap-global-set "C-x l" #'ialign))
#+end_src

**** TODO ~lasgun~ :: =avy=-backed actionable multi-mark filter-select-act loops
:PROPERTIES:
:ID:       8fb3be75-c1b6-48bd-853a-3c18c905367d
:END:

+ Package :: https://github.com/aatmunbaxi/lasgun.el

+ [ ] [[https://github.com/aatmunbaxi/lasgun.el?tab=readme-ov-file#example-embark-action-menu][Embark action menu]]
+ [ ] After Avy
+ [ ] Customize
+ [ ] Where to put the [[https://github.com/aatmunbaxi/lasgun.el?tab=readme-ov-file#example-transient-configuration][Transient menu]]?

  #+begin_src emacs-lisp :tangle no
(package! (lasgun :host github
                  :repo "aatmunbaxi/lasgun.el"))
#+end_src

*** Line wrapping

#+begin_src emacs-lisp
(use-feature! emacs
  :hook (((prog-mode text-mode) . auto-fill-mode))

  :config
  (setq-default fill-column 70)
  ;; Disable line soft-wrapping by default.
  (setq-default truncate-lines t)

  (setopt comment-auto-fill-only-comments t))

(use-package unfill
  ;; :ensure t
  :bind ("M-q" . unfill-toggle))
#+end_src

*** Configure secrets lookup with ~auth-source~ and =password-store=

- source :: <https://github.com/jwiegley/dot-emacs/blob/9d595c427136e2709dee33271db1a658493265bd/init.org#auth-source-pass>

#+begin_src emacs-lisp
(use-feature! auth-source
  :demand t
  :config
  ;; Ensure the usage of an encrypted auth credentials file.  It's
  ;; best to list only a single file here to avoid confusion about
  ;; where secrets might be stored.
  (setopt auth-sources (list "~/.authinfo.gpg")))

;; TODO: provide explanation as to why these functions are named like so -- they just magically work..?
(use-feature! auth-source-pass
  :demand t

  :preface
  (defvar auth-source-pass--cache (make-hash-table :test #'equal))

  (defun auth-source-pass--reset-cache ()
    (setq auth-source-pass--cache (make-hash-table :test #'equal)))

  (defun auth-source-pass--read-entry (entry)
    "Return a string with the file content of ENTRY."
    (run-at-time 45 nil #'auth-source-pass--reset-cache)
    (let ((cached (gethash entry auth-source-pass--cache)))
      (or cached
          (puthash
           entry
           (with-temp-buffer
             (insert-file-contents (expand-file-name
                                    (format "%s.gpg" entry)
                                    (getenv "PASSWORD_STORE_DIR")))
             (buffer-substring-no-properties (point-min) (point-max)))
           auth-source-pass--cache))))

  (defun ceamx-auth-source-pass-list-items ()
    "Return a list of all password store items."
    (let ((store-dir (getenv "PASSWORD_STORE_DIR")))
      (mapcar
       (lambda (file)
         (file-name-sans-extension (file-relative-name file store-dir)))
       (directory-files-recursively store-dir "\.gpg$"))))

  :config
  (auth-source-pass-enable))
#+end_src

*** Configure GnuPG integration with ~epa~ & ~epg~

#+begin_src emacs-lisp
(use-feature! epa
  :demand t
  :config
  (require 'ceamx-cryption)

  (define-keymap :keymap ceamx-file-prefix
    "e" #'epa-encrypt-file
    "d" #'epa-decrypt-file)

  (define-keymap :keymap ceamx-cryption-prefix-map
    "d" (cons "decrypt..." (define-prefix-command 'ceamx-cryption-d-prefix))
    "d d" #'epa-decrypt-file
    "d r" #'epa-decrypt-region
    "e" (cons "encrypt..." (define-prefix-command 'ceamx-cryption-e-prefix))
    "e e" #'epa-encrypt-file
    "e r" #'epa-encrypt-region
    "k" #'epa-list-keys)

  ;; HACK: No need to set a recipient every single time!
  (setq-default epa-file-encrypt-to (ceamx-cryption+epa-default-recipient))
  (advice-add #'epa-file-write-region :before #'ceamx-cryption+epa-disable-key-prompt-a)

  ;; Enable automatic cryption of *.gpg files.
  (epa-file-enable))

(use-feature! dired
  :after epa
  :config
  ;; Also see the ':' prefix!
  (define-keymap :keymap dired-mode-map
    "C-c e e" #'epa-dired-do-encrypt
    "C-c e d" #'epa-dired-do-decrypt))

(use-feature! epg
  :config
  ;; Handle pinentry within Emacs.
  (setopt epg-pinentry-mode 'loopback))
#+end_src

*** Buttonize URLs and email addresses with ~goto-address~ [builtin]

#+begin_src emacs-lisp
(use-feature! goto-addr
  :hook (prog-mode . goto-address-prog-mode))
#+end_src

*** =link-hint=: Activate links in buffer with ~avy~

<https://github.com/noctuid/link-hint.el>

#+begin_src emacs-lisp
(package! link-hint
  (define-keymap :keymap (current-global-map)
    "M-g u" #'link-hint-open-link
    "M-g U" #'link-hint-copy-link))
#+end_src

*** Manage backup files and prevent file-lock clutter

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt create-lockfiles nil
          ;; TODO: enable under some conditions e.g. not a project,
          ;; tramp remote file
          make-backup-files nil
          delete-by-moving-to-trash t)

  (when make-backup-files
    (setopt version-control t
            delete-old-versions t
            kept-new-versions 5
            kept-old-versions 5)))
#+end_src

*** Configure finding of files

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt find-file-suppress-same-file-warnings t
          find-file-visit-truename t)

  ;; via <https://github.com/doomemacs/doomemacs/blob/e96624926d724aff98e862221422cd7124a99c19/lisp/doom-editor.el#L78-L89>
  (def-hook! ceamx-find-file-create-paths-h ()
    'find-file-not-found-functions
    "Automatically create missing directories when creating new files."
    (unless (file-remote-p buffer-file-name)
      (let ((parent-directory (file-name-directory buffer-file-name)))
        (and (not (file-directory-p parent-directory))
             (y-or-n-p (format "Directory `%s' does not exist! Create it?"
                               parent-directory))
             (progn (make-directory parent-directory 'parents)
                    t))))))
#+end_src

*** Auto-save file-visiting buffers

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt
   ;; Prevent creation of the list of all auto-saved files.
   auto-save-list-file-prefix nil
   ;; Number of input events before autosave
   auto-save-interval 300
   ;; Idle interval for all file-visiting buffers
   auto-save-visited-interval 30
   ;; Idle interval before autosave
   auto-save-timeout 30
   ;; Don't create auto-save "~" files.
   auto-save-default nil)

  ;; Save file-visiting buffers according to the configured timers.
  (auto-save-visited-mode))
#+end_src

*** Interactive buffer management with ~ibuffer~

#+begin_src emacs-lisp
(use-feature! ibuffer
  :config
  (setopt ibuffer-movement-cycle t))
#+end_src

*** Help
**** Rebind some default ~help-map~ keybindings

#+begin_src emacs-lisp
(define-keymap :keymap help-map
  "K" (cons "[ KEYBINDINGS ]" #'ceamx-help-keybindings-prefix)
  "l" #'find-library
  ;; I prefer the default `man' over `consult-man'.  The latter does
  ;; not really work well since it does not show unfiltered candidates
  ;; by default, and two-character-named programs are too short to
  ;; trigger the query.
  "m" #'man                             ; orig: `describe-mode'
  "M" #'describe-mode
  "t" #'describe-text-properties

  ;; Allow `which-key' pagination in `help-map'.
  "C-h" nil)
#+end_src

**** =casual-suite=: transient-dispatch menus for complex modes

#+begin_src emacs-lisp
(package! casual-suite
  (require 'casual-suite)

  (keymap-global-set "C-o" #'casual-editkit-main-tmenu)
  (keymap-set symbol-overlay-map "C-o" #'casual-symbol-overlay-tmenu)

  ;; <https://github.com/kickingvegas/casual-avy>
  ;; M-g M-g
  (keymap-set goto-map "M-g" #'casual-avy-tmenu)

  ;; <https://github.com/kickingvegas/casual-calc>
  (after! calc
    (keymap-set calc-mode-map "C-o" #'casual-calc-tmenu))
  (after! calc-alg
    (keymap-set calc-alg-map "C-o" #'casual-calc-tmenu))

  ;; <https://github.com/kickingvegas/casual-dired>
  (after! dired
    (keymap-set dired-mode-map "C-o" #'casual-dired-tmenu))

  ;; <https://github.com/kickingvegas/casual-info>
  (after! info
    (keymap-set Info-mode-map "C-o" #'casual-info-tmenu))

  ;; <https://github.com/kickingvegas/casual-isearch>
  (after! isearch
    (keymap-set isearch-mode-map "<f2>" #'casual-isearch-tmenu))

  (after! ibuffer
    (keymap-set ibuffer-mode-map "C-o" #'casual-ibuffer-tmenu)
    (keymap-set ibuffer-mode-map "F" #'casual-ibuffer-filter-tmenu)
    (keymap-set ibuffer-mode-map "s" #'casual-ibuffer-sortby-tmenu))

  (after! re-builder
    (keymap-set reb-mode-map "C-o" #'casual-re-builder-tmenu)
    (keymap-set reb-lisp-mode-map "C-o" #'casual-re-builder-tmenu))

  (after! bookmark
    (keymap-set bookmark-bmenu-mode-map "C-o" #'casual-bookmarks-tmenu))

  (after! org-agenda
    (keymap-set org-agenda-mode-map "C-o" #'casual-agenda-tmenu)))
#+end_src

**** =Info-mode= enchantments

#+begin_src emacs-lisp
(use-feature! info
  :hook ((Info-mode . hl-line-mode)
         (Info-mode . scroll-lock-mode)))
#+end_src

**** =helpful=: Provide improved alternatives to the builtin "describe" utilities

- Source code :: <https://github.com/Wilfred/helpful>

Note that there is a severe but edge-case bug that has gone unfixed
for quite a while.  ~helpful~ cannot display documentation for symbols
defined in Emacs C source code:

<https://github.com/Wilfred/helpful/issues/329>

#+begin_src emacs-lisp
(package! helpful
  (defer! 1
    (require 'helpful))

  (define-keymap :keymap help-map
    "c" #'helpful-callable
    "C" #'helpful-command
    "f" #'helpful-function              ; orig: `describe-face'
    "F" #'describe-face
    "h" #'helpful-at-point
    "K K" #'helpful-key
    "o" #'helpful-symbol
    "v" #'helpful-variable))

#+end_src

*** History & Undo
**** Record some variables' values with ~savehist~

#+begin_src emacs-lisp
(use-feature! savehist
  :init
  (savehist-mode)

  :config
  (cl-dolist (save '(kill-ring
                     regexp-search-ring
                     search-ring))
    (cl-pushnew save savehist-additional-variables))
  (setopt history-length 100
          history-delete-duplicates t)
  (setopt savehist-autosave-interval 60))
#+end_src

**** Record point position in buffers with ~saveplace~

#+begin_src emacs-lisp
(use-feature! saveplace
  :init
  (save-place-mode))
#+end_src

**** Record recently-accessed files with ~recentf~

#+begin_src emacs-lisp
(use-feature! recentf
  :init
  (recentf-mode)

  :config
  (setopt recentf-max-saved-items 50)   ; default => 20
  (setopt recentf-max-menu-items 15)    ; default => 10

  ;; Disable recentf-cleanup on Emacs start, because it can cause
  ;; problems with remote files.
  (setopt recentf-auto-cleanup 'never)

  ;; Exclude internal plumbing files.
  (dolist (path '(ceamx-etc-dir ceamx-var-dir))
    (add-to-list 'recentf-exclude path)))
#+end_src

**** Increase undo history limits

Advice from the author of ~undo-fu~:

#+begin_quote
The default undo limits for emacs are quite low _(0.15mb at time of
writing)_ undo-tree for example increases these limits.

On modern systems you may wish to use much higher limits.

This example sets the limit to 64mb, 1.5x (96mb) for the strong limit
and 10x (960mb) for the outer limit.  Emacs uses 100x for the outer
limit but this may be too high when using increased limits.
#+end_quote

via <https://codeberg.org/ideasman42/emacs-undo-fu#undo-limits>

#+begin_src emacs-lisp
(setopt undo-limit 67108864) ; 64mb.
(setopt undo-strong-limit 100663296) ; 96mb.
(setopt undo-outer-limit 1006632960) ; 960mb.
#+end_src

**** =undo-fu=: Support optional linear undo/redo

- Source code :: <https://codeberg.org/ideasman42/emacs-undo-fu>

#+begin_src emacs-lisp
(package! undo-fu
  (keymap-global-set "C-z" #'undo-fu-only-undo)
  (keymap-global-set "C-S-z" #'undo-fu-only-redo))
#+end_src

**** =undo-fu-session=: Record undo/redo steps across Emacs sessions

- Source code :: <https://codeberg.org/ideasman42/emacs-undo-fu-session>

NOTE: This is *NOT* just for use with ~undo-fu~!  It's an essential
enhancement to the builtin Emacs undo system as well.

#+begin_src emacs-lisp
(defvar undo-fu-session-directory
  (expand-file-name "undo-fu-session" ceamx-var-dir))

(package! undo-fu-session
  (setopt undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (setopt undo-fu-session-ignore-temp-files t)
  (setopt undo-fu-session-ignore-encrypted-files t)

  (setopt undo-fu-session-compression 'zst)

  (undo-fu-session-global-mode))
#+end_src

**** =vundo=: Visualize the Emacs undo tree
:PROPERTIES:
:ID:       8fd3c7aa-cf9d-47f9-91cf-715e6f5d0618
:END:

- Source code :: <https://github.com/casouri/vundo>

#+begin_src emacs-lisp
(use-package vundo
  ;; :ensure t
  :defer t
  :defines vundo-unicode-symbols

  :bind
  ("C-x u" . vundo)

  :config
  (setopt vundo-glyph-alist vundo-unicode-symbols))
#+end_src

*** Bookmarks
**** =dogears=: Return to previously-visited buffer positions

- Source code :: <https://github.com/alphapapa/dogears.el>

#+begin_src emacs-lisp :tangle no
(package! dogears
  (add-hook 'on-first-buffer-hook #'dogears-mode)

  ;; Also see `ceamx/dogears-dispatch'.
  (define-keymap :keymap (current-global-map)
    ;; TODO: find a new binding maybe
    ;; "M-g d" #'dogears-go
    "M-g M-b" #'dogears-back
    "M-g M-f" #'dogears-forward
    "M-g M-d" #'dogears-list
    "M-g M-D" #'dogears-sidebar)

  ;; Persist `dogears-list' between Emacs sessions.
  ;; via <https://github.com/alphapapa/dogears.el/issues/4>
  (after! savehist
    (when (boundp 'savehist-additional-variables)
      (add-to-list 'savehist-additional-variables #'dogears-list))))

;; TODO: provide a little more context in transient (label for dogears, links maybe...)
(after! (transient dogears)
  (transient-define-prefix ceamx/dogears-dispatch ()
    "Transient menu for `dogears' history navigation commands."
    [["Navigate"
      ("b" "back" dogears-back :transient transient--do-stay)
      ("f" "forward" dogears-forward :transient transient--do-stay)]
     ;; TODO: when quit one of these Find commands, return to transient
     ["Find"
      ("d" "go..." dogears-go)
      ("l" "list" dogears-list)
      ("S" "sidebar" dogears-sidebar)]])

  (defer-until! (fboundp 'ceamx/dogears-dispatch)
    (keymap-global-set "M-g d" #'ceamx/dogears-dispatch)))
#+end_src

*** =which-key=

#+begin_src emacs-lisp
(use-feature! which-key
  :hook (ceamx-after-init . which-key-mode)

  :config
  (setopt which-key-compute-remaps t)
  (setopt which-key-idle-delay 1.0)
  (setopt which-key-sort-order 'which-key-prefix-then-key-order
          which-key-sort-uppercase-first nil)

  ;; The default (0) is difficult to read.
  (setopt which-key-add-column-padding 2)

  ;; FIXME: no effect? what does this actually do?
  (setopt which-key-show-remaining-keys t))
#+end_src

*** macOS: Remap modifier keys for the Apple keyboard layout

#+begin_src emacs-lisp
(when (and (ceamx-host-macos-p) (display-graphic-p))
  (setopt mac-control-modifier 'control)
  (setopt mac-option-modifier 'meta)
  (setopt ns-option-modifier 'meta)
  (setopt mac-command-modifier 'super)
  (setopt ns-command-modifier 'super)
  ;; Free up the right-side option key for character composition.
  (setopt mac-right-option-modifier 'none)
  (setopt ns-right-option-modifier 'none)
  ;; Common system hotkeys.
  (define-keymap :keymap (current-global-map)
    "s-c" #'kill-ring-save
    "s-v" #'yank
    "s-x" #'kill-region
    "s-q" #'save-buffers-kill-emacs))
#+end_src

*** Enable and configure ~repeat-mode~

#+begin_src emacs-lisp
(add-hook 'ceamx-after-init-hook #'repeat-mode)

(after! repeat
  (setopt repeat-exit-timeout 10)
  (setopt repeat-on-final-keystroke t)
  (setopt repeat-keep-prefix t)
  (setopt repeat-exit-key "<return>"))
#+end_src

Related, but not technically part of ~repeat-mode~:

#+begin_src emacs-lisp
(setopt set-mark-command-repeat-pop t)
#+end_src

*** Provide ~ceamx-init-essentials~ feature

#+begin_src emacs-lisp
(provide 'ceamx-init-essentials)
;;; ceamx-init-essentials.el ends here
#+end_src

** Search :search:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-search.el
:VISIBILITY: folded
:ID:       11946c45-0ed9-4f75-bbad-72ee57f1311b
:END:

Configuration for search-related utilities like ~isearch~ and
~query-replace~.

See also [[*CONSULTing completing-read]], as ~consult~ often provides a frontend to
these utilities.

- Source :: <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-isearch.el>

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

*** Baseline search configuration

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt find-library-include-other-files nil)

  (keymap-set search-map "r" '("replace..." . ceamx-replace-prefix)))
#+end_src

*** Configure interactive searching with ~isearch~

#+begin_src emacs-lisp
(after! isearch
  (blackout 'isearch)

  ;;
  ;; Settings

  (setopt search-highlight t
          isearch-lazy-highlight t
          lazy-highlight-initial-delay 0.5
          lazy-highlight-no-delay-length 4)
  (setopt isearch-lazy-count t
          lazy-count-prefix-format "[%s/%s] "
          lazy-count-suffix-format nil)
  (setopt isearch-allow-scroll 'unlimited)
  (setopt isearch-wrap-pause t
          isearch-repeat-on-direction-change t)

  ;; Allow extending search string by holding shift and using motion
  ;; commands.
  (setopt isearch-yank-on-move 'shift)

  (setopt search-whitespace-regexp ".*?"
          isearch-lax-whitespace t
          isearch-regexp-lax-whitespace nil)

  ;;
  ;; Keybindings

  (defvar-keymap isearch-repeat-map
    :repeat t
    "s" #'isearch-repeat-forward
    "r" #'isearch-repeat-backward)

  (define-keymap :keymap (current-global-map)
    "M-s M-o" #'multi-occur)

  (define-keymap :keymap isearch-mode-map
    "M-<" #'isearch-beginning-of-buffer
    "M->" #'isearch-end-of-buffer
    "M-/" #'isearch-complete
    "M-w" #'isearch-yank-word-or-char

    "M-s <" #'isearch-beginning-of-buffer
    "M-s >" #'isearch-end-of-buffer

    "C-g" #'isearch-cancel              ; orig. `isearch-abort'

    "C-w" nil
    "M-e" nil)

  (keymap-set minibuffer-local-isearch-map "M-/" #'isearch-complete-edit))
#+end_src

*** Customize the ~occur~ buffer

#+begin_src emacs-lisp
(after! isearch
  (add-hook 'occur-mode-hook #'ceamx-truncate-lines-silently)

  (setopt list-matching-lines-jump-to-current-line nil)

  (keymap-set occur-mode-map "t" #'toggle-truncate-lines))
#+end_src

*** =visual-replace= :: a nicer ~query-replace~ interface
:PROPERTIES:
:ID:       cfb820fa-0418-44a0-bea6-53037da05af5
:END:

+ Repo :: <https://github.com/szermatt/visual-replace>

#+begin_src emacs-lisp
(package! visual-replace
  (visual-replace-global-mode)

  (define-keymap :keymap ceamx-replace-prefix
    "r" #'visual-replace-thing-at-point
    "R" #'visual-replace-selected)

  (after! isearch
    (keymap-set isearch-mode-map "M-%" #'visual-replace-from-isearch)))
#+end_src

*** =substitute= :: efficiently replace contextual targets

<https://protesilaos.com/emacs/substitute>

#+begin_src emacs-lisp
(package! substitute
  (define-keymap :keymap ceamx-replace-prefix
    "b" #'substitute-target-in-buffer
    "d" #'substitute-target-in-defun
    "s" #'substitute-target-above-point
    "S" #'substitute-target-below-point)

  (setopt substitute-hightlight t))

(after! substitute
  ;; Provide messages reporting on matches changed in the context.
  (add-hook 'substitute-post-replace-functions #'substitute-report-operation))
#+end_src

*** =wgrep= :: writable grep buffers
:PROPERTIES:
:ID:       db0ec455-df43-47da-9015-b22d48699027
:END:

+ Package :: <https://github.com/mhayashi1120/Emacs-wgrep>

#+begin_src emacs-lisp
(package! wgrep
  (after! wgrep
    (setopt wgrep-auto-save-buffer t))

  (after! grep-mode
    (keymap-set grep-mode-map "W" #'wgrep-change-to-wgrep-mode)))
#+end_src

*** TODO Use builtin ~grep-edit-mode~ instead of ~wgrep~ if available

*** Configure =re-builder=, the regular expression builder

<https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder>
<https://francismurillo.github.io/2017-03-30-Exploring-Emacs-rx-Macro/>

Unfortunately, ~re-builder~ itself is poorly-documented.

#+begin_src emacs-lisp
(use-feature! re-builder
  :config
  ;; "string" => recommended: \\(foo\\\|bar\\)
  ;; "rx"     => recommended; advanced sexp regexp engine
  ;; "read"   => default, avoid: backslash hell
  (setopt reb-re-syntax 'string))
#+end_src

*** Configure =xref=
:PROPERTIES:
:ID:       184ea61e-d07b-4af9-bb49-bcd539b38268
:END:

#+begin_src emacs-lisp
(defvar xref-ignored-files nil
  "List of files to be ignored by `xref'.")

(keymap-set ceamx-code-prefix "d" #'xref-find-definitions)

(after! xref
  (setopt xref-file-name-display 'project-relative)
  (setopt xref-prompt-for-identifier nil)
  (setopt xref-show-definitions-function #'xref-show-definitions-completing-read)
  (setopt xref-show-xrefs-function #'xref-show-definitions-buffer))
#+end_src

*** Provide the ~ceamx-init-search~ feature

#+begin_src emacs-lisp
(provide 'ceamx-init-search)
;;; ceamx-init-search.el ends here
#+end_src

** Dired, the Directory Editor :dired:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-dired.el
:VISIBILITY: folded
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-dired.el :comments no
;;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

*** General Dired customizations

#+begin_src emacs-lisp

(setopt delete-by-moving-to-trash t)
(setopt mouse-drag-and-drop-region-cross-program t)

(after! dired
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode)

  ;; cf. `dired-omit-files', `dired-omit-lines', `dired-omit-extensions'
  (add-hook 'dired-mode-hook #'dired-omit-mode)

  ;; -A => dotfiles without . and ..
  ;; -F => append special chars to special files
  ;; -G => omit group name
  ;; -h => human-readable file sizes
  ;; -l => long listing, required by dired
  ;; -v => sort files by version number, not lexicographic
  (setopt dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso")

  (setopt dired-auto-revert-buffer #'dired-directory-changed-p)
  (setopt dired-do-revert-buffer (##not (file-remote-p %)))

  ;; When there are multiple Dired panes open, automatically use the
  ;; other pane as target for some actions (e.g. copying, moving).
  (setopt dired-dwim-target t)
  (setopt dired-kill-when-opening-new-dired-buffer t)
  (setopt dired-vc-rename-file t)
  (setopt dired-clean-confirm-killing-deleted-buffers nil)
  (setopt dired-clean-up-buffers-too t)
  (setopt dired-create-destination-dirs 'ask
          dired-create-destination-dirs-on-trailing-dirsep t
          dired-recursive-deletes 'always
          dired-recursive-copies 'always
          dired-backup-overwrite 'always)
  (setopt dired-free-space nil)
  (setopt dired-make-directory-clickable t)
  (setopt dired-mouse-drag-files t)

  ;;
  ;; Keybindings

  (define-keymap :keymap dired-mode-map
    "C-+" #'dired-create-empty-file
    "C-RET" #'dired-do-open))
#+end_src

*** =dired-subtree= :: insert subdirs arboreally

#+begin_src emacs-lisp
(package! dired-subtree
  (after! dired
    (define-keymap :keymap dired-mode-map
      "<tab>" #'dired-subtree-toggle
      "TAB" #'dired-subtree-toggle
      "<backtab>" #'dired-subtree-remove
      "S-TAB" #'dired-subtree-remove)))

(after! dired-subtree
  (setopt dired-subtree-use-backgrounds nil))
#+end_src

*** Writable Dired buffers with the ~wdired~ feature
:PROPERTIES:
:ID:       13d23c1b-2e7a-4562-a01a-4d922d8e7317
:END:

#+begin_src emacs-lisp
(after! dired
  (keymap-set dired-mode-map "C-c C-e" #'wdired-change-to-wdired-mode))

(after! wdired
  (keymap-set wdired-mode-map "C-c C-k" #'wdired-change-to-dired-mode)

  (setopt wdired-create-parent-directories t)
  (setopt wdired-allow-to-change-permissions t))
#+end_src
*** Preview images in Dired with the ~image-dired~ feature

#+begin_src emacs-lisp
(after! dired
  (keymap-set dired-mode-map "C-c t i" #'image-dired))

(after! image-dired
  (keymap-set image-dired-thumbnail-mode-map "RET" #'image-dired-thumbnail-display-external)

  (setopt image-dired-thumbnail-storage 'standard)
  (setopt image-dired-external-viewer "xdg-open")
  (setopt image-dired-thumb-relief 2
          image-dired-thumbs-per-row 4))
#+end_src

*** =trashed= :: interact with operating system trash diredly

#+begin_src emacs-lisp
(package! trashed)
(after! trashed
  (setopt trashed-action-confirmer #'y-or-n-p)
  (setopt trashed-use-header-line t)
  (setopt trashed-sort-key '("Date deleted" . t))
  (setopt trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src

*** =diredfl= :: additional syntax highlighting in dired buffers

+ Package :: <https://github.com/purcell/diredfl>

#+begin_src emacs-lisp
(package! diredfl
  (add-hook 'ceamx-after-init-hook #'diredfl-global-mode)
  (after! diredfl
    (set-face-attribute 'diredfl-dir-name nil :bold t)))
#+end_src

*** =nerd-icons-dired= :: icons for list items :icons:

#+begin_src emacs-lisp
(package! nerd-icons-dired
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))
#+end_src

*** =dired-preview= :: a file previewer

+ Website :: <https://protesilaos.com/emacs/dired-preview>

#+begin_src emacs-lisp
(package! dired-preview
  (defer! 3
    (dired-preview-global-mode))
  (after! dired-preview
    (setopt dired-preview-delay 0.7)
    (setopt dired-preview-max-size (expt 2 20))
    (setopt dired-preview-ignored-extensions-regexp
            (concat "\\."
                    "\\(mkv\\|webm\\|mp4\\|mp3\\|ogg\\|m4a"
                    "\\|gz\\|zst\\|tar\\|xz\\|rar\\|zip"
                    "\\|iso\\|epub\\|pdf\\)"))

    (keymap-set dired-mode-map "C-c t p" #'dired-preview-mode)))
#+end_src

*** Provide the ~ceamx-init-dired~ feature

#+begin_src emacs-lisp :tangle lisp/ceamx-init-dired.el :comments no
(provide 'ceamx-init-dired)
;;; ceamx-init-dired.el ends here
#+end_src

** Completion :completion:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-completion.el
:VISIBILITY: folded
:END:

*** Requirements

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'ceamx-lib)
#+end_src

*** Minibuffer :minibuffer:
**** Baseline minibuffer settings
:PROPERTIES:
:ID:       2c5efde3-41fb-4154-bbc9-3921ad9a318b
:END:

#+begin_src emacs-lisp
(use-feature! minibuffer
  :hook ((ceamx-after-init . (minibuffer-depth-indicate-mode
                              minibuffer-electric-default-mode)))
  :config

  (setopt echo-keystrokes 0.25)
  (setopt savehist-save-minibuffer-history t)

  ;; Always resize mini-windows to fit their contents.
  (setopt resize-mini-windows t)
  ;; Hide commands in M-x which do not apply to the current mode.
  (setopt read-extended-command-predicate #'command-completion-default-include-p)

  (setopt minibuffer-prompt-properties
          '(read-only t
            cursor-intangible t         ; see `cursor-intangible-mode'
            face minibuffer-prompt))

  ;; TODO: isn't this handled somewhere else?  case-insensitive until
  ;; proven otherwise?
  ;; (setopt completion-ignore-case t
  ;;         read-buffer-completion-ignore-case t
  ;;         read-file-name-completion-ignore-case t)
  ;; (setq-default case-fold-search t)

  (setopt minibuffer-default-prompt-format " [%s]"))

(after! mb-depth
  (setopt enable-recursive-minibuffers t)
  ;; TODO: evaluate...
  (setopt read-minibuffer-restore-windows nil))
#+end_src

**** Add an indicator to the ~completing-read-multiple~ prompt
:PROPERTIES:
:ID:       6d74806b-359a-45e8-9090-b5b88640c900
:END:

#+begin_src emacs-lisp
;; Supported out of the box in Emacs 31 with `crm-prompt'.
(when (< emacs-major-version 31)
  (def-advice! ceamx-completion-crm-indicator-a (args)
    :filter-args #'completing-read-multiple
    "Add prompt indicator to `completing-read-multiple' for candidates ARGS.
We display [CRM<separator>], e.g., [CRM,] if the separator is a comma."
    (cons (format "[CRM%s] %s"
                  (string-replace "[ \t]*" "" crm-separator)
                  (car args))
          (cdr args))))
#+end_src

**** =vertico= :: [vert]ical [i]nteractive [co]mpletion
:PROPERTIES:
:ID:       4d5b4204-7e8e-4b11-87d1-5da6618f99ec
:END:

+ Package :: <https://github.com/minad/vertico>

#+begin_src emacs-lisp
(package! vertico
  (add-hook 'ceamx-after-init-hook #'vertico-mode)

  (setopt vertico-count 8
          vertico-cycle t
          vertico-resize t
          vertico-scroll-margin 0)

  (after! (vertico savehist)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
    (add-to-list 'savehist-additional-variables #'vertico-repeat-history))

  ;; Tidy shadowed file names -- e.g. cleans `~/foo/bar///' to `/', and `~/foo/bar/~/' to `~/'.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

(after! vertico
  (define-keymap :keymap vertico-map
    "RET" #'vertico-directory-enter
    "DEL" #'vertico-directory-delete-char
    "M-DEL" #'vertico-directory-delete-word
    "M-q" #'vertico-quick-insert
    "C-j" #'vertico-insert
    "C-q" #'vertico-quick-exit))

(use-feature! ceamx-completion
  :after vertico
  :bind ( :map vertico-map
          ("TAB" . ceamx/vertico-partial-insert)
          ("C-j" . vertico-insert)))
#+end_src

Fine-tune Vertico appearance per-command or per-category with
~vertico-multiform~:

#+begin_src emacs-lisp
(after! vertico
  ;; NOTE: Takes precedence over `vertico-multiform-categories'.
  (setopt vertico-multiform-commands
          `((consult-line buffer)
           (consult-imenu buffer)
           (consult-org-heading ,(lambda (_) (text-scale-set -1)))))

  (setopt vertico-multiform-categories
          '((buffer flat (vertico-cycle . t))
            (consult-grep buffer)
            (imenu (:not indexed mouse))
            (symbol (vertico-sort-function . vertico-sort-alpha))))

  (vertico-multiform-mode))

(after! vertico-multiform
  (keymap-set vertico-multiform-map "C-l" #'vertico-multiform-vertical))
#+end_src

**** =marginalia= :: minibuffer completion annotations

+ Package :: <https://github.com/minad/marginalia>

#+begin_src emacs-lisp
(package! marginalia
  (keymap-set minibuffer-local-map "M-a" #'marginalia-cycle)

  (marginalia-mode 1))

(after! marginalia
  (setopt marginalia-align 'right
          marginalia-align-offset 0))
#+end_src

**** =nerd-icons-completion= :: icons for minibuffer completions :icons:

#+begin_src emacs-lisp
(package! nerd-icons-completion
  (after! marginalia
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)))
#+end_src

**** =consult= :: [consult]ing ~completing-read~
:PROPERTIES:
:ID:       2eff5461-19e2-49a8-9c43-17b2dd6d76f7
:END:

- website :: <https://github.com/minad/consult>
- ref :: <https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html>

#+begin_src emacs-lisp
(package! consult
  (keymap-global-set "C-c B" #'consult-bookmark)
  (keymap-global-set "C-c h" #'consult-history)
  (keymap-global-set "C-c k" #'consult-kmacro)
  (keymap-global-set "C-c q a t" #'consult-theme)

  ;; Improve previews for `consult-register' and other register commands
  (setopt register-preview-delay 0.5)
  (setopt register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Display xref locations with previews
  (setopt xref-show-definitions-function #'consult-xref)
  (setopt xref-show-xrefs-function #'consult-xref))

(after! consult
  (require 'consult-imenu)

  (setopt consult-narrow-key "<")       ; alternative: "C-+"
  (setopt consult-line-numbers-widen t)
  (setopt consult-async-min-input 3
          consult-async-input-debounce 0.5
          consult-async-input-throttle 0.8)

  (after! pulsar
    (setq consult-after-jump-hook nil)
    (dolist (fn '(pulsar-recenter-top pulsar-reveal-entry))
      (add-hook 'consult-after-jump-hook fn))))
#+end_src

Refine preview appearance and behavior:

#+begin_src emacs-lisp
(after! consult
  (setopt consult-preview-key 'any)

  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)

   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any)))
#+end_src

**** Search pre-defined sets of Info pages with ~consult-info~

#+begin_src emacs-lisp
(define-prefix-command 'ceamx-info-prefix 'ceamx-info-prefix-map)

(keymap-global-set "C-h i" (cons "[info]" #'ceamx-info-prefix))

(use-feature! ceamx-completion
  :after consult
  :commands (ceamx/consult-info-dwim
             ceamx/completion-info
             ceamx/emacs-info
             ceamx/org-info)
  :init
  (define-keymap :keymap help-map
    "i i" #'ceamx/consult-info-dwim
    "i c" #'ceamx/completion-info
    "i e" #'ceamx/emacs-info
    "i o" #'ceamx/org-info))
#+end_src

***** Define keybindings for ~consult~ and its extensions :keybinds:

#+begin_src emacs-lisp
(define-keymap :keymap (current-global-map)
  "C-c M-x" #'consult-mode-command

  "<remap> <Info-search>" #'consult-info

  "C-x M-:" #'consult-complex-command ; orig. `repeat-complex-command'

  ;; "C-x b" #'consult-buffer              ; orig. `switch-to-buffer'

  "C-x 4 b" #'consult-buffer-other-window ; orig. `switch-to-buffer-other-window'
  "C-x 5 b" #'consult-buffer-other-frame ; orig. `switch-to-buffer-other-frame'
  "C-x t b" #'consult-buffer-other-tab ; orig. `switch-to-buffer-other-tab'
  "C-x r b" #'consult-bookmark         ; orig. `bookmark-jump'
  "C-x p b" #'consult-project-buffer ; orig. `project-switch-to-buffer'

  ;; [C-h] bindings (`help-map')
  "C-h I" #'consult-info               ; orig. `describe-input-method'

  ;; Custom M-# bindings for fast register access
  "M-#"    #'consult-register-load
  "M-'"    #'consult-register-store ; orig. `abbrev-prefix-mark' (unrelated)
  "C-M-#"  #'consult-register

  ;; TODO: reconcile with current binding for `forward-symbol'
  ;; "M-F" #'consult-focus-lines
  "M-K" #'consult-keep-lines
  "M-y" #'consult-yank-pop              ; orig. `yank-pop'

  ;; M-g bindings (`goto-map')
  "M-g e"  #'consult-compile-error
  "M-g f"  #'consult-flymake            ; or: `consult-flycheck'
  "M-g g"  #'consult-goto-line          ; orig. `goto-line'
  "M-g M-g" #'consult-goto-line         ; orig. `goto-line'
  "M-g o"  #'consult-outline            ; or: `consult-org-heading'
  "M-g m"  #'consult-mark
  "M-g k"  #'consult-global-mark
  "M-g i"  #'consult-imenu
  "M-g I"  #'consult-imenu-multi

  ;; M-s bindings (`search-map')
  "M-s d"  #'consult-fd                 ; or `consult-find'
  "M-s c"  #'consult-locate
  "M-s e"  #'consult-isearch-history
  "M-s g"  #'consult-ripgrep
  "M-s G"  #'consult-git-grep
  "M-s k"  #'consult-keep-lines
  "M-s l"  #'consult-line
  "M-s L"  #'consult-line-multi
  "M-s u"  #'consult-focus-lines
  "M-s M-s" #'consult-outline)

(after! isearch
  (define-keymap :keymap isearch-mode-map
    "M-e"   #'consult-isearch-history   ; orig. `isearch-edit-string'
    "M-s e" #'consult-isearch-history   ; orig. `isearch-edit-string'
    "M-s l" #'consult-line              ; needed by `consult-line' to detect `isearch'
    "M-s L" #'consult-line-multi        ; needed by `consult-line' to detect `isearch'
    ))

(keymap-set minibuffer-local-map "M-s" #'consult-history) ; orig. `next-matching-history-element'
(keymap-set minibuffer-local-map "M-r" #'consult-history) ; orig. `previous-matching-history-element'

(after! consult
  ;; Make narrowing help available in the minibuffer.
  (define-keymap :keymap consult-narrow-map
    "?" #'consult-narrow-help)
  (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'embark-prefix-help-command))
#+end_src

*** Completion styles

**** =orderless= :: completion-matching multiple regular expressions :search:

+ Package :: <https://github.com/oantolin/orderless>

#+begin_src emacs-lisp
(package! orderless
  (require 'orderless)

  (setopt orderless-matching-styles
          '(orderless-prefixes
            orderless-regexp))

  (setopt orderless-component-separator #'orderless-escapable-split-on-space)
  ;; spaces & dash & slash & underscore
  ;; (setopt orderless-component-separator " +\\|[-/_]")

  ;; [SPC] should never trigger a completion.
  (keymap-set minibuffer-local-completion-map "SPC" nil)
  ;; [?] should not interfere with regexp symbols
  (keymap-set minibuffer-local-completion-map "?" nil))
#+end_src

**** Define custom completion styles
***** ~+orderless-fast-dispatch~

- source :: <https://github.com/minad/corfu/blob/main/README.org#auto-completion>

#+begin_src emacs-lisp
(defun +orderless-fast-dispatch (word index total)
  "Fast-dispatch `orderless' completion style for `corfu'."
  (and (= index 0) (= total 1) (length< word 4)
       (cons 'orderless-literal-prefix word)))
#+end_src

#+begin_src emacs-lisp
(after! orderless
  (orderless-define-completion-style +orderless-fast
    "Fast completion style, intended for usage with `corfu'."
    (orderless-style-dispatchers '(+orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp))))
#+end_src

***** ~+orderless-with-initialism~

#+begin_src emacs-lisp
(after! orderless
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism
                                 orderless-literal
                                 orderless-regexp))))
#+end_src

**** Configure preferred completion styles
:PROPERTIES:
:ID:       1c08e88d-5386-4929-bac7-9e679dfbc6e6
:END:

#+begin_src emacs-lisp
;; Make `partial-completion' behave like `substring'.
(setopt completion-pcm-leading-wildcard t)

(after! orderless
  ;; Reset per-category defaults to force the use of the standard
  ;; `completion-styles'.  Customizations can be specified in
  ;; `completion-category-overrides'.
  (setq completion-category-defaults nil)
  (setopt completion-styles '(orderless basic))
  (setopt completion-category-overrides
          '((file (styles partial-completion orderless))
            (bookmark (styles basic substring))
            (library (styles basic substring))
            (imenu (styles orderless substring basic))
            (kill-ring (styles emacs22 orderless))
            ;; enable initialism by default for symbols
            (command (styles +orderless-with-initialism))
            (variable (styles +orderless-with-initialism))
            (symbol (styles +orderless-with-initialism)))))

(after! (consult orderless)
  (add-to-list 'completion-category-overrides
      '(consult-location (styles basic substring orderless))))

(after! eglot
  (add-to-list 'completion-category-overrides '(eglot (styles orderless)))
  ;; FIXME: who provides `eglot-capf'?
  (add-to-list 'completion-category-overrides '(eglot-capf (styles orderless))))

(after! embark
  (add-to-list 'completion-category-overrides
      '(embark-keybinding (styles basic substring))))

(after! (orderless consult)
  (require 'ceamx-completion)

  (setopt orderless-style-dispatchers
          '(ceamx-completion-orderless-consult-dispatch
            orderless-affix-dispatch)))
#+end_src

*** Template/snippet expansion

**** Dynamic text expansion with ~dabbrev~

#+begin_src emacs-lisp
(after! dabbrev
  ;; (setopt dabbrev-abbrev-char-regexp "\\sw\\|\\s_"
  ;;         dabbrev-abbrev-skip-leading-regexp "[$*/=~']")
  (setopt dabbrev-backward-only nil)
  (setopt dabbrev-case-distinction 'case-replace
          dabbrev-case-fold-search nil
          dabbrev-upcase-means-case-search t)
  (setopt dabbrev-check-other-buffers t)
  (setopt dabbrev-eliminate-newlines t)
  (setopt dabbrev-ignored-buffer-regexps '("\\` ")
          dabbrev-ignored-buffer-modes '( archive-mode doc-view-mode image-mode
                                          pdf-view-mode tags-table-mode)))
#+end_src

**** Static text expansion with ~abbrev~

#+begin_src emacs-lisp
(use-feature! abbrev
  :hook ((text-mode prog-mode git-commit-mode) . abbrev-mode)

  :config
  (setopt only-global-abbrevs nil)
  (setopt abbrev-suggest t)

  ;; Our abbrevs are defined in configuration, no need to save elsewhere
  ;; (remove-hook 'save-some-buffers-functions #'abbrev--possibly-save)

  ;; Because the *scratch* buffer is produced before we load this, we
  ;; have to explicitly activate the mode there.
  (when-let* ((scratch (get-buffer "*scratch*")))
    (with-current-buffer scratch
      (abbrev-mode 1))))
#+end_src

Define the custom abbrevs:

#+begin_src emacs-lisp
(abbrevs! text-mode-abbrev-table
  "javascript"		"JavaScript"
  "typescript"		"TypeScript"
  "wordpress"		"WordPress"
  "youtube"		"YouTube")
#+end_src

***** DISABLED Allow abbrevs with a prefix colon, semicolon, or underscore

Disabled to test interference with other completion-at-point behavior wired
together through [[*Completion-At-Point Extensions (Cape)]].

- Source :: <https://github.com/protesilaos/dotfiles/blob/8fc72724cd6debd12c8258bf64adf6822a0bc90c/emacs/.emacs.d/prot-emacs-modules/prot-emacs-completion.el#L215-L225>
- Background :: <https://protesilaos.com/codelog/2024-02-03-emacs-abbrev-mode/>

Adapted from Prot's original version with the following changes:

- Converted the duplicated regexp string into an ~rx~ form via the ~xr~ utility.
- Abstracted the regexp to a variable ~ceamx-abbrev-prefix-regexp~ for reuse
  across =abbrev-table= contexts.

#+begin_src emacs-lisp
(defconst ceamx-abbrev-prefix-regexp "\\(?:^\\|[\t\s]+\\)\\(?1:[:_].*\\|.*\\)")

(after! abbrev
  (abbrev-table-put global-abbrev-table :regexp ceamx-abbrev-prefix-regexp)
  (after! text-mode
    (abbrev-table-put text-mode-abbrev-table :regexp ceamx-abbrev-prefix-regexp))
  (after! org
    (abbrev-table-put org-mode-abbrev-table :regexp ceamx-abbrev-prefix-regexp)))
#+end_src

**** =tempel= :: simple template expansions

+ Package :: <https://github.com/minad/tempel>
+ Package :: <https://github.com/Crandel/tempel-collection>

***** The Tempo skeleton language

- info :: [[info:autotype#Skeleton Language][(autotype) Skeleton Language]]
- Source :: [[https://github.com/minad/tempel/blob/main/README.org#template-syntax][tempel/README.org at main · minad/tempel · GitHub]]

All the Tempo syntax elements are fully supported.  The syntax
elements are described in detail in the docstring of
~tempo-define-template~ in tempo.el.  We document the important ones
here:

- “string” Inserts a string literal.
- =p=  Inserts an unnamed placeholder field.
- =n=  Inserts a newline.
- =>= Indents with ~indent-according-to-mode~ .
- =r=  Inserts the current region. If no region is active, quits the containing template when jumped to.
- =r>= Acts like =r= , but indent region.
- =n>=  Inserts a newline and indents.
- =&=  Insert newline unless there is only whitespace between line start and point.
- =%=  Insert newline unless there is only whitespace between point and line end.
- =o= Like =%=  but leaves the point before newline.
- =(s NAME)=  Inserts a named field.
- =(p PROMPT <NAME> <NOINSERT>)= Insert an optionally named field with a prompt. The =PROMPT= is displayed directly in the buffer as default value. If =NOINSERT= is non-nil, no field is inserted. Then the minibuffer is used for prompting and the value is bound to =NAME= .
- =(r PROMPT <NAME> <NOINSERT>)= Insert region or act like =(p ...)= .
- =(r> PROMPT <NAME> <NOINSERT>)= Act like =(r ...)= , but indent region.

Furthermore Tempel supports syntax extensions:

- =(p FORM <NAME> <NOINSERT>)= Like =p= described above, but =FORM=  is evaluated.
- =(FORM ...)=  Other Lisp forms are evaluated. Named fields are lexically bound.
- =q=  Quits the containing template when jumped to.

***** Custom syntax elements

- =(i keyword)= :: Recursive snippet inclusion.  =keyword= is the keyword
  for the snippet to insert.  See ~ceamx-completion--tempel-include~ for
  definition.

***** Configuration
:PROPERTIES:
:ID:       0e76df71-649d-496a-b10c-86a3361c5c1e
:END:

  #+begin_src emacs-lisp
(package! tempel
  (define-keymap :keymap (current-global-map)
    "C-c y" #'tempel-insert

    "M-+" #'tempel-complete
    "M-*" #'tempel-insert)

  ;; Setup completion at point for Tempel templates.
  (def-hook! +tempel-setup-capf-h ()
    '(conf-mode-hook prog-mode-hook text-mode-hook)
    "Add the Tempel Capf to `completion-at-point-functions'.

`tempel-expand' only triggers on exact matches.  Alternatively
use `tempel-complete' if you want to see all matches, but then
you should also configure `tempel-trigger-prefix', such that
Tempel does not trigger too often when you don't expect it."
    (add-hook 'completion-at-point-functions #'tempel-complete -90 t)))

(after! tempel
  (setopt tempel-path (file-name-concat ceamx-templates-dir "tempel/*.eld"))

  ;; Require this prefix before triggering template name completion.
  (setopt tempel-trigger-prefix "<")

  (define-keymap :keymap tempel-map
    ;; "<tab>" #'tempel-next
    ;; "<backtab>" #'tempel-previous
    "M-}" #'tempel-next
    "M-{" #'tempel-previous))

(use-feature! ceamx-completion
  :after tempel
  :functions (ceamx-completion--tempel-include)
  :init
  (add-to-list 'tempel-user-elements #'ceamx-completion--tempel-include))
#+end_src

***** A warning about using Tempel with ~abbrev-mode~

Avoid using the ~global-tempel-abbrev-mode~ integration, which makes
Emacs unusable when ~abbrev-mode~ is enabled.  Cea are better off
relying on either 1) invoking Tempel commands manually 2) adding a
Tempel command to ~completion-at-point-functions~, or 3) disabling
~abbrev-mode~ entirely.

See the extensive discussion about the Tempel+Abbrev integration here:

[[https://github.com/minad/tempel/issues/112][Potential considerations for using Tempel with abbrevs · Issue #112 · minad/tempel · GitHub]]

**** DISABLED ~yasnippet~ :: robust template expansions

- Documentation :: <https://github.com/joaotavora/yasnippet/blob/master/README.mdown>

#+begin_src emacs-lisp :tangle no
(package! yasnippet
  (keymap-set ceamx-insert-prefix "s" #'yas-insert-snippet)

  (defer! 3
    (yas-global-mode 1)))

(after! yasnippet
  (setopt yas-snippet-dirs
          (list (file-name-concat ceamx-templates-dir "yasnippet")))
  (setopt yas-prompt-functions '(yas-completing-prompt
                                 yas-no-prompt))

  ;; Insanely helpful when =key= is sensible, but insanely annoying
  ;; if not.  Unless there is an available snippet expansion, the
  ;; key will still call ~self-insert-command~ as usual.  Note that
  ;; `yas-maybe-expand' is indeed a variable, not a function.
  ;; (keymap-set yas-minor-mode-map "SPC" yas-maybe-expand)
  ;; (keymap-set yas-minor-mode-map "RET" yas-maybe-expand)
  )
#+end_src

Disable automatic whitespace modifications in snippet files:

<https://joaotavora.github.io/yasnippet/faq.html#org64f1b8c>

#+begin_quote
If there is a newline at the end of a snippet definition file, YASnippet will
add a newline when expanding that snippet. When editing or saving a snippet
file, please be careful not to accidentally add a terminal newline.
#+end_quote

#+begin_src emacs-lisp :tangle no
(defun +yasnippet-snippet-mode-disable-final-newline-h ()
  "Prevent appendage of a final newline in `snippet-mode' files.
A final newline would be inserted literally into the snippet expansion."
  (setq-local require-final-newline nil))

(add-hook 'snippet-mode-hook #'+yasnippet-snippet-mode-disable-final-newline-h nil t)
#+end_src

**** =spdx= :: insertable SPDX license headers
:PROPERTIES:
:ID:       4f029a65-d064-4715-9947-e9d32b4bdf67
:END:

- src :: <https://github.com/condy0919/spdx.el>

  #+begin_src emacs-lisp
(package! spdx
  (keymap-set ceamx-insert-prefix "L" #'spdx-insert-spdx))
#+end_src

*** Completion-At-Point

**** =corfu= :: [co]mpletion in [r]egion [fu]nction
:PROPERTIES:
:ID:       d8073181-6d05-40d2-a954-0e6bb65449a2
:END:

+ Package :: <https://github.com/minad/corfu>
+ Reference :: <https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html>

#+begin_src emacs-lisp
(package! corfu
  (defer! 5 (require 'corfu))

  (add-hook 'ceamx-after-init-hook #'global-corfu-mode))

(after! corfu
  (setopt corfu-count 12
          corfu-cycle t
          ;; corfu-max-width 80
          corfu-min-width 20
          corfu-scroll-margin 0)
  ;; cf. `orderless-component-separator'
  (setopt corfu-separator ?_)
  (setopt corfu-on-exact-match 'insert
          corfu-preselect 'first
          corfu-quit-at-boundary 'separator
          corfu-quit-no-match t)
  (setopt corfu-echo-delay '(0.3 . 0.3))
  (setopt corfu-popupinfo-delay '(1.25 . 0.5))
  (setopt corfu-auto t
          ;; corfu-auto-delay 0.3
          corfu-auto-delay 1.3
          corfu-auto-prefix 3)

  ;; Setting this here again for good measure, just in case it is
  ;; changed elsewhere.
  (setopt tab-always-indent 'complete)

  ;; Prevent excessive completion-spamming.
  ;; Without this, on Emacs 30.0, typing causes constant `corfu' errors.
  ;; <https://github.com/minad/corfu/discussions/457>
  (setopt text-mode-ispell-word-completion nil)

  (define-keymap :keymap corfu-map
     "M-SPC" #'corfu-insert-separator
     "M-a" #'corfu-reset
     "RET" #'corfu-complete
     "<tab>" #'corfu-next
     "<backtab>" #'corfu-previous
     "<escape>" #'corfu-reset)

  ;; (when (eq 'complete tab-always-indent)
  ;;   (keymap-set corfu-map "TAB" #'corfu-complete))

  (corfu-popupinfo-mode 1)
  (corfu-echo-mode -1)

  ;; Sort candidates by input history.
  (after! savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

**** =corfu-terminal= :: Corfu terminal support

+ Package :: <https://codeberg.org/akib/emacs-corfu-terminal>

Corfu-endorsed solution to making it usable in terminal.

See also ~popon~, the utility library powering the interface.

#+begin_src emacs-lisp
(package! corfu-terminal
  (after! (corfu)
    (unless (display-graphic-p)
      (corfu-terminal-mode 1))))
#+end_src

**** =kind-icon= :: icons for ~completion-at-point~ candidates :icons:

+ Package :: <https://github.com/jdtsmith/kind-icon>

#+begin_src emacs-lisp
(package! kind-icon
  (require 'kind-icon)

  (setopt kind-icon-use-icons (display-graphic-p))
  (setopt kind-icon-blend-background t)

  (after! corfu
    (setopt kind-icon-default-face 'corfu-default)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))

(after! kind-icon
  ;; Reduce the icon size slightly.  If you change this value, make
  ;; sure to call `kind-icon-reset-cache' afterwards, otherwise the
  ;; icon size will likely not be accurate:
  (plist-put kind-icon-default-style :height 0.9)

  ;; Update icon appearance after enabling a theme.
  ;; <https://github.com/jdtsmith/kind-icon/issues/34#issuecomment-1668560185>
  (add-hook 'ceamx-after-enable-theme-hook #'kind-icon-reset-cache))
#+end_src

**** =cape= :: [c]ompletion-[a]t-[p]oint [e]xtensions :capfs:
:PROPERTIES:
:ID:       e7028330-f02c-4862-ac3a-054f70fb9e92
:END:

#+begin_src emacs-lisp
(package! cape
  ;; Add to the global default value of
  ;; `completion-at-point-functions' which is used by
  ;; `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  We use `add-hook' due to
  ;; its ability to specify priority values affecting order.  Note
  ;; that the list of buffer-local completion functions takes
  ;; precedence over the global list.
  (add-hook 'completion-at-point-functions #'cape-abbrev)
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  (add-hook 'completion-at-point-functions #'cape-history)

  (add-to-list 'completion-category-overrides
               '((cape-dict (styles (basic)))))

  (after! eglot
    ;; NOTE: This may cause a significant performance hit.  Consider
    ;; enabling per-language-server.
    ;; <https://github.com/minad/corfu/wiki#continuously-update-the-candidates>
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))

  (keymap-set ceamx-insert-prefix "E" #'cape-emoji)

  ;; cf. `cape-prefix-map' for ideas
  (define-keymap :keymap ceamx-completion-prefix-map
    "p" #'completion-at-point

    "a" #'cape-abbrev
    "d" #'cape-dabbrev
    "e" (cape-capf-interactive #'elisp-completion-at-point)
    "f" #'cape-file
    "o" #'cape-elisp-symbol
    "w" #'cape-dict))
#+end_src

*** =embark= :: [e]macs [m]ini-[b]uffer [a]ctions [r]ooted in [k]eymaps :embark:

- Package :: <https://github.com/oantolin/embark>

#+begin_src emacs-lisp
(package! embark
  ;; Embark is a heavy package.  Load in the background to avoid
  ;; delays upon invoking autoloaded commands.
  (defer! 1
    (require 'embark))

  ;; NOTE: This key might be bound to emoji input in GNOME Desktop.
  ;; However, I have not encountered a conflict on GNOME, so I must be
  ;; doing something conveniently correct in my GNOME configurations.
  ;; FWIW, I have enabled the Emacs-style keybindings there.
  (keymap-global-set "C-." #'embark-act)

  ;; The result of calling `embark-dwim' on a symbol still ends up
  ;; calling `xref-find-definitions' as the default do-what-i-mean
  ;; action.
  (keymap-global-set "M-." #'embark-dwim) ; orig. `xref-find-definitions'

  (keymap-global-set "C-h b" #'embark-bindings) ; orig: `describe-bindings'
  (keymap-global-set "C-h B" #'describe-bindings)

  (unless (bound-and-true-p which-key-mode)
    (setopt prefix-help-command #'embark-prefix-help-command)))

(after! embark
  (setopt embark-indicators '(;; embark--vertico-indicator
                              ;; embark-mixed-indicator
                              embark-minimal-indicator
                              embark-highlight-indicator
                              embark-isearch-highlight-indicator))
  (setopt embark-mixed-indicator-delay 2.0)

  ;; This setting only affects the behavior of `embark-act' inside the
  ;; minibuffer.  You can reverse the configured behavior at any time
  ;; by calling `embark-act' with a "C-u" prefix argument.
  ;;
  ;; For finer control, e.g.: `((kill-buffer . t) (t . nil))'
  (setopt embark-quit-after-action nil)

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
      '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
        nil
        (window-parameters (mode-line-format . none)))))

(after! vertico
  (add-to-list 'vertico-multiform-categories '(embark-keybinding grid)))

(package! embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

Define Embark actions for acting on tabs:

#+begin_src emacs-lisp
(after! embark
  (defvar-keymap ceamx-embark-tab-actions
    :doc "Keymap for Embark actions for `tab-bar' tabs (when mentioned by name)."
    :parent embark-general-map

    "s" #'tab-bar-select-tab-by-name
    "d" #'tab-bar-close-tab-by-name
    "R" #'tab-bar-rename-tab-by-name)

  (add-to-list 'embark-keymap-alist '(tab . ceamx-embark-tab-actions))

  (push #'embark--confirm
        (alist-get 'tab-bar-close-tab-by-name
                   embark-pre-action-hooks)))
#+end_src

*** Add command to export completion candidates to a writable buffer :embark:

#+begin_src emacs-lisp
(use-feature! ceamx-completion
  :after minibuffer
  :commands (ceamx-completion/embark-export-write)
  :init
  (keymap-set minibuffer-local-map "C-c C-e" #'ceamx-completion/embark-export-write))
#+end_src
*** Provide feature ~ceamx-init-completion~

#+begin_src emacs-lisp
(provide 'ceamx-init-completion)
;;; ceamx-init-completion.el ends here
#+end_src

** Window & Buffer Management :window:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-window.el
:VISIBILITY: folded
:ID:       ab94f305-4394-4882-aa40-55251f8c7379
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-window.el :comments no
;; -*- lexical-binding: t; -*-

(require 'ceamx-simple)
(require 'ceamx-window)
#+end_src

*** General customizations
:PROPERTIES:
:ID:       3edd2008-b6f1-4de2-b0fe-388775c61d93
:END:

#+begin_src emacs-lisp
(define-keymap :keymap (current-global-map)
  "C-x =" #'balance-windows
  "C-x +" #'balance-windows-area
  "C-x C-n" #'next-buffer
  "C-x C-p" #'previous-buffer
  ;; TODO: consider sub-mirroring window manager bindings
  "C-x <up>" #'enlarge-window           ; also: C-x ^
  "C-x <down>" #'shrink-window
  "C-x <left>" #'shrink-window-horizontally
  "C-x <right>" #'enlarge-window-horizontally)

(use-feature! ceamx-window
  :bind ("C-x o" . #'ceamx/other-window))
#+end_src

*** Buffer display
**** Configure window behavior for help buffers

#+begin_src emacs-lisp
;; Focus newly-opened help windows.
(setopt help-window-select t)

;; Also focus newly-opened manpages, which still do not follow `display-buffer'
;; rules (as of <2024-03-06>).
(setopt Man-notify-method 'aggressive)
#+end_src

**** Disambiguate/uniquify buffer names

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  (setopt uniquify-buffer-name-style 'forward)
  (setopt uniquify-separator "/")

  ;; Rename after killing uniquified buffer.
  (setopt uniquify-after-kill-buffer-p t)

  ;; Don't muck with special buffers.
  (setopt uniquify-ignore-buffers-re "^\\*"))
#+end_src

**** General buffer display settings :frame:display_buffer:

#+begin_src emacs-lisp
(setopt switch-to-buffer-in-dedicated-window 'pop)

;; Ensure interactive buffer switching behaves according to expectations.
(setopt switch-to-buffer-obey-display-actions t)

;; Hide buffer until there's output.
;; Prevents an extra window appearing during init.
(setopt async-shell-command-display-buffer nil)

;; TODO: causes which-key squishing against tiny window maybe?
(setopt fit-window-to-buffer-horizontally t)

;; TODO: this might be a solution to issues with childframes for embark etc.
(setopt fit-frame-to-buffer t)

;; (setopt even-window-sizes nil)
(setopt even-window-sizes 'height-only)
(setopt window-combination-resize t)
(setopt window-sides-vertical nil)
(setopt window-resize-pixelwise t)

(setopt display-buffer-base-action
        '((display-buffer-reuse-window
           display-buffer-in-previous-window)))
#+end_src

**** Declare rules for displaying buffers with ~display-buffer-alist~ :display_buffer:

- Source :: <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>

<karthink> has a helpful summary of ~display-buffer~ action functions and
alist entries in their Emacs configuration, which I am also including here
for my own reference. Note that this list is not necessarily complete.

~display-buffer-action-functions~ are:

- ~display-buffer-same-window~ :: Use the selected window
- ~display-buffer-reuse-window~ :: Use a window already showing the buffer
- ~display-buffer-reuse-mode-window~ :: Use a window with the same major-mode
- ~display-buffer-in-previous-window~ :: Use a window that did show the buffer before
- ~display-buffer-use-some-window~ :: Use some existing window
- ~display-buffer-pop-up-window~ :: Pop up a new window
- ~display-buffer-below-selected~ :: Use or pop up a window below the selected one
- ~display-buffer-at-bottom~ :: Use or pop up a window at the bottom of the selected frame
- ~display-buffer-pop-up-frame~ :: Show the buffer on a new frame
- ~display-buffer-in-child-frame~ :: Show the buffer in a child frame
- ~display-buffer-no-window~ :: Do not display the buffer and have ~display-buffer~ return nil immediately

Action alist entries are:

- ~inhibit-same-window~ :: A non-nil value prevents the sam
    window from being used for display
- ~inhibit-switch-frame~ :: A non-nil value prevents any fram
    used for showing the buffer from being raised or selected
- ~reusable-frames~ :: The value specifies the set of frames t
    search for a window that already displays the buffer.
    Possible values are nil (the selected frame), t (any live
    frame), visible (any visible frame), 0 (any visible or
    iconified frame) or an existing live frame.
- ~pop-up-frame-parameters~ :: The value specifies an alist o
    frame parameters to give a new frame, if one is created.
- ~window-height~ :: The value specifies the desired height of th
    window chosen and is either an integer (the total height of
    the window), a floating point number (the fraction of its
    total height with respect to the total height of the frame's
    root window) or a function to be called with one argument -
    the chosen window.  The function is supposed to adjust the
    height of the window; its return value is ignored.  Suitable
    functions are ~shrink-window-if-larger-than-buffer~ and
    ~fit-window-to-buffer~.
- ~window-width~ :: The value specifies the desired width of th
    window chosen and is either an integer (the total width of
    the window), a floating point number (the fraction of its
    total width with respect to the width of the frame's root
    window) or a function to be called with one argument - the
    chosen window.  The function is supposed to adjust the width
    of the window; its return value is ignored.
- ~preserve-size~ :: The value should be either (t . nil) t
    preserve the width of the chosen window, (nil . t) to
    preserve its height or (t . t) to preserve its height and
    width in future changes of the window configuration.
- ~window-parameters~ :: The value specifies an alist of windo
    parameters to give the chosen window.
- ~allow-no-window~ :: A non-nil value means that `display-buffer
    may not display the buffer and return nil immediately.


    <https://github.com/karthink/.emacs.d/blob/6aa2e034ce641af60c317697de786bedc2f43a71/lisp/setup-windows.el>


    #+begin_src emacs-lisp
(setopt display-buffer-alist
        `(
          ;; (,(rx "*" (or "Agenda Commands" "Org Select") "*")
          ;;   (display-buffer-below-selected
          ;;     display-buffer-in-side-window)
          ;;   (body-function . select-window)
          ;;   (window-parameters . ((mode-line-format . nil))))

          (,ceamx-simple-checkers-buffer-names-regexp
           (display-buffer-in-direction
            display-buffer-in-side-window)
           (window-parameters . ((no-other-window . t))))

          ;; TODO: is there not a simpler way than using `ceamx-simple-buffer-which-mode'?
          ;; e.g. `derived-mode-p' or similar
          ((lambda (buf act) (member (ceamx-simple-buffer-which-mode buf) ceamx-simple-message-modes-list))
           (display-buffer-at-bottom
            display-buffer-in-side-window))

          (,(rx "*" (group (or "Compile-Log" "Messages" "Warnings")) "*")
           (display-buffer-at-bottom
            display-buffer-in-side-window
            display-buffer-in-direction))

          (,(rx "*Backtrace*")
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . bottom))))
    #+end_src

**** =popper= :: Summon and dismiss "popup" windows :popup:
:PROPERTIES:
:ID:       22ada524-f8e6-4f97-b745-5e00219c1be4
:END:

- Website :: <https://github.com/karthink/popper>

#+begin_src emacs-lisp
(package! popper
  (define-keymap :keymap (current-global-map)
    "C-`" #'popper-toggle
    "C-~" #'popper-cycle
    "C-M-`" #'popper-toggle-type)

  (setopt popper-reference-buffers
          (append
           ceamx-simple-help-modes-list
           ceamx-simple-help-buffer-names-list
           ceamx-simple-manual-modes-list
           ceamx-simple-repl-modes-list
           ceamx-simple-repl-buffer-names-list
           ceamx-simple-grep-modes-list
           '(+popper-current-buffer-popup-p)
           '(;; Custom-mode
             compilation-mode
             epa-info-mode
             messages-buffer-mode)
           (list
            ceamx-simple-checkers-buffer-names-regexp)

           `(,(rx "Output*" eol)
             ,(rx "*" (or
                       "Async-native-compile-log"
                       "Backtrace"
                       "Compile-Log"
                       "Completions"
                       "compilation"
                       "elpaca-diff"
                       "Error"
                       "Messages"
                       "Shell Command Output"
                       "vc"
                       "Warnings")
               "*")
             "^\\*Embark Export"
             "^Calc:"
             "\\*Async Shell Command\\*"
             ;; ("\\*Async Shell Command\\*" . hide)
             ("\\*Detached Shell Command\\*" . hide))))

  ;; Load as early as possible to catch popups as early as possible.
  (popper-mode)
  (popper-echo-mode))
#+end_src

***** Configure overrides in ~popper-repeat-map~

#+begin_src emacs-lisp
(after! popper
  (defvar-keymap popper-repeat-map
    :repeat t
    "`" #'popper-cycle
    "~" #'popper-cycle-backwards))
#+end_src

***** DISABLED Configure popup display control rules manually
:PROPERTIES:
:header-args: :tangle no
:END:

<https://github.com/karthink/popper/blob/master/README.org#popup-placement-controlled-using-display-buffer-alist-or-shackleel>

#+begin_src emacs-lisp
(after! popper
  (setopt popper-display-control nil)

  (prependopt! display-buffer-alist
               '((popper-display-control-p
                  (ceamx-window-display-popup)
                  (window-height . ,popper-window-height)))))
#+end_src

**** =lentic= :: Create decoupled views of the same content

#+begin_src emacs-lisp
(package! lentic
  (global-lentic-mode))

(with-eval-after-load 'lentic
  (add-to-list 'safe-local-variable-values '(lentic-init . lentic-orgel-org-init)))
#+end_src

*** =breadcrumb= :: header-line wayfinding :headerline:

- Package :: <https://github.com/joaotavora/breadcrumb>

#+begin_src emacs-lisp
(package! breadcrumb
  (add-hook 'ceamx-after-init-hook #'breadcrumb-mode))
#+end_src

*** Interactive window management
**** Restore previous window configurations with the ~winner-mode~ feature :history:

#+begin_src emacs-lisp
(add-hook 'ceamx-after-init-hook #'winner-mode)
#+end_src

**** =golden-ratio= :: automatically resize windows according to Ancient Wisdom :package:

#+begin_src emacs-lisp
(package! golden-ratio
  (setopt golden-ratio-auto-scale t)
  (setopt golden-ratio-max-width 100))
#+end_src

**** =ace-window= :: interactively manage windows
:PROPERTIES:
:ID:       f582eb53-4eb6-4bfd-a67d-feb2facfd23e
:END:

<https://github.com/abo-abo/ace-window>

#+begin_src emacs-lisp
(package! ace-window
  (define-keymap :keymap (current-global-map)
    "C-x O" #'ace-window))

(after! ace-window
  (setopt aw-scope 'visible))
#+end_src

**** =transpose-frame= :: transpose a frame's windows
:PROPERTIES:
:ID:       76f64487-fbd0-4754-af9b-ceebf4f0916e
:END:

#+begin_src emacs-lisp
(package! transpose-frame
  (keymap-global-set "C-x w SPC" #'transpose-frame))
#+end_src

**** ~ceamx/window-dispatch~: a window-management menu :transient:menu:keybinds:

#+begin_src emacs-lisp
(transient-define-prefix ceamx/window-dispatch ()
  "Window management transient."
  :transient-suffix 'transient--do-stay
  [["Move"
    ("h" "left" windmove-left)
    ("j" "down" windmove-down)
    ("k" "up" windmove-up )
    ("l" "right" windmove-right)
    ("w" "sel" ace-window)]

   ["Resize"
    ("=" "bal" balance-windows)
    ("+" "bal: area" balance-windows-area)
    ("-" "fit: buffer" fit-window-to-buffer)]

   ["Buffer"
    ("b" "buf" consult-buffer)
    ;; ("f" "ff: p" project-find-file)
    ("f" "file" find-file )
    ("F" "file" find-file-other-window)
    ("g" "grep" consult-ripgrep)]

   ["Swarp"
    ("H" "left" ceamx/window-move-left)
    ("J" "down" ceamx/window-move-down)
    ("K" "up" ceamx/window-move-up)
    ("L" "right" ceamx/window-move-right)
    ""
    ("s" "swap" ace-swap-window)
    ("2" "spl: dn" split-window-below)
    ("3" "spl: rt" split-window-right)
    ("SPC" "swap-or-rotate" ceamx/swap-or-rotate-windows)]

   ["Scroll"
    ;; TODO: allow selecting a window (with infix?) to act upon
    ;; NOTE: These are the correct scroll direction commands, which might
    ;; appear to be reversed when comparing with labels.
    ("." "left" scroll-right)
    ("," "right" scroll-left)
    ("SPC" "down" scroll-up)
    ("DEL" "up" scroll-down)]

   ["Lifecycle"
    ("d" "del (this)" delete-window)
    ("D" "del (select)" ace-delete-window)
    ;; ("D" "del: o" delete-other-windows :transient nil)
    ("u" "undo" winner-undo)
    ("U" "redo" winner-redo)
    ""
    ("0" "del" delete-window)
    ("1" "del other" delete-other-windows)
    ""
    ("S" "[ ] sides" window-toggle-side-windows)
    ("`" "[ ] popups" popper-toggle)
    ""
    ("q" "quit" transient-quit-all)]])
#+end_src

*** Workspace Isolation :workspace:

#+begin_src emacs-lisp
(use-feature! ceamx-window
  :demand t
  :config
  (setopt ceamx-window-workspace-provider 'activities))
#+end_src

**** =activites= :: organize window+buffer by activity :tabs:
:PROPERTIES:
:ID:       91310539-1562-4d0c-9648-0f3aa56cc2f0
:END:

- Website :: <https://github.com/alphapapa/activities.el>

#+begin_src emacs-lisp
(package! activities
  (activities-mode 1)
  (activities-tabs-mode 1)

  ;; Synchronize with future `tab-bar-mode' state changes.
  (add-hook 'tab-bar-mode-hook #'activities-tabs-mode)

  (setopt edebug-inhibit-emacs-lisp-mode-bindings t))

(after! activities
  (setopt activities-name-prefix "α ")
  ;; Don't interfere with the bookmark system.
  (setopt activities-bookmark-store nil)
  ;; Kill buffers upon invocation of `activities-suspend'.
  (setopt activities-kill-buffers t))
#+end_src

The keybindings conflict with ~edebug~, so they need to be defined later
than usual.  This is still the case as of [2025-01-25 Sat].

#+begin_src emacs-lisp
(defun ceamx-after-init-define-activities-keys-h ()
  "Define keybindings for `activities' late to override `edebug'.
Intended for use as a hook on `ceamx-after-init-hook'."
  (setq edebug-inhibit-emacs-lisp-mode-bindings t)

  ;; (keymap-global-unset "C-x C-a" t)
  (keymap-global-set "C-x C-a" (cons "Activities" (define-prefix-command 'ceamx-activities-prefix)))

  ;; TODO: still shares bindings with edebug which is confusing
  (define-keymap :keymap (current-global-map)
    "C-x C-a C-n" #'activities-new
    "C-x C-a C-d" #'activities-define
    "C-x C-a C-a" #'activities-resume
    "C-x C-a C-s" #'activities-suspend
    "C-x C-a C-k" #'activities-kill
    "C-x C-a RET" #'activities-switch

    "C-x C-a b" #'activities-switch-buffer
    "C-x C-a g" #'activities-revert
    "C-x C-a l" #'activities-list))

(add-hook 'ceamx-after-init-hook #'ceamx-after-init-define-activities-keys-h)
#+end_src

**** =bufler= :: group buffers with programmable rules
:PROPERTIES:
:ID:       82ed50ad-45b4-4a0c-9ae5-e978de65cdcd
:END:

#+begin_src emacs-lisp
(package! bufler
  (require 'bufler)

  (define-keymap :keymap (current-global-map)
    ;; "C-x b" #'bufler-switch-buffer
    "C-x B" #'bufler-workspace-focus-buffer
    "C-x C-b" #'bufler                  ; orig. `ibuffer'
    "C-x C-B" #'ibuffer

    "C-x w o" #'bufler-workspace-open
    "C-x w r" #'bufler-workspace-reset
    "C-x w s" #'bufler-workspace-save ; orig. `window-toggle-side-windows'
    )

  (define-keymap :keymap ceamx-workspace-prefix-map
    "TAB" #'bufler-workspace-open
    "b" #'bufler-workspace-switch-buffer
    "B" #'bufler-workspace-focus-buffer
    "r" #'bufler-workspace-reset
    "s" #'bufler-workspace-save))
#+end_src

Here are the customizations for Bufler:

#+begin_src emacs-lisp
(after! bufler
  (setopt bufler-reverse t)
  (setopt bufler-workspace-mode-lighter "β ")
  (setopt bufler-columns '("Name" "Size" "Mode" "VC" "Path"))
  (setopt bufler-initial-face-depth 1)
  (after! prism
    (setopt bufler-face-prefix "prism-level-")))
#+end_src

Here are the definitions for the Bufler grouping rules:

#+begin_src emacs-lisp
(after! bufler
  ;; XXX: This absolutely MUST NOT use `setopt'!  Otherwise, the
  ;; package will fail to load due to a hard-to-trace error saying
  ;; something about nil being a void-function.  This probably has
  ;; something to do with the `setopt' type-checking.
  (setq bufler-groups
        (bufler-defgroups
          (group
           ;; Subgroup collecting all named workspaces.
           (auto-workspace))

          (group (mode-match "Ement" (rx bos "ement-")))
          (group (group-or "Elfeed"
                           (mode-match "*Elfeed*" (rx bos "elfeed-"))
                           (name-match "elfeed config" (rx bos "elfeed." (or "el" "org")))))

          ;;
          ;; Help / info / manuals
          (group
           (group-or "*Help/Info*"
                     (mode-match "*Help*" (rx bos "help-"))
                     (mode-match "*Info*" (rx bos "info-"))))

          ;;
          ;; Special buffers
          (group
           ;; Subgroup collecting all special buffers (i.e. ones that are
           ;; not file-backed), except `magit-status-mode' buffers (which
           ;; are allowed to fall through to other groups, so they end up
           ;; grouped with their project buffers).
           (group-not "*Special*"
                      (group-or "*Special*"
                                (mode-match "Magit" (rx bos "magit-status"))
                                (mode-match "Forge" (rx bos "forge-"))
                                (mode-match "Org" (rx bos "org-"))
                                (auto-file)
                                (mode-match "Dired" (rx bos "dired"))))
           (group
            ;; Subgroup collecting these "special special" buffers
            ;; separately for convenience.
            (name-match "**Special**"
                        (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
           (group
            ;; Subgroup collecting all other Magit buffers, grouped by
            ;; directory.
            (mode-match "*Magit* (non-status)"
                        (rx bos (or "magit" "forge") "-"))
            (auto-directory))
           (auto-mode))

          ;;
          ;; Ceamx
          (group
           (dir user-emacs-directory)
           (auto-parent-project))

          ;;
          ;; Jobwork
          (group
           ;; TODO: make ~/Projects/work a variable `ceamx-jobwork-dir'
           (dir (list (file-name-concat ceamx-projects-dir "work")
                      ;; TODO: make ~/Documents a variable `ceamx-documents-dir'
                      (file-name-concat (alist-get "DOCUMENTS" xdg-user-dirs) "work")))
           (dir '("~/Projects/work/applications") 1)
           (dir ceamx-note-work-dir)
           (group (auto-indirect))
           (auto-parent-project))

          ;;
          ;; Org and notes
          ;; TODO: group journal dir separately for isolation
          (group
           (dir ceamx-agenda-dir)
           (dir ceamx-note-default-dir)
           (dir ceamx-note-journal-dir)
           (group
            ;; Subgroup collecting indirect Org buffers, grouping them by
            ;; file.  This is very useful when used with
            ;; `org-tree-to-indirect-buffer'.
            (auto-indirect)
            (auto-file))
           ;; Group remaining buffers by whether they're file backed, then
           ;; by mode.
           (group-not "*special*" (auto-file))
           (auto-mode))

          (group-or "Home"
                    (dir '("/etc/nixos" "~/.config")))

          (group
           (auto-parent-project)
           (auto-indirect))

          (auto-directory)
          (auto-mode))))
#+end_src

**** Switch buffers with scoped buffer lists

#+begin_src emacs-lisp
(use-feature! ceamx-window
  :commands (ceamx/switch-to-buffer)
  :bind
  ("C-x b" . #'ceamx/switch-to-buffer))
#+end_src

*** Provide the ~ceamx-init-window~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-window.el :comments no
(provide 'ceamx-init-window)
;;; ceamx-init-window.el ends here
#+end_src

** Version Control :vcs:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-vcs.el
:VISIBILITY: folded
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-vcs.el :comments no
;; -*- lexical-binding: t;  -*-

(require 'ceamx-paths)
(require 'ceamx-lib)
#+end_src

*** Set up ~ediff~

#+begin_src emacs-lisp
(setup ediff
  (:autoload #'ediff-buffers
             #'ediff-files
             #'ediff-buffers3
             #'ediff-files3)
  (setopt ediff-keep-variants nil
          ediff-make-buffers-readonly-at-startup nil
          ediff-merge-revisions-with-ancestor t
          ediff-show-clashes-only t
          ;; Keep the ~ediff~ control panel in the same frame.
          ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src

*** Set up ~diff-mode~

#+begin_src emacs-lisp
(setup diff-mode
  (setopt diff-default-read-only t)
  (setopt diff-advance-after-apply-hunk t)
  (setopt diff-update-on-the-fly t)
  (setopt diff-refine 'font-lock)
  (setopt diff-font-lock-prettify t
          diff-font-lock-syntax 'hunk-also))
#+end_src

*** Set up version control integration with ~vc-mode~

#+begin_src emacs-lisp
;; Version control support is essential as soon as possible.
(require 'vc)

(setopt vc-follow-symlinks t)
(setopt vc-handled-backends '(Git))

;; NOTE: According to the documentation for ~diff-hl~, the diff
;; algorithm cannot be determined based on the user's global git
;; config =diff.algorithm= setting.  The website source they linked to
;; has disappeared with no archived page available.  So I have not
;; verified this for certain.
(setopt vc-git-diff-switches '("--histogram"))
#+end_src

*** Set up project management with =project.el=

#+begin_src emacs-lisp
(setup project
  (:global "C-x p ." #'project-dired
           "C-x p RET" #'project-dired
           "C-x p DEL" #'project-forget-project)
  (setopt project-vc-extra-root-markers '(".project"))
  (setopt project-key-prompt-style t))
#+end_src

*** =diff-hl= :: display version control status indicators in margins

- Website :: <https://github.com/dgutov/diff-hl>

NOTE: Fringe indicators will conflict with Flycheck.

#+begin_src emacs-lisp
(package! diff-hl
  (add-hook 'ceamx-after-init-hook #'global-diff-hl-mode)

  ;; Display indicators in margins instead of fringes.  This will work
  ;; in terminal sessions and also avoid the fringe conflict with
  ;; other indicators like Flycheck errors.
  (add-hook 'ceamx-after-init-hook #'diff-hl-margin-mode)

  ;; Support mouse click on indicator to show hunk.
  (when (display-graphic-p)
    (add-hook 'ceamx-after-init-hook #'diff-hl-show-hunk-mouse-mode))

  ;; Committing changes using a package other than `vc' requires integration.
  ;; <https://github.com/dgutov/diff-hl#integration>
  (after! magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))

  (after! dired
    (add-hook 'dired-mode-hook #'diff-hl-dired-mode)))
#+end_src

*** =git-modes= :: major modes for git-related files

- website :: <https://github.com/magit/git-modes>

#+begin_src emacs-lisp
(package! git-modes)
#+end_src

*** =git-timemachine= :: interactively explore files' git histories

<https://codeberg.org/pidu/git-timemachine>

#+begin_src emacs-lisp
(package! git-timemachine
  (keymap-global-set "C-x v t" #'git-timemachine))

(after! git-timemachine
  ;; XXX: broken, see `ceamx/git-timemachine-dispatch'
  ;; (add-hook 'git-timemachine-mode-hook #'ceamx/git-timemachine-dispatch)

  (define-keymap :keymap git-timemachine-mode-map
    "M-p" #'git-timemachine-show-previous-revision
    "M-n" #'git-timemachine-show-next-revision
    "M-b" #'git-timemachine-blame
    "M-c" #'git-timemachine-show-commit)

  ;; FIXME: like `ceamx/window-dispatch', this breaks because the commands
  ;; should be run in the original buffer/window
  (transient-define-prefix ceamx/git-timemachine-dispatch ()
    "Transient menu for `git-timemachine-mode'."
    ;; :transient-suffix 'transient--do-stack
    [["Navigation"
      ("p" "previous revision" git-timemachine-show-previous-revision :transient t)
      ("n" "next revision" git-timemachine-show-next-revision :transient t)]
     ["Display"
      ("b" "blame" git-timemachine-blame)
      ("c" "commit" git-timemachine-show-commit )]
     [""
      ("q" "quit" git-timemachine-quit :transient nil)]])

  (declare-function git-timemachine--show-minibuffer-details "git-timemachine")

  ;; via <https://github.com/doomemacs/doomemacs/blob/07fca786154551f90f36535bfb21f8ca4abd5027/modules/emacs/vc/config.el#L76C1-L90C47>
  (def-advice! +git-timemachine--details-in-header-line-a (revision)
    :override #'git-timemachine--show-minibuffer-details
    "Show REVISION details in the header-line instead of the minibuffer."
    (let* ((date-relative (nth 3 revision))
           (date-full (nth 4 revision))
           (author (if git-timemachine-show-author (concat (nth 6 revision) ": ") ""))
           (sha-or-subject (if (eq git-timemachine-minibuffer-detail 'commit) (car revision) (nth 5 revision))))
      (setq header-line-format
            (format "%s%s [%s (%s)]"
                    (propertize author 'face 'git-timemachine-minibuffer-author-face)
                    (propertize sha-or-subject 'face 'git-timemachine-minibuffer-detail-face)
                    date-full date-relative)))))
#+end_src

*** =magit= :: the git experience
:PROPERTIES:
:ID:       5a436e2b-7c80-4055-acdc-b2ef8e640f83
:END:

#+begin_src emacs-lisp
(package! magit
  (define-keymap :keymap (current-global-map)
    "C-c g" #'magit-file-dispatch
    "C-c G" #'magit-dispatch
    "C-x g" #'magit-status
    "C-x M-g" #'magit-dispatch))

(after! magit
  (setopt magit-diff-refine-hunk t)
  ;; Avoid side-effects (e.g. formatting-on-save)
  (setopt magit-save-repository-buffers nil)
  (setopt magit-process-finish-apply-ansi-colors t)

  (setopt magit-bury-buffer-function #'magit-restore-window-configuration)
  ;; <https://magit.vc/manual/magit/Switching-Buffers.html#index-magit_002ddisplay_002dbuffer_002dfullframe_002dstatus_002dv1>
  (setopt magit-display-buffer-function
          #'magit-display-buffer-fullframe-status-v1)

  (when (locate-library "nerd-icons")
    (setopt magit-format-file-function #'magit-format-file-nerd-icons))

  (define-keymap :keymap magit-status-mode-map
    "_" #'magit-revert
    ;; "V" nil
    "x" #'magit-discard)

  (transient-append-suffix 'magit-commit "-n"
    '("-S" "Disable GPG signing" "--no-gpg"))

  (transient-append-suffix 'magit-fetch "-p"
    '("-t" "Fetch all tags" ("-t" "--tags")))

  (transient-append-suffix 'magit-pull "-r"
    '("-a" "Autostash" "--autostash")))
#+end_src

**** Keep ~magit-section~ sections at the top of the window

- Reference :: <https://emacs.stackexchange.com/questions/3380/how-to-scroll-up-when-expanding-a-section-in-magit-status#comment4819_3383>

#+begin_src emacs-lisp
(after! magit
  (remove-hook 'magit-section-movement-hook 'magit-hunk-set-window-start)
  (add-hook 'magit-section-movement-hook #'magit-section-set-window-start))
#+end_src

**** Show ~magit-process~ output popup after N seconds :popups:

This is pretty important when a project has =pre-commit= or =commit-msg=
hooks that are wont to fail.  I also find it helpful for getting
insight into long-running =post-receive= hooks (and similar).

#+begin_src emacs-lisp
(after! magit
  (setopt magit-process-popup-time 3))
#+end_src

**** =alphapapa/magit-todo= :: display codetag comment reminders in ~magit-status~

- Docs :: <https://github.com/alphapapa/magit-todos/blob/master/README.org>

#+begin_src emacs-lisp
(package! magit-todos
  (after! magit
    (require 'magit-todos)
    (magit-todos-mode 1)))
#+end_src

***** TODO Customize appearance to always keep folded, to reduce noise

e.g. "M-4" should not expand this section -- it should only be expanded manually

*** =magit-repos=

#+begin_src emacs-lisp
(setup magit-repos
  ;; FIXME: Make sure feature is available
  ;;  (:load-after magit)
  (:autoload #'magit-list-repositories)
  (setopt magit-repository-directories
          `((,(file-name-concat ceamx-projects-dir "work") . 2)
            (,(file-name-concat ceamx-projects-dir "sources") . 1)
            (,(file-name-concat ceamx-projects-dir "contrib") . 2))))
#+end_src

*** DISABLED =forge= :: interact with online forges through magit

*Warning*: /development versions of ~forge~ may expect a different ~magit~
version!/ Make sure to pin ~forge~ to a stable tag.  And then, make sure
~magit~ is pinned to a stable tag.  And then, make sure every other
Magit dependency is pinned...

#+begin_src emacs-lisp
;; (package! (forge :tag "v0.4.6"))

;; (after! magit
;;   (require 'forge)

;;   ;; FIXME: not yet released
;;   ;; (keymap-set vc-prefix-map "o" #'forge-browse-commit)

;;   )
#+end_src

Forge will prefer, in order, =upstream= and then =origin=.  I use that convention
for repositories where I am a contributor.  For personal repositories, I tend to
use Git remotes named after the forge.  For example, =github= or =codeberg=.  In
those cases, the recommended option for my setup is to set the Git config
setting =forge.remote= /per repository/ (not globally).

#+begin_src shell :tangle no
git config forge.remote 'github'
#+end_src

*** Set up GitHub token authentication :secrets:

- Docs :: <https://magit.vc/manual/ghub.html#Creating-and-Storing-a-Token>
- Docs :: <https://magit.vc/manual/forge.html#Token-Creation>
- Docs :: [[info:auth#The Unix password store][info "(auth) The Unix password store"]]

Create the token at https://github.com/settings/tokens/new with these scopes:

+ =repo=  grants full read/write access to private and public repositories.
+ =user=  grants access to profile information.
+ =read:org=  grants read-only access to organization membership.

Add the token to the password store:

  #+begin_src shell :tangle no
pass insert api.github.com/montchr^forge
#+end_src

Note that =^forge= is required by the =ghub= backend to denote the package using the
stored token:

#+begin_quote
The default Auth-Source backends only support storing three values per entry;
the "machine", the "login" and the "password". Because Ghub uses separate tokens
for each package, it has to squeeze four values into those three slots, and it
does that by using "USERNAME /^PACKAGE/ " as the "login".
#+end_quote

*** Provide the ~ceamx-init-vcs~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-vcs.el :comments no
(provide 'ceamx-init-vcs)
;;; ceamx-init-vcs.el ends here
#+end_src

** Language Support
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-langs.el
:VISIBILITY: folded
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'treesit)

(require 'ceamx-lib)
#+end_src

*** Writing modes

**** =typo= :: typographical correctneß

+ Package :: <https://github.com/jorgenschaefer/typoel>

*Before*:	The "quick" brown --- ffiox.
*After*:	The “quick” brown — ffiox.

#+begin_src emacs-lisp
(package! typo
  ;; Provides [C-c 8] prefix for Unicode entry to complement [C-x 8].
  (typo-global-mode 1)

  ;; Cycle through typographical variants of commonly-mistyped
  ;; characters like quotation marks and dashes.
  (add-hook 'text-mode-hook #'typo-mode)

  (keymap-set ceamx-toggle-prefix "t" #'typo-mode))
#+end_src

*** Programming modes

#+begin_src emacs-lisp
(after! prog-mode
  (define-keymap :keymap prog-mode-map
    ;; Move forward out of one sexp level
    "C-M-d" #'up-list))
#+end_src

#+begin_src emacs-lisp
(def-hook! ceamx-init-lang-prog-mode-h ()
  '(prog-mode-hook)
  "Enable load-order-dependent features and defaults for all `prog-mode'-derived major modes.
To ensure a predictable execution order, condition checks on
`boundp'/`fboundp' are preferable to using `after!' or
`with-eval-after-load', as the latter may result in a non-deterministic
execution order."

  ;; `highlight-function-calls-mode' should be enabled after other highlighters
  ;; (e.g. `rainbow-delimiters-mode'), according to its readme.
  (when (fboundp 'highlight-function-calls-mode)
    (highlight-function-calls-mode 1)))
#+end_src

*** Outline modes :org:
:LOGBOOK:
- Refiled on [2025-01-17 Fri 11:44]
:END:

**** General customizations for ~outline-mode~ and ~outline-minor-mode~

Remember that ~org-mode~ is derived from ~outline-mode~.

#+begin_src emacs-lisp
(keymap-global-set "<f9>" #'outline-minor-mode)

(after! outline
  (setopt outline-minor-mode-highlight t)
  (setopt outline-minor-mode-cycle t)
  (setopt outline-minor-mode-use-buttons nil))
#+end_src

**** =outli= :: mode-agnostic comment-based outlines

- Package :: <https://github.com/jdtsmith/outli>

#+begin_src emacs-lisp
(package! (outli :host github :repo "jdtsmith/outli")
  (def-hook! +outli-mode-maybe-enable-h ()
    '(prog-mode-hook text-mode-hook)
    "Enable `outli-mode' conditionally, excluding some modes.
Note that `emacs-lisp-mode' is excluded here due to a conflict with
`lispy-mode'.  `outli-mode' must be loaded after `lispy-mode'."
    (let ((exclude-modes '(emacs-lisp-mode))
          (excludep (lambda (excluded-mode)
                      (eq major-mode excluded-mode))))
      (unless (seq-some excludep exclude-modes)
        (outli-mode)))))

(after! outli
  ;; FIXME: this example from the readme results in errors due to mismatched signature
  ;; (advice-add 'load-theme :after #'outli-reset-all-faces)
  ;; (advice-remove 'load-theme #'outli-reset-all-faces)

  (define-keymap :keymap outli-mode-map
    "C-c C-n" #'outline-next-heading
    "C-c C-p" #'outline-previous-heading
    ;; "C-c C-p" #'outline-back-to-heading
    "C-c M-h" #'outline-promote
    "C-c M-l" #'outline-demote))
#+end_src

**** TODO Expand the existing repeat map for outline navigation

I think this needs to be /contracted/ a bit.  Some of these aren't even real commands.

#+begin_src emacs-lisp
(after! (repeat outline)
  (define-keymap :keymap outline-navigation-repeat-map
    "C-x" #'foldout-exit-fold
    "x" #'foldout-exit-fold
    "C-z" #'foldout-zoom-subtree
    "z" #'foldout-zoom-subtree
    "C-a" #'outline-show-all
    "a" #'outline-show-all
    "C-c" #'outline-hide-entry
    "c" #'outline-hide-entry
    "C-d" #'outline-hide-subtree
    "C-e" #'outline-show-entry
    "e" #'outline-show-entry
    "TAB" #'outline-show-children
    "C-k" #'outline-show-branches
    "k" #'outline-show-branches
    "C-l" #'outline-hide-leaves
    "l" #'outline-hide-leaves
    "RET" #'outline-insert-heading
    "C-o" #'outline-hide-other
    "o" #'outline-hide-other
    "C-q" #'outline-hide-sublevels
    "q" #'outline-hide-sublevels
    "C-s" #'outline-show-subtree
    "s" #'outline-show-subtree
    "C-t" #'outline-hide-body
    "t" #'outline-hide-body
    "@" #'outline-mark-subtree)

  (ceamx-repeatify-keymap 'outline-navigation-repeat-map))
#+end_src

**** TODO A transient menu for outline navigation

#+begin_src emacs-lisp
;; (after! (transient outline)
;;   (transient-define-prefix ceamx/outline-dispatch ()
;;     "Outline navigation transient menu."
;;     [["Navigate"
;;       ("u" "up" outline-up-heading)
;;       ("n" "next" outline-next-visible-heading)
;;       ("p" "prev" outline-previous-visible-heading)
;;       ("f" "forward" outline-forward-same-level)
;;       ("b" "backward" outline-backward-same-level)]]))

;; (after! (hydra outline)
;;   (defhydra ceamx/outline-hydra ( :color red)
;;     "
;; ^Navigate^            ^Subtree^        ^Metadata^
;; ^--------^----------  ^-------^-----  ^---------^--
;; _n_ext visible        _I_: drag up    _t_odo-state
;; _p_revious visible    _J_: promote    _d_eadline
;; _f_orward same level  _K_: drag down  _s_chedule
;; _b_ack same level     _L_: demote
;; _u_p level            _N_: narrow     _xp_: set property
;;                       _W_: widen
;; "))
#+end_src

*** =smart-newline= :: a newline command for programming modes

#+begin_src emacs-lisp
(use-package smart-newline
  ;; :ensure t
  :hook (prog-mode . smart-newline-mode))
#+end_src

*** =dumb-jump= :: multi-lang do-what-i-mean jump-to-definition

- Package :: <https://github.com/jacktasia/dumb-jump>

#+begin_src emacs-lisp
(package! dumb-jump
  ;; Add to end of `xref-backend-functions' as a dumb fallback when
  ;; there are no smart options.
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate 100)

  (after! (hydra)
    ;; via <https://github.com/jacktasia/dumb-jump?tab=readme-ov-file#hydra-for-effieciency>
    (defhydra ceamx/dumb-jump-dispatch (:color blue :columns 3)
      "Jump (dumbly)"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back"))

    (define-keymap :keymap ceamx-code-prefix
      "j" #'ceamx/dumb-jump-dispatch/body)))
#+end_src

*** =rainbow-mode= :: Colorize color names and hexcodes in buffers :theme:

<https://elpa.gnu.org/packages/rainbow-mode.html>

#+begin_src emacs-lisp
(package! rainbow-mode)
#+end_src

*** DISABLED ~prism~: disperse structural forms into depth-based color strata

Not my cup of tee...

#+begin_src emacs-lisp :tangle no
(use-package prism
  ;; :ensure t
  :hook (((lisp-mode emacs-lisp-mode) . prism-mode)
         ((python-mode yaml-mode) . prism-whitespace-mode))
  :config
  (setopt prism-num-faces 16)
  ;; TODO: handle `ef-themes'
  (after! modus-themes
    (prism-set-colors
      :desaturations '(0)               ; do not change
      :lightens '(0)                    ; do not change

      ;; 4-color:
      ;; :colors (modus-themes-with-colors
      ;;           (list blue
      ;;                 magenta
      ;;                 magenta-cooler
      ;;                 green-warmer))

      ;; 8-color:
      ;; :colors (modus-themes-with-colors
      ;;           (list blue
      ;;                 magenta
      ;;                 magenta-cooler
      ;;                 cyan-cooler
      ;;                 fg-main
      ;;                 blue-warmer
      ;;                 red-cooler
      ;;                 cyan))

      ;; 16-color:
      :colors (modus-themes-with-colors
                (list fg-main
                      magenta
                      cyan-cooler
                      magenta-cooler
                      blue
                      magenta-warmer
                      cyan-warmer
                      red-cooler
                      green
                      fg-main
                      cyan
                      yellow
                      blue-warmer
                      red-warmer
                      green-cooler
                      yellow-faint)))))
#+end_src

*** =hl-todo= :: Highlight "TODO" and other codetags in comments and strings

- website :: <https://github.com/tarsius/hl-todo>
- reference :: <https://peps.python.org/pep-0350/#specification>

#+begin_src emacs-lisp
(use-package hl-todo
  ;;:ensure t
  :hook (prog-mode . hl-todo-mode))
#+end_src

*** =devdocs= :: Peruse local ~devdocs~ docsets
:PROPERTIES:
:ID:       9907125e-84b9-420f-8991-c24b33f84161
:END:

- Source code :: <https://github.com/astoff/devdocs.el>

NOTE: Must run ~devdocs-install~ before a docset is available for reference.

#+begin_src emacs-lisp
(use-package devdocs
  ;; :ensure t
  :defer t

  :bind
  (:map help-map
        ("D" . devdocs-lookup))

  :init
  (after! popper
    (add-to-list 'popper-reference-buffers "\\*devdocs\\*"))

  :config
  ;; FIXME: on a stale timer! every week! not every session...
  ;; (devdocs-update-all)

  )
#+end_src

*** =sideline-emoji= :: Display emoji-at-point info in =sideline=

#+begin_src emacs-lisp
(package! (sideline-emoji :host github :repo "emacs-sideline/sideline-emoji")
  (after! sideline
    (appendq! sideline-backends-left '((sideline-emoji . up)))))
#+end_src

*** Display multiple composed messages inside ~eldoc~

#+begin_src emacs-lisp
(setopt eldoc-documentation-function #'eldoc-documentation-compose)
#+end_src

*** Linting files with the builtin ~flymake~ feature

#+begin_src emacs-lisp
(setup flymake
  (:hook-into ceamx-after-init-hook)
  ;; Mirror the [C-c !] Flycheck prefix.
  (:bind "C-c ! l" #'flymake-show-buffer-diagnostics
         "C-c ! n" #'flymake-goto-next-error
         "C-c ! p" #'flymake-goto-previous-error
         "C-c ! c" #'flymake-show-buffer-diagnostics)
  (:when-loaded
    (setopt flymake-fringe-indicator-position 'right-fringe)
    (setopt flymake-no-changes-timeout 1.0)
    (setopt flymake-wrap-around t)))

(package! sideline-flymake
  (after! flymake
    (add-hook 'flymake-mode-hook #'sideline-mode))

  (setopt sideline-flymake-show-checker-name t)
  (setopt sideline-flymake-max-lines 1))
#+end_src

*** ~Linting files with the ~flycheck~ package :lint:
:PROPERTIES:
:ID:       1409960a-0d06-440c-a2d6-d238354079d7
:END:

#+begin_src emacs-lisp
(package! flycheck
  (add-hook 'ceamx-after-init-hook #'global-flycheck-mode))

(package! consult-flycheck
  (keymap-global-set "M-g f" #'consult-flycheck)

  (after! (consult flycheck)
    (require 'consult-flycheck)))

(package! sideline-flycheck
  (after! flycheck
    (add-hook 'flycheck-mode-hook #'sideline-mode)
    (add-hook 'flycheck-mode-hook #'sideline-flycheck-setup))

  (after! sideline
    (appendq! sideline-backends-right '(sideline-flycheck)))

  (setopt sideline-flycheck-show-checker-name t)
  (setopt sideline-flycheck-max-lines 1))

(after! flycheck
  (setopt flycheck-emacs-lisp-load-path 'inherit)
  (setopt flycheck-idle-change-delay 3.0
          flycheck-display-errors-delay 1.5)
  (setopt flycheck-check-syntax-automatically
          '(save idle-change mode-enabled))
  (setopt flycheck-buffer-switch-check-intermediate-buffers nil)

  ;; Disable Flycheck for modes supported by Flymake
  (setq-default flycheck-disabled-checkers
                (append (default-value 'flycheck-disabled-checkers)
                        '(emacs-lisp
                          emacs-lisp-checkdoc
                          emacs-lisp-package
                          sh-shellcheck))))
#+end_src

*** =jinx= :: the enchanted spell checker :nixpkgs:

- Docs :: <https://github.com/minad/jinx/wiki>


Ideally =emacsPackages.jinx= from Nixpkgs would install the required =enchant=
package, as =jinx= depends on the latter.  Unfortunately, as of
<2024-05-24 Fri 15:21>, the autoloads from the Nixpkgs package are not set up
properly, and even after setting up autoloads manually below, dictionaries are
unavailable.  Apparently =aspell= dictionaries are used behind the scenes, but
they are not detected from within emacs.

Despite all that:

#+begin_src shell :noweb-ref nil :tangle no
enchant-lsmod-2 -list-dicts
#+end_src

#+RESULTS:
| en                   | (aspell) |
| en-variant_0         | (aspell) |
| en-variant_1         | (aspell) |
| en-variant_2         | (aspell) |
| en-w_accents         | (aspell) |
| en-wo_accents        | (aspell) |
| en_AU                | (aspell) |
| en_AU-variant_0      | (aspell) |
| en_AU-variant_1      | (aspell) |
| en_AU-w_accents      | (aspell) |
| en_AU-wo_accents     | (aspell) |
| en_CA                | (aspell) |
| en_CA-variant_0      | (aspell) |
| en_CA-variant_1      | (aspell) |
| en_CA-w_accents      | (aspell) |
| en_CA-wo_accents     | (aspell) |
| en_GB                | (aspell) |
| en_GB-ise            | (aspell) |
| en_GB-ise-w_accents  | (aspell) |
| en_GB-ise-wo_accents | (aspell) |
| en_GB-ize            | (aspell) |
| en_GB-ize-w_accents  | (aspell) |
| en_GB-ize-wo_accents | (aspell) |
| en_GB-variant_0      | (aspell) |
| en_GB-variant_1      | (aspell) |
| en_GB-w_accents      | (aspell) |
| en_GB-wo_accents     | (aspell) |
| en_US                | (aspell) |
| en_US-variant_0      | (aspell) |
| en_US-variant_1      | (aspell) |
| en_US-w_accents      | (aspell) |
| en_US-wo_accents     | (aspell) |
| he                   | (hspell) |
| he_IL                | (hspell) |

#+begin_src emacs-lisp
(autoload 'global-jinx-mode "jinx")
(autoload 'jinx-correct "jinx")
(autoload 'jinx-languages "jinx")

(add-hook 'ceamx-emacs-startup-hook #'global-jinx-mode)

(keymap-global-set "M-$" #'jinx-correct)
(keymap-global-set "C-M-$" #'jinx-languages)

(after! jinx
  (setopt jinx-languages "en"))
#+end_src

*** Formatters
:PROPERTIES:
:ID:       16856ced-d5a2-4b4a-9506-67d7c19b43f0
:END:
**** [[https://github.com/purcell/emacs-reformatter][purcell/emacs-reformatter]]: KISS DIY FMT :package:

#+begin_src emacs-lisp
(package! reformatter
  (require 'reformatter))
#+end_src

***** Configure generalized polyglot formatters

****** =biome=

- Docs :: <https://biomejs.dev/guides/integrate-in-editor/>

This should, possibly more ideally, be run as an LSP client, but AFAIK one does
not yet exist for Eglot (only LSP-Mode).

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define biome-format
    :program "biome"
    :args (list "format" "--stdin-file-path" (buffer-file-name))))
#+end_src

****** =prettier=

- Source :: <https://github.com/akirak/flake-templates/blob/629b04932dc71e3e0213d66a0aa8a08cd0b64922/README.md#emacs>

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define prettier
    :program "prettier"
    :args (list (concat "--plugin-search-dir="
                        (expand-file-name
                         (locate-dominating-file default-directory "package.json")))
                "--stdin-filepath" (buffer-file-name))))
#+end_src

****** treefmt

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define treefmt
    :group 'ceamx
    :program "treefmt"
    :args (list "--stdin" (buffer-file-name))))

(after! popper
  (push "\\*treefmt-errors\\*" popper-reference-buffers))
#+end_src

***** TODO Inhibit on-save formatting with prefix argument

**** [[https://github.com/radian-software/apheleia][radian-software/apheleia]]: opinionated code reformatting :package:

In case you run into issues with ~web-mode~ not updating syntax highlighting after
formatting (or other arbitrary modifications):
<https://github.com/doomemacs/doomemacs/blob/35dc13632b3177b9efedad212f2180f69e756853/modules/editor/format/config.el#L74-L83>

#+begin_src emacs-lisp
(package! apheleia
  ;; (apheleia-global-mode 1)
  )

(after! (apheleia)
  (blackout 'apheleia-mode " Aph"))
#+end_src

**** Use the Biome formatter for supported major modes :lang:

- Reference :: <https://biomejs.dev/internals/language-support/>

As of <2024-05-24 Fri>

#+begin_src emacs-lisp
;; As of <2024-05-24 Fri>
;; <https://biomejs.dev/internals/language-support/>
(defconst ceamx-editor-format-biome-modes-list
  '(javascript-mode js-mode js-ts-mode js3-mode
    typescript-mode typescript-ts-mode
    js-jsx-mode tsx-ts-mode
    json-mode json-ts-mode)
  "List of major-mode symbols for the languages supported by the Biome formatter.")
#+end_src

#+begin_src emacs-lisp
(after! reformatter
  (require 'derived)
  (dolist (hook (mapcar #'derived-mode-hook-name ceamx-editor-format-biome-modes-list))
    (add-hook hook #'biome-format-on-save-mode)))
#+end_src

#+begin_src emacs-lisp
(after! apheleia
  (add-to-list 'apheleia-formatters '(biome "biome" "format" "--stdin-file-path" filepath))

  (dolist (mode ceamx-editor-format-biome-modes-list)
    (add-to-list 'apheleia-mode-alist '(mode . biome))))
#+end_src

**** Define user option to disable format-on-save for some modes

#+begin_src emacs-lisp
(defcustom ceamx-format-on-save-disabled-modes
  '(emacs-lisp-mode                     ; conflict with `lispy' indent
    org-msg-edit-mode)
  "A list of major modes in which to not reformat the buffer upon saving.
When nil, buffers will always be formatted upon save. When
non-nil, buffers will never be formatted upon save."
  :group 'ceamx
  :type '(choice boolean (repeat symbol)))
#+end_src

**** Inhibit automatic formatting in some contexts

Unlike ~reformatter~, ~apheleia~ will /always/ run if it can.  A blessing and a curse.
This section handles the curse.

#+begin_src emacs-lisp
(defun ceamx-editor-format-maybe-inhibit-h ()
  "Check if formatting should be disabled for current buffer."
  (or (eq major-mode 'fundamental-mode)
      (string-blank-p (buffer-name))
      (eq ceamx-format-on-save-disabled-modes t)
      (not (null (memq major-mode ceamx-format-on-save-disabled-modes)))))
#+end_src

#+begin_src emacs-lisp
(after! (apheleia)
  (add-to-list 'apheleia-inhibit-functions #'ceamx-editor-format-maybe-inhibit-h))
#+end_src

**** Inhibit on-save formatting with prefix argument

- Source :: <https://github.com/radian-software/radian/blob/20c0c9d929a57836754559b470ba4c3c20f4212a/emacs/radian.el#L2266-L2270>

#+begin_src emacs-lisp
(after! apheleia
  (def-advice! +apheleia-save-buffer-maybe-reformat-a (func &optional arg)
    :around #'save-buffer
    "Inhibit reformatting-on-save when providing a prefix argument to \\[save-buffer]."
    (let ((apheleia-mode (and apheleia-mode (member arg '(nil 1)))))
      (funcall func))))
#+end_src

*** Structural editing & Tree-Sitter
:PROPERTIES:
:ID:       2fec391c-6023-41fd-a3b4-2dba5d91a55d
:END:
**** =puni= :: versatile structural editing
:PROPERTIES:
:ID:       ce9e9bd5-70bc-451c-b21c-fd29b2c38834
:END:

<https://github.com/AmaiKinono/puni>

#+begin_src emacs-lisp
(package! puni
  (puni-global-mode)
  (add-hook 'prog-mode-hook #'puni-mode)
  (add-hook 'term-mode-hook #'puni-disable-puni-mode))

(after! puni
  (define-keymap :keymap puni-mode-map
    "C-M-f" #'puni-forward-sexp
    "C-M-b" #'puni-backward-sexp
    "C-M-a" #'puni-beginning-of-sexp
    "C-M-e" #'puni-end-of-sexp
    "C-M-[" #'puni-backward-sexp-or-up-list
    "C-M-]" #'puni-forward-sexp-or-up-list

    "M-(" #'puni-syntactic-forward-punct
    "M-)" #'puni-syntactic-backward-punct))
#+end_src

Work in progress.

This is still not quite usable as a Lispy replacement.  The goal is to
use similar structureal editing keybindings across many major-modes.

**** TODO Define a repeat-map for structural editing
:PROPERTIES:
:ID:       2507df8d-17be-4483-ab95-4b0762a90bf1
:END:

Note that this repeat-map should not be used in tandem with ~lispy-mode~
because its bindings generally would need ~puni-mode~ to be active.

- <https://karthinks.com/software/a-consistent-structural-editing-interface/>
- <https://github.com/suliveevil/emacs.d?tab=readme-ov-file#repeat-repeat-mode>
- <https://github.com/karthink/.emacs.d/blob/master/init.el#L3209-L3241>

- [ ] Disable ~repeat-exit-timeout~ for this map only

#+begin_src emacs-lisp :tangle no
(after! puni
  (defvar-keymap ceamx-structural-editing-repeat-map
    :repeat t

    "d" #'puni-forward-delete-char
    ;; "DEL" #'puni-backward-delete-char
    ;; "D" #'puni-forward-kill-word
    ;; "M-DEL" #'puni-backward-kill-word
    ;; "C-k" #'puni-kill-line
    ;; "M-k" #'puni-backward-kill-line
    "k" #'kill-sexp

    "f" #'puni-forward-sexp
    "b" #'puni-backward-sexp
    "[" #'puni-backward-sexp-or-up-list
    "]" #'puni-forward-sexp-or-up-list
    "a" #'puni-beginning-of-sexp
    "e" #'puni-end-of-sexp
    "u" #'puni-up-list
    "M-[" #'puni-syntactic-forward-punct
    "M-]" #'puni-syntactic-backward-punct

    "\\" #'indent-region
    "/" #'undo

    ">" #'puni-slurp-forward
    "<" #'puni-slurp-backward
    "}" #'puni-barf-forward
    "{" #'puni-barf-backward
    "R" #'puni-raise
    "t" #'puni-transpose
    "C" #'puni-convolute
    ;; FIXME: avoid meow dependency -- no puni equivalent
    ;; "J" #'meow-join-sexp
    "S" #'puni-split))

;; FIXME: wrong type argument symbolp
;; (map-keymap (lambda (_ cmd)
;;               (put cmd 'repeat-exit-timeout nil)) structural-editing-map)
#+end_src

**** =treesit-auto= :: automatically use available ~treesit~ modes

+ Package :: <https://github.com/renzmann/treesit-auto>

NOTE: This package does *not* automatically manage mode-hook
translation.  Those should be managed manually on a case-by-case
basis. For example, ~nix-ts-mode-hook~ does not currently inherit the
value of ~nix-mode-hook~.  Some Tree-Sitter modes, however, still derive
from their non-Tree-Sitter predecessor, and so will also run that
mode's hooks in addition to its own.

NOTE: This feature is intended to be loaded *after* all other language
packages have been installed so that ~treesit-auto~ it can override
~auto-mode-alist~.

By default, Emacs plays it safe with tree-sitter language support so
as not to override legacy mode file extension associations.  This
makes sense as a default, but it's a pain to have to override
~auto-mode-alist~ for every language individually.

~treesit-auto~ is pretty smart about how it handles these behaviors; its
readme provides more in-depth details.

In short, ~global-treesit-auto-mode~ will:

- Automatically switch to <name>-ts-mode when the grammar for <name>
  is installed
- Stick with <name>-mode if the grammar isn’t installed
- Automatically install a grammar before opening a compatible file
- Modify auto-mode-alist for tree-sitter modes

  See also
  <https://github.com/purcell/emacs.d/blob/master/lisp/init-treesitter.el>
  for a more manual approach.

#+begin_src emacs-lisp
(package! treesit-auto
  (require 'treesit-auto)

  ;; Grammars should be installed via Nixpkgs.
  (setopt treesit-auto-install nil)

  (treesit-auto-add-to-auto-mode-alist 'all)

  (global-treesit-auto-mode))
#+end_src

Increase the amount of syntax-highlighted structures:

#+begin_src emacs-lisp
(setopt treesit-font-lock-level 4)
#+end_src

**** =treesit-fold= :: Code folding with ~treesit~
:PROPERTIES:
:ID:       f1699289-6ead-46f8-be44-fad5dd1d7906
:END:

+ Package :: <https://github.com/emacs-tree-sitter/treesit-fold>

  There is a lot to configure…

  #+begin_src emacs-lisp
(package! treesit-fold
  (setopt treesit-fold-line-count-show t)
  (setopt treesit-fold-summary-show t)

  (global-treesit-fold-mode 1)
  (global-treesit-fold-indicators-mode -1))

(after! treesit-fold
  (define-keymap :keymap treesit-fold-mode-map
    "C-c l f f" #'treesit-fold-toggle

    "C-c l f c" #'treesit-fold-close
    "C-c l f C" #'treesit-fold-close-all
    "C-c l f o" #'treesit-fold-open
    "C-c l f O" #'treesit-fold-open-all
    "C-c l f r" #'treesit-fold-open-recursively))
#+end_src

**** TODO ~combobulate~
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
:LOGBOOK:
- Refiled on [2025-01-26 Sun 16:39]
:END:

#+begin_src emacs-lisp
(use-package combobulate
  :ensure t
  :hook (((html-ts-mode js-ts-mode go-ts-mode python-ts-mode) . combobulate-mode)))
#+end_src

*** Apply ~autoinsert~ skeletons to new files

#+begin_src emacs-lisp
(use-feature! autoinsert
  :config
  (auto-insert-mode 1))
#+end_src

*** General LISPs

Configuration for working with Lisps of all kinds.

#+begin_src emacs-lisp
(require 'derived)
(require 'ceamx-lisp)
#+end_src

**** Configure behavior for all Lisp modes with ~ceamx-lisp-init-hook~

#+begin_src emacs-lisp
(add-hook 'ceamx-lisp-init-hook #'ceamx-enable-check-parens-on-save)

;; Add hooks to supported Lisp modes.
(dolist (mode ceamx-lisp-modes-list)
  (add-hook (derived-mode-hook-name mode) #'ceamx-lisp-init))
#+end_src

**** Always indent Lisp code with two spaces

#+begin_src emacs-lisp :tangle no
(dolist (sym '(add-function add-to-list advice-add plist-put))
  (put sym 'lisp-indent-function 2))
#+end_src

**** =paredit= :: the original parenthesizer
:PROPERTIES:
:ID:       13b96f21-ebaf-4d49-8b89-78fc05a44c59
:END:

#+begin_src emacs-lisp
(package! paredit
  (def-hook! ceamx-lisp-init-paredit-h ()
    '(ceamx-lisp-init-hook)
    "Enable `paredit-mode' and disable incompatible features."
    (when (fboundp 'puni-mode)
      (puni-mode -1))
    (when (fboundp 'lispy-mode)
      (lispy-mode -1))
    (electric-indent-local-mode -1)
    (paredit-mode 1)))

(after! paredit
  (define-keymap :keymap paredit-mode-map
    ;; Don't interfere with the default Emacs binding!  I use it a lot.
    "M-s" nil
    "RET" #'paredit-newline))
#+end_src

**** DISABLED ~lispy~ :: the structural expression editing experience

- Website :: [[https://github.com/abo-abo/lispy][GitHub - abo-abo/lispy: Short and sweet LISP editing]]
- API Reference :: [[https://oremacs.com/lispy/][lispy.el function reference]]

#+begin_src emacs-lisp :tangle no
(package! lispy
  (add-hook 'ceamx-lisp-init-hook #'lispy-mode))

(after! lispy
    ;; Prevent `lispy' from inserting escaped quotes when already inside a string,
    ;; in favor of just moving past the closing quote as I would expect.
    ;;
    ;; FIXME: This actually results in creating the quote pair *after* the
    ;; closing quote. "for example:"" "
;;    (setopt lispy-close-quotes-at-end-p t)

    (setopt lispy-completion-method 'default)

    (setopt lispy-eval-display-style 'message)

    ;; I have mixed feelings about this one because it can be jarring and easily
    ;; lead to mass-commenting expressions. Default is non-nil.
    (setopt lispy-move-after-commenting t)

    (define-keymap :keymap lispy-mode-map
      "M-j" nil                         ; shadows custom binding

      ;; via <https://github.com/abo-abo/lispy/pull/619>
      "`" #'self-insert-command)

    (after! outli
      ;; `outli-mode' overrides `lispy-mode' outline functionality, so it must
      ;; be activated afterwards.
      (add-hook 'ceamx-lisp-init-hook #'outli-mode))

    (after! macrostep
      (push 'macrostep lispy-compat))

    (after! popper
      (push "\\*lispy-message\\*" popper-reference-buffers)))
#+end_src

**** =kbd-mode= :: syntax support for =kmonad= and =kanata= configs

+ Package :: [[https://github.com/kmonad/kbd-mode][GitHub - kmonad/kbd-mode: Emacs mode for syntax highlighting kmonad's .kbd files.]]

#+begin_src emacs-lisp
(package! (kbd-mode :host github :repo "kmonad/kbd-mode"))
#+end_src

Unfortunately, we need to inhibit formatters because whitespace is used to convey
non-syntactic meaning to the reader.

#+begin_src emacs-lisp
(after! kbd-mode
  (add-to-list 'ceamx-format-on-save-disabled-modes #'kbd-mode)
  (after! lispy
    (add-to-list 'lispy-no-indent-modes #'kbd-mode)))
#+end_src

*** Emacs Lisp
:PROPERTIES:
:ID:       badaa802-a7e4-4492-bddb-6315952771c6
:END:

**** General Elisp support customizations

#+begin_src emacs-lisp
(defun ceamx-emacs-lisp-init ()
  "Sensible defaults for `emacs-lisp-mode'."
  (ceamx-lisp-init)
  (eldoc-mode 1)
  ;; TODO: do we really want this for `ielm' and other derived modes as well?
  (blackout "EL"))

(add-hook 'emacs-lisp-mode-hook #'ceamx-emacs-lisp-init)
(add-hook 'ielm-mode-hook #'ceamx-emacs-lisp-init)

(when (boundp 'eval-expression-minibuffer-setup-hook)
  (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode))
#+end_src

**** Use current ~load-path~ during compilation to tone down Flymake

+ Source :: <https://github.com/doomemacs/doomemacs/blob/98d753e1036f76551ccaa61f5c810782cda3b48a/modules/lang/emacs-lisp/config.el#L124C1-L138C15>

#+begin_src emacs-lisp
(def-advice! +elisp-flymake-byte-compile-fix-load-path-a (orig-fn &rest args)
  :around #'elisp-flymake-byte-compile
  "Set load path for the `emacs-lisp' byte compilation `flymake' backend."
  (let ((elisp-flymake-byte-compile-load-path
         (append elisp-flymake-byte-compile-load-path load-path)))
    (apply orig-fn args)))
#+end_src

**** Display variable value next to ~eldoc~ output

+ Source :: <https://github.com/doomemacs/doomemacs/blob/98d753e1036f76551ccaa61f5c810782cda3b48a/modules/lang/emacs-lisp/config.el#L124C1-L138C15>

#+begin_src emacs-lisp
(def-advice! +emacs-lisp-append-value-to-eldoc-a (fn sym)
  :around #'elisp-get-var-docstring
  "Display variable value next to documentation in eldoc."
  (when-let (ret (funcall fn sym))
    (if (boundp sym)
        (concat ret " "
                (let* ((truncated " [...]")
                       (print-escape-newlines t)
                       (str (symbol-value sym))
                       (str (prin1-to-string str))
                       (limit (- (frame-width) (length ret) (length truncated) 1)))
                  (format (format "%%0.%ds%%s" (max limit 0))
                          (propertize str 'face 'warning)
                          (if (< (length str) limit) "" truncated))))
      ret)))
#+end_src

#+begin_src emacs-lisp
;;; Keybinds

;; (keymap-global-set "<remap> <indent-pp-sexp>" #'ceamx/indent-last-sexp)

(define-keymap :keymap emacs-lisp-mode-map
  "C-:" #'ielm

  "C-S-t" #'transpose-sexps)

(with-eval-after-load 'ielm
  (defvar ielm-map)
  (keymap-set ielm-map "C-:" #'quit-window))
#+end_src

**** =sideline-load-cost= :: Show library weight in sideline
:PROPERTIES:
:ID:       67dabafe-cf92-4142-bbfa-ac10008f1eb6
:END:

#+begin_src emacs-lisp
(package! (sideline-load-cost :host github :repo "emacs-sideline/sideline-load-cost")
  (after! sideline
    (appendq! sideline-backends-right '(sideline-load-cost))))
#+end_src

**** =eros= :: [E]valuation [R]esult [O]verlay[S]
:PROPERTIES:
:ID:       a59594e9-edbc-4446-9f2f-6f00b34c8034
:END:

+ Website :: <https://github.com/xiongtx/eros>

#+begin_src emacs-lisp
(package! eros
  (add-hook 'emacs-lisp-mode-hook #'eros-mode)

  (keymap-set emacs-lisp-mode-map "<remap> <eval-last-sexp>" #'eros-eval-last-sexp)

  (use-feature! lispy
    :autoload (lispy-define-key)
    :config
    (def-hook! +lispy-use-eros-eval-h () 'lispy-mode-hook
      "Use `eros-eval-last-sexp' in place of `lispy-eval' bindings."
      ;; FIXME: there is currently no way to hide lispy-eval output.
      ;;        nil results in an error.
      ;;        because of this, output is duplicated in the minibuffer and the
      ;;        eros overlay...
      ;;
      ;; (setopt lispy-eval-display-style nil)
      (lispy-define-key lispy-mode-map "e" #'eros-eval-last-sexp))))

(package! (sideline-eros :host github :repo "emacs-sideline/sideline-eros")
  (after! (sideline eros)
    (add-hook 'sideline-mode-hook #'sideline-eros-setup)
    (appendq! sideline-backends-right '(sideline-eros))))
#+end_src

**** =suggest= :: meet the elisp function of your dreams

+ Package :: <https://github.com/Wilfred/suggest.el>

#+begin_src emacs-lisp
(use-package suggest
  :commands (suggest)
  :init
  (keymap-set emacs-lisp-mode-map "C-c S" #'suggest))
#+end_src

**** =macrostep= :: interactive macro-explorer

+ Package :: <https://github.com/emacsorphanage/macrostep>

#+begin_src emacs-lisp
(use-package macrostep
  :commands (macrostep-expand)

  :preface
  ;; <https://github.com/joddie/macrostep/issues/11>
  ;; <https://github.com/emacsorphanage/macrostep/issues/8>
  (defun ceamx/macrostep-expand ()
    "Wrapper for `macrostep-expand' providing workaround for errors.
The original function fails in the presence of whitespace after a sexp."
    (interactive)
    (when (and (= ?\n (char-after))
               (= (point) (cdr (bounds-of-thing-at-point 'sexp))))
      (backward-char))
    (macrostep-expand))

  :init
  (keymap-set emacs-lisp-mode-map "C-c x" #'ceamx/macrostep-expand))
#+end_src

**** =xr= :: convert string regexps to ~rx~ forms

+ Package :: <https://github.com/mattiase/xr>

#+begin_src emacs-lisp
(package! xr)
#+end_src

**** =elmacro=: Display keyboard macros or latest interactive commands as Elisp

+ Package :: <https://github.com/Silex/elmacro>

Avoid enabling this mode globally.  It may cause some recurring
errors, and the package has not been updated in years.  By nature, it
is also quite invasive, and should probably only be used as a
development tool as needed.

#+begin_src emacs-lisp
(use-package elmacro
  ;; :ensure t
  :config
  (setopt elmacro-show-last-commands-default 30)

  ;; <https://github.com/Silex/elmacro/blob/master/README.md#org-mode-smartparens-etc>
  ;; <https://github.com/Silex/elmacro/blob/master/README.md#elmacro-processor-prettify-inserts>
  (setopt elmacro-processor-prettify-inserts
          (unless (or (bound-and-true-p lispy-mode) ; not actually sure about lispy-mode
                      (bound-and-true-p smartparens-mode)
                      (bound-and-true-p org-mode))))

  ;; "a" "b" "c" => "abc"
  ;; FIXME: maybe causes errors?
  (setopt elmacro-processor-concatenate-inserts t))
#+end_src

**** =elisp-demos= :: display elisp usage examples inside help buffers

- Package :: <https://github.com/xuchunyang/elisp-demos>

#+begin_src emacs-lisp
(use-package elisp-demos
  ;; :ensure t
  :defer 5
  :after (helpful)
  :functions (elisp-demos-advice-helpful-update)
  :config
  (setopt elisp-demos-user-files (list (expand-file-name  "docs/elisp-demos.org" user-emacs-directory)))

  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

**** =morlock= :: more font-lock keywords for some eldritch expressions

+ Package :: <https://github.com/tarsius/morlock>

#+begin_src emacs-lisp
(package! morlock
  (add-hook 'ceamx-after-init-hook #'morlock-mode))
#+end_src

**** =keymap-utils= :: dev library for working with keymaps

#+begin_src emacs-lisp
(package! keymap-utils)
#+end_src

*** Language Server and Debugger Protocol Support :lsp:lang:

**** Eglot
:PROPERTIES:
:ID:       8e477ec3-51fd-47ea-802d-e08484fa1add
:END:

#+begin_src emacs-lisp
(after! eglot
  (keymap-set eglot-mode-map "C-c l a" #'eglot-code-actions)
  (keymap-set eglot-mode-map "C-c l r" #'eglot-rename)

  (after! consult
    (keymap-set eglot-mode-map "C-c l o" #'consult-eglot-symbols))

  (setopt eglot-sync-connect 1)
  (setopt eglot-autoshutdown t)
  (setopt eglot-send-changes-idle-time 0.5)

  ;; Disable events buffer, which poses performance issues over time as the
  ;; buffer grows in a longer-running Emacs instance.
  (setopt eglot-events-buffer-size 0)

  ;; Prevent frequent focus-stealing.
  (setopt eglot-auto-display-help-buffer nil))
#+end_src

***** Use =emacs-lsp-booster= via ~eglot-booster~ :perf:
:PROPERTIES:
:ID:       1e70440b-7daa-491e-bdef-d761d8fb186d
:END:

- Website :: <https://github.com/jdtsmith/eglot-booster>
- Website :: <https://github.com/blahgeek/emacs-lsp-booster>

Requires =emacs-lsp-booster= to be installed into the environment.  Available by that name in Nixpkgs.

#+begin_src emacs-lisp
(use-package eglot-booster
  :ensure (:host github :repo "jdtsmith/eglot-booster")
  :commands (eglot-booster-mode)
  :init
  (after! eglot
    (eglot-booster-mode)))
#+end_src

Though I have not tried it, I am thinking that using =lsp-booster= over TRAMP is
not worth the trouble of ensuring that the executable is available on every
remote server.  At least not as a default behavior.  Consider enabling this
per-project or server as desired.

elsp
#+begin_src emacs-lisp
(setopt eglot-booster-no-remote-boost t)
#+end_src

***** Run language servers automatically in supported major modes
:PROPERTIES:
:ID:       f67c3b4f-7328-4985-937d-cfec35f82994
:END:

The timing here may be delicate...

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'eglot-ensure)

(after! eglot
  (defvar eglot-server-programs)

  (def-advice! +eglot--ensure-available-mode (fn)
    :around #'eglot-ensure
    "Run `eglot-ensure' in supported modes."
    (when (alist-get major-mode eglot-server-programs nil nil
                     (lambda (modes key)
                       (if (listp modes)
                           (member key modes)
                         (eq key modes))))
      (funcall fn))))
#+end_src

***** Declare some Eglot buffers as popup windows

#+begin_src emacs-lisp
(after! (eglot popper)
  (defvar popper-reference-buffers)
  (add-to-list 'popper-reference-buffers "^\\*eglot-help"))
#+end_src

***** =sideline-eglot= :: Display Eglot messages in sideline

#+begin_src emacs-lisp
(package! (sideline-eglot :host github :repo "emacs-sideline/sideline-eglot")
  (after! eglot
    (add-hook 'eglot-managed-mode-hook #'sideline-mode))
  (after! sideline
    (appendq! sideline-backends-right '(sideline-eglot))))
#+end_src

***** Configure ~flycheck-eglot~ integration

#+begin_src emacs-lisp
(package! flycheck-eglot
  (add-hook 'eglot-managed-mode-hook #'flycheck-eglot-mode))
#+end_src

***** Add workspace symbols as Consult datasource with ~consult-eglot~

<https://github.com/mohkale/consult-eglot>

#+begin_src emacs-lisp
(package! consult-eglot
  (defalias 'ceamx/list-workspace-symbols #'consult-eglot-symbols))
#+end_src

***** Keybindings

#+begin_src emacs-lisp
(keymap-global-set "C-c l a" '("action.." . eglot-code-actions))
(keymap-global-set "C-c l r" '("rename..." . eglot-rename))
(keymap-global-set "C-c l o" #'consult-eglot-symbols)

(after! eglot
  ;; Override the default binding for `xref-find-apropos'.
  (keymap-set eglot-mode-map "C-M-." #'consult-eglot-symbols))

(after! lsp-mode
    (keymap-global-set "C-c l o" #'consult-lsp-symbols)
    ;; Override the default binding for `xref-find-apropos'.
    (keymap-set lsp-mode-map "C-M-." #'consult-lsp-symbols))
#+end_src

*** TODO Debugging with ~dap-mode~ and the Debug Adapter Protocol (DAP)
:PROPERTIES:
:header-args: :tangle no
:END:

- website :: <https://github.com/emacs-lsp/dap-mode>
- spec :: <https://microsoft.github.io/debug-adapter-protocol/>

  This might be dependent on LSP-Mode?

#+begin_src emacs-lisp
(package! dap-mode
  (dap-auto-configure-mode))
#+end_src

*** Data Formats (JSON, TOML, YAML, XML, CSV...)
:PROPERTIES:
:ID:       137d1e04-d0dc-4512-a450-fbafeef65804
:END:

**** JSON/JSONC
:PROPERTIES:
:ID:       62d6b3c0-60ca-4bf3-9613-e09f403d7eac
:END:

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.jsonc\\'" . json-ts-mode))
#+end_src

**** TOML
***** Register =taplo= formatter

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define toml-taplo-fmt
    :group 'ceamx
    :program "taplo"
    :args (list "format" "--diff"
                "--stdin-filepath" (buffer-file-name)
                "-"))

  (add-hook 'conf-toml-mode-hook #'toml-taplo-fmt-on-save-mode)
  (add-hook 'toml-ts-mode-hook #'toml-taplo-fmt-on-save-mode))
#+end_src

***** LSP-Mode: Use the correct cache base directory

#+begin_src emacs-lisp
(when (featurep 'lsp-toml)
  (setopt lsp-toml-cache-path (file-name-as-directory
                               (concat ceamx-lsp-mode-cache-dir "server/toml"))))
#+end_src

**** YAML

***** Install the =yaml-mode= package

#+begin_src emacs-lisp
(package! yaml-mode)
#+end_src

***** TODO Start the LSP server

- Note taken on [2024-12-26 Thu 21:21] \\
  Needs eglot

Install the =yaml-language-server= from Nixpkgs first.

***** TODO Add support for YAML Schema validation

**** XML [builtin]

#+begin_src emacs-lisp
(use-feature! nxml-mode
  :mode "\\.p\\(?:list\\|om\\)\\'"      ; plist, pom
  :mode "\\.xs\\(?:d\\|lt\\)\\'"        ; xslt, xsd
  :mode "\\.rss\\'"

  :config
  (setq nxml-slash-auto-complete-flag t)
  (setq nxml-auto-insert-xml-declaration-flag t))
#+end_src

**** CSV + TSV

#+begin_src emacs-lisp
(package! csv-mode)

(after! csv-mode
  (define-keymap :keymap csv-mode-map
    "a" #'csv-align-fields
    "u" #'csv-unalign-fields
    "s" #'csv-sort-fields
    "S" #'csv-sort-numeric-fields
    "k" #'csv-kill-fields
    "t" #'csv-transpose))
#+end_src

*** =jq-mode= :: major mode for editing =jq= queries

+ Package :: <https://github.com/ljos/jq-mode>

#+begin_src emacs-lisp
(package! jq-mode
  (add-to-list 'auto-mode-alist '("\\.jq$" . jq-mode))
  (after! json
    (keymap-set js-json-mode-map "C-c o r" #'jq-interactively))
  (after! json-ts-mode
    (keymap-set json-ts-mode-map "C-c o r" #'jq-interactively)))
#+end_src

*** Web-Mode

#+begin_src emacs-lisp
(package! web-mode
  ;; TODO: refactor
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

  (setopt web-mode-engines-alist
          '(("php" . "\\.phtml\\'")
            ("blade" . "\\.blade\\.")))

  ;; Defer to `electric-pair-mode' or similar.
  (setopt web-mode-enable-auto-pairing nil)

  (setopt web-mode-enable-css-colorization t
          web-mode-enable-block-face t
          web-mode-enable-part-face t
          web-mode-enable-current-element-highlight t))
#+end_src

#+begin_src emacs-lisp
;;; emmet-mode

;; - website :: <https://github.com/smihica/emmet-mode>
;; - reference ::
;; - <https://github.com/smihica/emmet-mode/blob/master/README.md#usage>

;; NOTE: This package is unmaintained!

(package! emmet-mode
  (setopt emmet-move-cursor-between-quotes t)

  (add-hook 'css-mode-hook #'emmet-mode)
  (after! web-mode
    (add-hook 'web-mode-hook #'emmet-mode)))
#+end_src

*** JavaScript

#+begin_src emacs-lisp
;; TODO: try <https://github.com/llemaitre19/jtsx> but it's not in melpa or nixpkgs yet

(defun ceamx-init-javascript-modes ()
  (setopt js-indent-level 2)

  (after! lsp-mode
    (lsp-deferred)
    (lsp-lens-mode)
    (dolist (hook '(lsp-format-buffer
                     lsp-organize-imports))
      (add-hook 'before-save-hook hook nil t))))

;; TODO: must happen before `treesit-auto' so it can override
;; (add-to-list 'auto-mode-alist '("\\.js\\'"     . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.[cm]js\\'" . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.pac\\'"    . js2-mode))
;; (add-to-list 'interpreter-mode-alist '("node"  . js2-mode))

(use-feature! typescript-ts-mode
  :init
  (add-hook 'typescript-ts-base-mode #'ceamx-init-javascript-modes))
#+end_src

*** Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :config
  (setq-default lua-indent-level 2))
#+end_src

*** Markdown


**** Customization

#+begin_src emacs-lisp
(package! markdown-mode
  (setopt markdown-enable-wiki-links t)
  (setopt markdown-italic-underscore t)
  (setopt markdown-asymmetric-header t)
  (setopt markdown-gfm-additional-languages '("sh"))
  (setopt markdown-make-gfm-checkboxes-buttons t)
  (setopt markdown-fontify-whole-heading-line t)

  ;; HACK Due to jrblevin/markdown-mode#578, invoking `imenu' throws a
  ;;      'wrong-type-argument consp nil' error if you use native-comp.
  ;;      <https://github.com/jrblevin/markdown-mode/issues/578>
  (setopt markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p))))

  ;; This is set to `nil' by default, which causes a wrong-type-arg error
  ;; when you use `markdown-open'. These are more sensible defaults.
  (setopt markdown-open-command (cond
                                 ((ceamx-host-macos-p) "open")
                                 ((ceamx-host-gnu-linux-p) "xdg-open")))

  (with-eval-after-load 'org-src
    (add-to-list 'org-src-lang-modes '("md" . markdown))))

(with-eval-after-load 'markdown-mode
  (defvar markdown-mode-map)
  (declare-function markdown-match-generic-metadata "markdown-mode")
  (declare-function markdown-insert-link "markdown-mode")
  (declare-function markdown-insert-blockquote "markdown-mode")

  (define-keymap :keymap markdown-mode-map
    "C-c i l" #'markdown-insert-link
    "C-c i q" #'markdown-insert-blockquote)

  ;; <https://github.com/jrblevin/markdown-mode/issues/328#issuecomment-405361296>
  ;; <https://github.com/radian-software/radian/blob/b2fac3a615186f77de0bdc7e4f06e9aa46c222bb/emacs/radian.el#L3199-L3206>.
  (def-advice! +markdown-disable-front-matter-fontification-a (&rest _)
    :override #'markdown-match-generic-metadata
    "Prevent fontification of YAML metadata blocks in `markdown-mode'.
This prevents a mis-feature wherein if the first line of a
Markdown document has a colon in it, then it's distractingly and
usually wrongly fontified as a metadata block."
    (ignore (goto-char (point-max)))))
#+end_src


**** =lisp/lib-lang-markdown.el= :: Language: Markdown: Library

#+begin_src emacs-lisp :tangle lisp/lib-lang-markdown.el :comments no
;;; lib-lang-markdown.el --- Markdown helpers        -*- lexical-binding: t; -*-

;; Copyright (C) 2023-2024  Chris Montgomery

;; Author: Chris Montgomery <chmont@protonmail.com>
;; Keywords: languages, local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

;;;###autoload
(defun ceamx-markdown-compile (beg end output-buffer)
  "Compile Markdown with pandoc if available.
Returns process exit code."
  (when (executable-find "pandoc")
    (call-process-region beg end "pandoc" nil output-buffer nil
      "-f" "markdown"
      "-t" "html"
      "--highlight-style=pygments")))

(provide 'lib-lang-markdown)
;;; lib-lang-markdown.el ends here
#+end_src

*** Nix
**** Install and configure ~nix-mode~ :package:

<https://github.com/NixOS/nix-mode>

NOTE: ~nix-mode~ should not be loaded when using ~nix-ts-mode~.

#+begin_src emacs-lisp
(package! nix-mode
  (add-hook 'nix-mode-hook #'eglot-ensure))
#+end_src

**** Install and configure ~nix-ts-mode~ :package:
:PROPERTIES:
:ID:       9936dd8a-40e7-46d7-a8a8-0d0e58dbea47
:END:

<https://github.com/remi-gelinas/nix-ts-mode>

#+begin_src emacs-lisp
(package! nix-ts-mode
  (add-hook 'nix-ts-mode-hook #'eglot-ensure))

(after! (nerd-icons nix-ts-mode)
  ;; XXX: contribute fix upstream
  (add-to-list 'nerd-icons-mode-icon-alist '(nix-ts-mode  nerd-icons-mdicon "nf-md-nix" :face nerd-icons-blue)))
#+end_src

**** Set the official formatter (=nixfmt=) as the default formatter :formatting:

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define nixfmt-format
    :group 'ceamx
    :program "nixfmt")

  (add-hook 'nix-mode-hook #'nixfmt-format-on-save-mode)
  (add-hook 'nix-ts-mode-hook #'nixfmt-format-on-save-mode))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  (add-to-list 'safe-local-variable-values '(apheleia-formatter . nixfmt))
  (add-to-list 'apheleia-mode-alist '(nix-mode . nixfmt))
  (add-to-list 'apheleia-mode-alist '(nix-ts-mode . nixfmt)))
#+end_src

**** Register =alejandra= as an additional formatter :formatting:

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define alejandra-format
    :group 'ceamx
    :program "alejandra"))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  (add-to-list 'safe-local-variable-values '(apheleia-formatter . alejandra))
  (add-to-list 'apheleia-formatters '(alejandra "alejandra")))
#+end_src

**** Configure Nix language servers :lsp:
:PROPERTIES:
:ID:       d821e9ba-f4c9-4621-a5ed-60d834d469f2
:END:

#+begin_src emacs-lisp
;; TODO: defcustom
(defvar ceamx-lsp-server-nix-lang "nix-nixd")

(defvar ceamx-lsp-nix-nixd-default-config
  `(:nixpkgs (:expr "import (builtins.getFlake \"/etc/nix/inputs/nixpkgs\") { } ")
    :formatting (:command ["nixfmt"])
    :options (:nixos (:expr ,(format "import (builtins.getFlake \"%s\").%s.\"%s\".options"
                              "/etc/nixos"
                              "nixosConfigurations"
                              (system-name)))
              :home-manager (:expr ,(format "import (builtins.getFlake \"%s\").%s.%s.config.home-manager.users.%s"
                                     "/etc/nixos"
                                     "nixosConfigurations"
                                     (system-name)
                                     (user-login-name))))))

(use-feature! ceamx-eglot
  :demand t
  :after eglot
  :defines (ceamx-eglot-server-configurations-alist)
  :functions (ceamx-eglot-server-contact)
  :config
  (add-to-list 'ceamx-eglot-server-configurations-alist
               '("nix-nil" . nil))
  (add-to-list 'ceamx-eglot-server-configurations-alist
               (cons "nix-nixd" ceamx-lsp-nix-nixd-default-config))

  (add-to-list 'eglot-server-programs
               (cons '(nix-mode nix-ts-mode)
                     (ceamx-eglot-server-contact ceamx-lsp-server-nix-lang))))
#+end_src

**** Keybindings :keybinds:
:PROPERTIES:
:ID:       108e009a-acd4-434a-9eb5-448ba94ebb77
:END:

#+begin_src emacs-lisp
(after! nix-mode
  (keymap-set nix-mode-map "C-:" #'nix-repl))

(after! (nix-mode tempel)
  (tempel-key "C-c i t a" modargs nix-mode-map))

(after! nix-ts-mode
  (keymap-set nix-ts-mode-map "C-:" #'nix-repl))

(after! nix-repl
  (keymap-set nix-repl-mode-map "C-:" #'quit-window))
#+end_src

*** Language Support for PHP

**** Feature Settings

#+begin_src emacs-lisp
(defconst ceamx-lang-php-extension-regexp "\\.\\(php\\|phtml\\)\\'"
  "Pattern matching files with PHP syntax.")
#+end_src

**** Ignore PHP-specific directories and files

#+begin_src emacs-lisp
(appendq! xref-ignored-files
          '("_ide_helper_models.php"
            "_ide_helper.php"))
#+end_src

**** Install a PHP major-mode... but which one?

***** DISABLED ~php-mode~ the package

#+begin_src emacs-lisp :tangle no
(package! php-mode
  ;; PHP is not a templating language.  `web-mode' does templates
  ;; better.  Furthermore, as of <2024-06-18 Tue 22:37> `php-ts-mode'
  ;; does not currently support embedded HTML syntax, so disabling
  ;; this feature of `php-mode' adds consistency.
  (setopt php-mode-template-compatibility nil))
  #+end_src

***** =php-ts-mode= [builtin]
:PROPERTIES:
:ID:       892d02b2-d88a-4ee4-8b5b-addc613e1496
:END:

~php-ts-mode~ is part of Emacs 30.

Unfortunately, as of <2024-06-18 Tue 18:22>, I am missing the
[[https://github.com/claytonrcarter/tree-sitter-phpdoc][=tree-sitter-phpdoc= grammar]], and it is not yet available in Nixpkgs.  I was
able to run ~php-ts-mode-install-parsers~ as suggested in the error message, but
the missing grammar should really be added to Nixpkgs and the current stateful
installation might get confusing.

#+begin_src emacs-lisp
(when (and (fboundp 'php-ts-mode)
           (treesit-language-available-p 'php))
  (add-to-list 'major-mode-remap-alist '(php-mode . php-ts-mode))
  (add-to-list 'major-mode-remap-alist '(php-mode-maybe . php-ts-mode)))
#+end_src

**** Display line numbers in PHP buffers
:PROPERTIES:
:ID:       5be5d8be-1b82-4742-a0f2-cf716e521b9f
:END:

#+begin_src emacs-lisp
(after! php-mode
  (add-hook 'php-mode-hook #'display-line-numbers-mode))

(after! php-ts-mode
  (add-hook 'php-ts-mode-hook #'display-line-numbers-mode))
#+end_src

**** [[https://github.com/Fuco1/neon-mode][Fuco1/neon-mode]]: major-mode for NEON, the PHP-centric franken-YAML DSL :package:

- Reference :: <https://ne-on.org/>

I have never ever encountered NEON in any context other than a =phpstan.neon=
PHPStan configuration file.  This kind of bizarre decision perpetuates PHP's
terrible backwards ecosystem.  All that said, I very much appreciate that
<Fuco1> has provided this package!  Reality strikes again.

#+begin_src emacs-lisp
(package! neon-mode)
#+end_src

**** Debugging with Xdebug and ~dap-mode~

+ ref :: <https://emacs-lsp.github.io/dap-mode/page/configuration/#php>

Requires:

+ [[https://github.com/xdebug/vscode-php-debug?tab=readme-ov-file][GitHub - xdebug/vscode-php-debug: PHP Debug Adapter for Visual Studio Code]]

#+begin_src emacs-lisp
(after! (:or php-mode phps-mode php-ts-mode)
  (when (featurep 'dap)
    (require 'dap-php)))
#+end_src

**** [[https://github.com/emacs-php/phpstan.el][emacs-php/phpstan.el]]: Provide PHPStan checks :linter:package:

#+begin_src emacs-lisp
(package! flycheck-phpstan
  (def-hook! +php-mode-load-flycheck-phpstan-h ()
    '(php-mode-hook php-ts-mode-hook)
    "Load the Flycheck checker for PHPStan in PHP buffers."
    (require 'flycheck-phpstan)))
#+end_src

#+begin_src emacs-lisp :tangle no
(package! flymake-phpstan
  (when (featurep 'flymake-flycheck)
    (add-hook 'php-mode-hook #'flymake-phpstan-turn-on)
    (after! flycheck
      (add-to-list 'flycheck-disabled-checkers 'phpstan))))
#+end_src

**** Configure formatters :formatting:
***** =ecs=

#+begin_src emacs-lisp
(after! reformatter
  (reformatter-define php-ecs-fmt
    :group 'ceamx
    :program (format "%s/vendor/bin/ecs" (getenv "PRJ_ROOT"))
    ;; XXX: Flags are very broken upstream <https://github.com/easy-coding-standard/easy-coding-standard/issues/213>
    :args `("check" "--no-ansi" "--no-progress-bar" "--no-interaction" "--quiet" "--fix" "--" ,input-file)
    :stdin nil
    :stdout nil))
#+end_src

***** =php-cs-fixer=

#+begin_src emacs-lisp
;; php-cs-fixer pretends to be a patch-output-friendly formatter, but there's no
;; way to stop it from outputting extraneous garbage.  and "--quiet" literally
;; silences everything, even the diff output.  based on similar output issues
;; with ECS (and identically-named flags), i suspect this the fault of the
;; Symfony Console library, which is unfortunately quite widely used.
(after! reformatter
  (reformatter-define php-cs-fixer-fmt
    :group 'ceamx
    :program (format "%s/vendor/bin/php-cs-fixer" (getenv "PRJ_ROOT"))
    :args `("fix" "--using-cache=no" "--sequential" "--no-interaction"
            "--" ,input-file)
    ;; FIXME: symfony/console yet again
    ;; :args `("fix" "--diff" "--using-cache=no" "--show-progress=no"
    ;;         ,(format "--config=%s/%s"
    ;;                  (getenv "PRJ_ROOT")
    ;;                  (or (and (boundp 'ceamx-php-cs-fixer-config-file-path)
    ;;                           ceamx-php-cs-fixer-config-file-path)
    ;;                      ".php-cs-fixer.php"))
    ;;         "--show-progress=none"
    ;;         "-")
    :stdin nil
    :stdout nil))
#+end_src

***** =phpcbf=

#+begin_src emacs-lisp
(defun +reformatter--phpcbf-fmt-exit-code-success-p (exit-code)
  "Handle PHPCBF non-standard exit codes."
  (or (= 0 exit-code)
      (= 1 exit-code)))

;; FIXME: phpcbf is really finicky and doesn't play nice with the usual
;; formatter standards.
;; + the exit codes are nonsense -- if there are any unfixed errors left in
;;   the file, phpcbf will still return non-zero.
;; + i wonder if the stupid exit codes mean that the patch/diff is output to
;;   stderr instead of stdout as expected by `reformatter-define'?
(after! reformatter
  (reformatter-define phpcbf-fmt
    :program (format "%s/vendor/bin/phpcbf" (getenv "PRJ_ROOT"))
    :args (list "--stdin-path" input-file
                "-q"
                "-")
    ;; XXX: apparently `:exit-code-success-p' does not really accept a lambda? maybe report upstream?
    ;; :exit-code-success-p +reformatter--phpcbf-fmt-exit-code-success-p
    ))
#+end_src

**** Projectile integration

#+begin_src emacs-lisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-directories "vendor"))
#+end_src

**** TODO ~ceamx-php-wordpress-spaghetti-template-p~: legacy theme template detection

#+begin_src emacs-lisp
;; (defconst ceamx-php-wordpress-template-names-regexp
;;   (rx))

;; (defun ceamx-php-wordpress-spaghetti-template-p (file)
;;   "Whether a file matches the pattern for a WordPress classic theme template."
;;   )
#+end_src

**** TODO Change buffer behavior based on ~ceamx-php-wordpress-spaghetti-template-p~ return value
**** Register Twig (=*.twig=) and Blade (=*.blade.php=) templates to open in ~web-mode~

#+begin_src emacs-lisp
(after! web-mode
  ;; Blade: Override the default engine in case `web-mode' is associated with the php extension by default.
  (add-to-list 'web-mode-engines-alist '("blade"  . "\\.blade\\."))
  (add-to-list 'auto-mode-alist '("\\.blade\\.php'" . web-mode))
  ;; Twig
  (add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode)))
#+end_src

**** TODO PHP enhancements from Doom

#+begin_example
;; TODO: from doom
  ;; (set-docsets! 'php-mode "PHP" "PHPUnit" "Laravel" "CakePHP" "CodeIgniter" "Doctrine_ORM")
  ;; (set-repl-handler! 'php-mode #'+php/open-repl)
  ;; (set-lookup-handlers! 'php-mode :documentation #'php-search-documentation)
  ;; (set-ligatures! 'php-mode
  ;;   ;; Functional
  ;;   :lambda "function()" :lambda "fn"
  ;;   :def "function"
  ;;   ;; Types
  ;;   :null "null"
  ;;   :true "true" :false "false"
  ;;   :int "int" :float "float"
  ;;   :str "string"
  ;;   :bool "list"
  ;;   ;; Flow
  ;;   :not "!"
  ;;   :and "&&" :and "and"
  ;;   :or "||" :or "or"
  ;;   :for "for"
  ;;   :return "return"
  ;;   :yield "use")
  #+end_example

*** Shell scripts

Make sure ~flycheck-mode~ is not enabled in shell script buffers, as
~flymake~ will handle it just fine.

#+begin_src emacs-lisp
(use-feature! emacs
  :config
  ;; Make files executable if their first line has a shebang.
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))

(after! eglot
  (add-to-list 'eglot-server-programs
      '((sh-mode bash-ts-mode) . ("bash-language-server" "start"))))

(after! sh-script
  (add-hook 'sh-mode-hook #'eglot-ensure)
  (add-hook 'bash-ts-mode-hook #'eglot-ensure)
  (add-hook 'sh-mode-hook #'flymake-mode)
  (add-hook 'bash-ts-mode-hook #'flymake-mode))
#+end_src

*** =apache-mode= :: Language support for Apache Web Server configuration files

#+begin_src emacs-lisp
(use-package apache-mode
  ;; :ensure t
  )
#+end_src

*** =just-mode= :: Language support for the Just task runner configuration files

#+begin_src emacs-lisp
(use-package just-mode
  ;;:ensure t
  )
#+end_src

*** =vimrc-mode= :: Language support for =vimrc= syntax

#+begin_src emacs-lisp
(package! vimrc-mode
  (add-to-list 'auto-mode-alist '("\\.(idea)?vim\\(rc\\)?\\'" . vimrc-mode)))
#+end_src

*** =dotenv-mode= :: Language support for Dotenv environment configuration files :package:major_mode:

- src :: <https://github.com/preetpalS/emacs-dotenv-mode>

#+begin_src emacs-lisp
(package! dotenv-mode)
#+end_src

*** Provide the ~ceamx-init-langs~ feature

#+begin_src emacs-lisp :tangle lisp/ceamx-init-langs.el :comments no
(provide 'ceamx-init-langs)
;;; ceamx-init-langs.el ends here
#+end_src

** TODO Notetaking [0/1] :notes:writing:
:PROPERTIES:
:header-args:emacs-lisp: :tangle lisp/ceamx-init-notes.el
:VISIBILITY: folded
:END:

*** Requirements

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(require 'f)

(require 'ceamx-lib)
(require 'ceamx-note)

(use-feature! ceamx-note
  :config
  ;; Ensure essential directories exist to prevent errors.
  (dolist (dir (list ceamx-note-dir ceamx-note-journal-dir))
    (f-mkdir-full-path dir)))
#+end_src

*** =consult-notes= :: provide notes as a Consult datasource :package:consult:

- website :: <https://github.com/mclear-tools/consult-notes>

#+begin_src emacs-lisp
(package! consult-notes
  (keymap-set ceamx-note-prefix-map "s" #'consult-notes)
  (keymap-global-set "M-s n" #'consult-notes))

(after! consult-notes
  (setopt consult-notes-file-dir-sources
        `(("Org" ?o ,ceamx-agenda-dir)
          ("Work" ?w ,ceamx-note-work-dir)
;;          ("Journal" ?j ,ceamx-note-journal-dir :hidden t)
          ))

  ;; (setopt consult-notes-org-headings-files
  ;;         (dolist (dir (list ceamx-note-default-dir
  ;;                            ceamx-note-work-dir))
  ;;           (append (f-entries dir (##f-ext-p % "org") t))))

  (setopt consult-notes-org-headings-files nil)

  (consult-notes-org-headings-mode 1)

  (when (locate-library "denote")
    (setopt consult-notes-denote-files-function
            (##denote-directory-files nil t t))
    (consult-notes-denote-mode 1)))
#+end_src

*** TODO Embark integration for ~consult-notes~ :embark:
#+begin_src emacs-lisp
;; via <https://github.com/mclear-tools/consult-notes#embark-support>
;; (after! (consult-notes embark)
;; 	(defun ceamx/consult-notes-embark-action (cand)
;;     "Do something with CAND."
;;     (interactive "fNote: ")
;;     ;; FIXME: needs function
;;     ;;
;;     ;; > Note that Embark will run on the CAND at point, which will often return
;;     ;; > either a file name, or a file name plus other annotations, depending on
;;     ;; > what your sources are. So you’ll have to write a function to manipulate
;;     ;; > CAND to give you a viable path to the file or a directory containing
;;     ;; > the file.
;;     (my-function))

;;   (defvar-keymap consult-notes-map
;;     :doc "Keymap for Embark notes actions."
;;     :parent embark-file-map
;;     "m" #'ceamx/consult-notes-embark-action)

;;   (add-to-list 'embark-keymap-alist `(,consult-notes-category . consult-notes-map))

;;   ;; Make `embark-export' use dired for notes.
;;   (setf (alist-get consult-notes-category embark-exporters-alist) #'embark-export-dired))
#+end_src

*** Denote (denote.el)
:PROPERTIES:
:ID:       7b776331-4757-4a87-94e5-beddb632b3d7
:END:

- website :: <https://protesilaos.com/emacs/denote>

#+begin_src emacs-lisp
(package! denote
  (require 'denote)

  (add-hook 'find-file-hook #'denote-fontify-links-mode-maybe)
  (after! dired
    (add-hook 'dired-mode-hook #'denote-dired-mode))
  (after! mouse
    (add-hook 'context-menu-functions #'denote-context-menu))

  (define-keymap :keymap ceamx-capture-prefix-map
    ;; TODO: <https://protesilaos.com/emacs/denote#text-h:eb72086e-05be-4ae3-af51-7616999fc7c9>
    "r" #'denote-region)

  (define-keymap :keymap ceamx-note-prefix-map
    "n" #'denote
    "d" #'denote-sort-dired
    "r" #'denote-rename-file
    "R" #'denote-rename-file-using-front-matter)

  (keymap-set ceamx-region-prefix-map "n" #'denote-region)

  (after! dired
    (define-keymap :keymap dired-mode-map
      "C-c C-d C-i" #'denote-link-dired-marked-notes
      "C-c C-d C-r" #'denote-dired-rename-files
      "C-c C-d C-k" #'denote-dired-rename-marked-files-with-keywords
      "C-c C-d C-R" #'denote-dired-rename-marked-files-using-front-matter))
  (after! org
    (define-keymap :keymap org-mode-map
      "C-c n h" #'denote-org-extras-extract-org-subtree
      "C-c n l" #'denote-link
      "C-c n L" #'denote-add-links
      "C-c n b" #'denote-backlinks)))

(after! denote
  (setopt denote-directory ceamx-note-default-dir)
  (setopt denote-excluded-directories-regexp "\\.archive")
  (setopt denote-dired-directories
          (list denote-directory
                (thread-last denote-directory
                             (expand-file-name "attachments"))))

  (setopt denote-save-buffers nil)
  (setopt denote-infer-keywords t
          denote-sort-keywords t)
  (setopt denote-known-keywords
          '("emacs"
            "philosophy"
            "correspondence"
            "language"
            "jobwork"
            "journal"))
  (setopt denote-prompts '(title keywords))
  (setopt denote-org-capture-specifiers "%l\n%i\n%?")
  (setopt denote-date-prompt-use-org-read-date t)
  (setopt denote-backlinks-show-context t)

  ;; Auto-rename Denote buffers with `denote-rename-buffer-format'.
  (setopt denote-rename-confirmations '(modify-file-name
                                        rewrite-front-matter))
  (denote-rename-buffer-mode 1))
#+end_src

*** Define Denote silos for isolated note environments

#+begin_src emacs-lisp
(after! denote
  (require 'denote-silo-extras)

  (setopt denote-silo-extras-directories
          (list ceamx-note-journal-dir
                ceamx-note-work-dir)))

(use-feature! ceamx-note
  :after denote
  :commands (ceamx-note/denote/pick-silo-then-command))
#+end_src

*** Use Denote for journalling
:PROPERTIES:
:ID:       f3ca818f-38d5-4c8c-a8d4-d02d9250319d
:END:

#+begin_src emacs-lisp
(defun ceamx-note/create-or-visit-journal-entry ()
  "Invoke `denote-journal-extras-new-or-existing-entry' scoped to the
 Journal silo."
  (interactive)
  (let ((denote-directory ceamx-note-journal-dir))
    (call-interactively #'denote-journal-extras-new-or-existing-entry)))

(after! denote
  (require 'denote-journal-extras)

  (setopt denote-journal-extras-directory ceamx-note-journal-dir)
  (setopt denote-journal-extras-keyword '("journal")))
#+end_src

*** =consult-denote= :: enchance Denote with Consult features

+ Website :: <https://protesilaos.com/emacs/consult-denote>

#+begin_src emacs-lisp
(package! consult-denote
  (define-keymap :keymap ceamx-note-prefix-map
    "f f" #'consult-denote-find
    "g" #'consult-denote-grep)

  (consult-denote-mode 1))
#+end_src

*** Provide the ~ceamx-init-notes~ feature

#+begin_src emacs-lisp
(provide 'ceamx-init-notes)
;;; ceamx-init-notes.el ends here
#+end_src

** Org-Mode :org:
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-org.el
:VISIBILITY: folded
:ID:       9f19a792-41ba-4732-90bd-021e0ae609ab
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :comments no
;; -*- lexical-binding: t -*-

(require 'f)

(require 'ceamx-lib)
(require 'ceamx-note)
#+end_src

*** Set up essential files & directories :paths:
:PROPERTIES:
:ID:       784a1877-2d7e-4c1b-9988-b35bd4ea825a
:END:

These must be set before loading Org-Mode or any of its sub-features
are used.

Most notes will be stored in ~ceamx-notes-dir~, defined in ~ceamx-paths~.

Because these directories are managed by Syncthing, creating them
automatically is not a great idea if they do not already exist.  A
better workaround to the issue of Org-Mode failing to load might be
setting the default target to a subdirectory of ~user-emacs-directory~.

Why?  Because you do not want to end up with two Syncthing entries
with the same intended target path but with different IDs.  If
Syncthing is not set up yet, then any directory created via the Emacs
configuration will probably result in a conflict when Syncthing tries
to take control of these paths.

#+begin_src emacs-lisp
(defcustom ceamx-agenda-dir
  (file-name-as-directory (concat ceamx-note-dir "g2d"))
  "Base directory for Org-Agenda."
  :type 'directory
  :group 'ceamx)

(defcustom ceamx-default-agenda-files
  (file-expand-wildcards (file-name-concat ceamx-agenda-dir "*.org"))
  "List of absolute paths of all files to include in the agenda."
  :type '(file)
  :group 'ceamx)

(defcustom ceamx-default-todo-file
  (expand-file-name "todo.org" ceamx-agenda-dir)
  "Absolute path to default Something-Doing file."
  :type 'file
  :group 'ceamx)
#+end_src

The value of ~org-directory~ will be used as a default destination for
new notes, especially as they relate to tasks and agendas.  For that
reason, use the ~ceamx-agenda-dir~.

#+BEGIN_SRC emacs-lisp
(progn
  (defvar org-directory ceamx-agenda-dir)
  (make-directory org-directory t))

(setopt org-agenda-files ceamx-default-agenda-files)
#+END_SRC

*** Baseline Org-Mode customizations
:PROPERTIES:
:ID:       8b25886e-a1cd-44de-9a78-6a79720ea5d2
:END:

#+begin_src emacs-lisp
(after! org
  (setopt org-blank-before-new-entry '((heading . auto)
                                       (plain-list-item . nil)))

  ;;
  ;; Links & IDs

  (setopt org-link-context-for-files t)
  (setopt org-link-keep-stored-after-insertion nil)
  (setopt org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  (setopt org-clone-delete-id t)
  (setopt org-id-search-archives nil)
  ;; Ensure IDs for bookmarked headings within `ceamx-note-dir'.
  ;; FIXME: This is nice, but ~dogears~ (or something else that uses
  ;; bookmarks for locations) makes just about /every/ heading a bookmark.
  ;; (setopt org-bookmark-heading-make-ids
  ;;         (lambda ()
  ;;           (when-let* ((buffer-file-name
  ;;                        (or (buffer-file-name)
  ;;                            (when (buffer-base-buffer)
  ;;                              (buffer-file-name (buffer-base-buffer))))))
  ;;             (file-in-directory-p buffer-file-name ceamx-note-dir))))
  (setopt org-bookmark-heading-make-ids nil)

  ;;
  ;; Editing

  (setopt org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-special-ctrl-o t
          org-ctrl-k-protect-subtree t)
  (setopt org-reverse-note-order nil)
  (setopt org-list-use-circular-motion t)

  (setopt org-M-RET-may-split-line '((default . nil))
          ;; Invoke `org-insert-heading-respect-content' directly with
          ;; [C-<return>], but let `org-insert-heading' ([M-<return>])
          ;; insert a heading wherever.
          org-insert-heading-respect-content nil)
  (keymap-set org-mode-map "C-M-<return>" #'org-insert-subheading)
  (keymap-set org-mode-map "C-M-S-<return>" #'org-insert-todo-subheading)

  ;;
  ;; Tags

  (setopt org-auto-align-tags nil
          org-tags-column 0)

  ;;
  ;; Folding

  (setopt org-cycle-emulate-tab t)
  (setopt org-startup-folded 'content)
  (setopt org-fold-catch-invisible-edits 'show-and-error)

  ;;
  ;; Priority

  (setopt org-priority-start-cycle-with-default nil)

  ;;
  ;; Workflow states

  (setopt org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t)

  (setopt org-todo-keywords '((sequence
                               "TODO(t)"
                               "INPRG(i@/!)"
                               "BLOCKED(b@)"
                               "HOLD(h@)"
                               "PROJ(p)"
                               "|"
                               "DONE(d!)"
                               "CANCELLED(x@/!)")))

  ;;
  ;; Clocking

  (setopt org-clock-in-switch-to-state "INPRG")

  ;;
  ;; Logging

  (setopt org-log-done 'time
          org-log-redeadline 'time
          org-log-refile 'time)
  (setopt org-log-into-drawer t)
  (setopt org-log-states-order-reversed nil)
  (setopt org-log-note-clock-out nil)

  ;;
  ;; Rich media & attachments

  (setopt org-image-actual-width 480)
  (setopt org-startup-with-inline-images t)

  ;;
  ;; Miscellaneous

  (setopt org-structure-template-alist
          '(("s" . "src")
            ("e" . "src emacs-lisp")
            ("E" . "src emacs-lisp :results value code :lexical t")
            ("t" . "src emacs-lisp :tangle FILENAME")
            ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
            ("x" . "example")
            ("X" . "export")
            ("q" . "quote"))))
#+end_src

*** Enforce the correct ~tab-width~ to prevent errors :hack:formatting:

<https://github.com/doomemacs/doomemacs/commit/43870bf8318f6471c4ce5e14565c9f0a3fb6e368>

#+BEGIN_SRC emacs-lisp
(defun +org-mode--local-set-tab-width-h ()
  "Set the `tab-width' in `org-mode' buffers to 8 columns.
Any `tab-width' value other than 8 will result in an error.

This should be set as late as possible, after all other
`org-mode-hook' functions added by packages and
configurations.  Hence the use of `after-change-major-mode-hook',
which runs at the very end of major-mode activation.

Intended for use as a local hook function on
`after-change-major-mode-hook' as added within `org-mode-hook'."

  ;; This check is necessary to handle, for example, `org-edit-src-code', which
  ;; clones the `org-mode' buffer and changes its major-mode.
  (when (derived-mode-p 'org-mode)
    (setq tab-width 8)))

(def-hook! +org-mode-enforce-tab-width-h ()
  'org-mode-hook
  "Add a local hook to control `tab-width' on `after-change-major-mode-hook'."
  (add-hook 'after-change-major-mode-hook #'+org-mode--local-set-tab-width-h 0 t))
#+END_SRC

*** Appearance
:PROPERTIES:
:ID:       98afad65-f479-4b70-96ea-7da504ea11b8
:END:

+ Package :: <https://github.com/minad/org-modern>
+ Package :: <https://github.com/awth13/org-appear>

#+begin_src emacs-lisp
(package! org-modern
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
  (after! org
    (keymap-set org-mode-map "C-c t p" #'org-modern-mode))
  (after! org-agenda
    (keymap-set org-agenda-mode-map "C-c t p" #'org-modern-mode)))

(package! org-appear
  (add-hook 'org-mode-hook #'org-appear-mode))

(after! org
  (add-hook 'org-mode-hook #'prettify-symbols-mode)

  (setopt org-auto-align-tags nil
          org-tags-column 0
          org-agenda-tags-column 0)
  (setopt org-pretty-entities t
          org-pretty-entities-include-sub-superscripts nil)
  (setopt org-indent-indentation-per-level 2
          org-startup-indented nil)
  (setopt org-src-fontify-natively t)
  ;; TODO: show markers for bold and italic, hide everything else
  (setopt org-hide-emphasis-markers t)
  (setopt org-link-descriptive t)
;;  (setopt org-ellipsis " ⇢")            ; prefix is nbsp

  ;; Bring attention when point is on `org-ellipsis'.
  ;; FIXME: not correct
  (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))

(after! org-modern
  (setopt org-modern-star 'replace))

(after! org-appear
  (setopt org-appear-autoemphasis t
          org-appear-autolinks t
          org-appear-autosubmarkers t
          org-appear-autoentities t
          org-appear-autokeywords t
          org-appear-inside-latex t)
  (setopt org-appear-delay 0.25)
  (setopt org-appear-trigger 'always))
#+end_src

*** Appearance: Create the effect of visual indentation

~org-modern~ is incompatible with Org indentation.  But we can pretend.

#+begin_src emacs-lisp
(after! org-modern
  ;; Emulate "indentation" by replacing leading stars with whitespace.
  ;; One space will replace one star.  Additional spaces will appear
  ;; as whitespace, creating the effect of visual indentation.
  (setopt org-modern-hide-stars (string-pad " " org-indent-indentation-per-level)))
#+end_src

*** Appearance: Display visual feedback after actions

- Source :: <https://github.com/protesilaos/dotfiles/blob/4d4e82fc63dd74971a7bf7895e4e0e24c3d446da/emacs/.emacs.d/prot-emacs-modules/prot-emacs-org.el#L112-L115>

#+begin_src emacs-lisp
(after! (org pulsar)
  (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
    (add-hook hook #'pulsar-recenter-center)
    (add-hook hook #'pulsar-reveal-entry)))
#+end_src

*** =doct= :: a template engine for ~org-capture~
:PROPERTIES:
:ID:       e4505731-723d-4e2b-b21b-3925bc7b73d4
:END:

- Source code :: <https://github.com/progfolio/doct>

#+BEGIN_SRC emacs-lisp
(package! doct
  (require 'doct))
#+END_SRC

*** =org-ql= :: a query-builder for ~org-mode~ elements
:PROPERTIES:
:ID:       763286d7-b5f7-4a56-b3f6-56c677a917b9
:END:

- Source code :: <https://github.com/alphapapa/org-ql>

#+BEGIN_SRC emacs-lisp
(use-package org-ql
  ;; :ensure t
  )
#+END_SRC

*** =org-node= :: a lightweight intertwingler
:PROPERTIES:
:ID:       beb57c33-d2e4-491f-8792-a9327a097a72
:END:

+ Package :: <https://github.com/meedstrom/org-node>

#+begin_src emacs-lisp
(package! org-node
  (keymap-global-set "M-s M-f" #'org-node-find)
  (keymap-global-set "C-c i n" #'org-node-insert-link)
  (after! org-mode
    (keymap-set org-mode-map "M-s M-i" #'org-node-insert-link)))

(after! org-node
  (setopt org-node-extra-id-dirs (list ceamx-agenda-dir))

  (add-to-list 'org-node-extra-id-dirs-exclude ceamx-note-journal-dir)

  (org-node-backlink-mode)
  (org-node-cache-mode))
#+end_src

*** =org-contrib= :: a library of unmaintained community packages

- Website :: <https://orgmode.org/worg/org-contrib/>

#+begin_src emacs-lisp
(use-package org-contrib
  ;; :ensure t
  :after (org)

  :init
  (require 'org-checklist)
  (require 'org-choose)
  (add-to-list 'org-modules 'org-checklist)
  (add-to-list 'org-modules 'org-choose))
#+end_src

*** Navigation & Refiling

#+begin_src emacs-lisp
(defvar ceamx-org-outline-search-max-level 5)

(after! org
  (setopt org-imenu-depth ceamx-org-outline-search-max-level))

(after! org-goto
  (setopt org-goto-interface 'outline-path-completion
          org-goto-max-level ceamx-org-outline-search-max-level))

(after! org-refile
  (setopt org-outline-path-complete-in-steps nil)

  (setopt org-refile-use-outline-path 'file)
  (setopt org-refile-allow-creating-parent-nodes 'confirm)
  (setopt org-refile-use-cache nil)

  (setopt org-refile-targets `((,ceamx-default-todo-file . (:level . 1))
                               ;; (org-agenda-files . (:maxlevel . 1))
                               (nil . (:maxlevel . ,ceamx-org-outline-search-max-level))))

  ;; TODO: how to accept any value of `:maxlevel'?
  (add-to-list 'safe-local-variable-values
      '(org-refile-targets (nil :maxlevel . 4)))
  (add-to-list 'safe-local-variable-values
      '(org-refile-targets (nil :maxlevel . 6))))
#+end_src

*** Customize the ~org-navigation-repeat-map~ :keybinds:
:PROPERTIES:
:ID:       54dac9eb-ec7c-4e08-be8c-200068787fa7
:END:

I find myself accidentally exiting out of this repeat map immediately
because I instinctively want to continue pressing the final key in the
original command that triggered the repeat map.  For example, if I
press [C-c C-n] for ~org-next-visible-heading~, I want to continue
pressing [C-n] to repeat the command.  I thought there was a setting
for this behavior, but neither ~repeat-keep-prefix~ or ~repeat-check-key~
seem to have an effect.

#+begin_src emacs-lisp
(after! org
  (define-keymap :keymap org-navigation-repeat-map
    "C-b" #'org-backward-heading-same-level
    "C-f" #'org-forward-heading-same-level
    "C-n" #'org-next-visible-heading
    "C-p" #'org-previous-visible-heading
    "C-u" #'org-up-heading))
#+end_src

*** Set up Org-Capture
:PROPERTIES:
:ID:       c9f35626-6cec-46eb-a140-50be234d55da
:END:

The ~org-capture-templates~ are defined in the [[id:d7334fe7-a7a2-423e-8e3b-fca7c45af07e][Org-Capture templates]]
section.

*** Archiving

#+begin_src emacs-lisp
(after! org-archive
  (setopt org-archive-save-context-info
          '(time file category todo itags olpath ltags)))
#+end_src

*** TODO Refiling: Append not prepend when working on Ceamx config
*** Agenda
:PROPERTIES:
:ID:       ad92ea31-8411-4ba4-b179-cf66e34a016c
:END:

#+BEGIN_SRC emacs-lisp
(use-feature! org-agenda
  :bind ( ("C-c a" . #'org-agenda)
          :map ceamx-launch-prefix
          ("a" . #'org-agenda))

  :config
  (setopt org-agenda-tags-column 0)
  (setopt org-agenda-block-separator ?─)
  (setopt org-agenda-time-grid
          '((daily today require-timed)
            (800 1000 1200 1400 1600 1800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (setopt org-agenda-current-time-string
          "⭠ now ─────────────────────────────────────────────────"))
#+END_SRC

*** =org-super-agenda= :: enchanted groupings for Org-Agenda
:PROPERTIES:
:ID:       6438e6e9-5052-403d-8c23-a1ee8daf0ec2
:END:

The agenda groups are declared in [[id:815ead58-41ac-406b-b1fe-4d6c4c838617][Thee Something-Doing Flow → Org-Agenda groups]]

#+BEGIN_SRC emacs-lisp
(package! org-super-agenda)
#+END_SRC

*** Literate programming

#+BEGIN_SRC emacs-lisp
(after! org-src
  ;; Changing the indentation of source code is unhelpful and destructive.
  (setopt org-edit-src-content-indentation 0)

  (setopt org-edit-src-persistent-message nil)
  (setopt org-src-ask-before-returning-to-edit-buffer nil)
  (setopt org-src-preserve-indentation t)
  (setopt org-src-tab-acts-natively t)

  ;; TODO: current window when narrow/short frame, but otherwise reorganize-frame is good
  ;; (setopt org-src-window-setup 'other-window)
  (setopt org-src-window-setup 'current-window))

(after! org
  ;; Ensure common languages are loaded.
  (setopt org-babel-load-languages '((emacs-lisp . t)
                                     (shell . t)
                                     (sql . t))))
#+END_SRC

*** Org-Babel: Load other supported languages on-demand during execution

+ source :: <https://github.com/Icy-Thought/emacs.d/blob/e9c75d87bf61c456b26332787cde27bdfc188830/config.org#org-babel-language-on-demand>

#+begin_src emacs-lisp
(after! ob-core
  (def-advice! +org-babel-load-language-on-demand-a (orig-fun &rest args)
    :around #'org-babel-execute-src-block
    "Load language if needed before executing a source block."
    (let ((language (org-element-property :language (org-element-at-point))))
      (unless (cdr (assoc (intern language) org-babel-load-languages))
        (add-to-list 'org-babel-load-languages (cons (intern language) t))
        (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
      (apply orig-fun args))))
#+end_src

*** TODO Provide commands to archive DONE tasks
:PROPERTIES:
:ID:       2b459993-8258-4128-adc7-c5025def759c
:END:

| Author | Sacha Chua                                                                                 |
| URL    | <https://pages.sachachua.com/.emacs.d/Sacha.html#quick-way-to-archive-all-done-from-inbox> |

I don't think this is working properly...

#+begin_src emacs-lisp :tangle no
(require 'ceamx-paths)

(defun ceamx/org-clean-up-inbox ()
  "Archive all DONE tasks and sort the remainder by TODO order."
  (interactive)
  (with-current-buffer (find-file ceamx-default-todo-file)
    (ceamx/org-archive-done-tasks 'file)
    (goto-char (point-min))
    (if (org-at-heading-p) (save-excursion (insert "\n")))
    (org-sort-entries nil ?p)
    (goto-char (point-min))
    (org-sort-entries nil ?o)
    (save-buffer)))

(defun ceamx/org-archive-done-tasks (&optional scope)
  "Archive finished or cancelled tasks.
       SCOPE can be 'file or 'tree."
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "TODO=\"DONE\"|TODO=\"CANCELLED\""
   (or scope (if (org-before-first-heading-p) 'file 'tree))))
#+end_src

*** =org-download= :: support dragging-and-dropping images into Org buffers :media:network:package:

<https://github.com/abo-abo/org-download>

#+BEGIN_SRC emacs-lisp
(package! org-download
  (require 'org-download)
  (add-hook 'dired-mode-hook #'org-download-enable))
#+END_SRC

*** =org-web-tools= :: view, capture, and archive webpages in org-mode :package:network:web:
:PROPERTIES:
:ID:       17850df6-1729-4b2b-8fc5-62f4b377c2a7
:END:

#+BEGIN_SRC emacs-lisp
(package! org-web-tools
  (keymap-set org-mode-map "C-c i l" #'org-web-tools-insert-link-for-url))
#+END_SRC

*** =org-sidebar= :: provide a sidebar for Org buffers :package:

<https://github.com/alphapapa/org-sidebar>

#+BEGIN_SRC emacs-lisp
(package! org-sidebar)
#+END_SRC

*** =org-bookmark-heading= :: Support heading bookmarks :bookmarks:package:
:PROPERTIES:
:ID:       cd3ef5ab-e573-43e9-b1f7-81eb6dade0a9
:END:

#+begin_src emacs-lisp
(package! org-bookmark-heading
  (after! org
    (require 'org-bookmark-heading)))

(after! org-bookmark-heading
  (setopt org-bookmark-heading-make-ids t
          org-bookmark-heading-jump-indirect nil))
#+end_src

*** =org-remark= :: annotate documents with Org-Mode

#+begin_src emacs-lisp
(package! org-remark)
#+end_src

*** Exporters
**** =ox-gfm= :: org-export to GitHub Flavored Markdown (GFM) :package:
:PROPERTIES:
:ID:       e6aaf439-cfd5-4ed7-8d54-23aaec181b6f
:END:

#+begin_src emacs-lisp
(package! ox-gfm
  (after! org
    (require 'ox-gfm))

  (add-to-list 'safe-local-variable-values
      '(eval add-hook 'after-save-hook #'org-gfm-export-to-markdown t t)))
#+end_src

*** =auto-tangle-mode= :: a minor-mode to automatically tangle Org files
:PROPERTIES:
:ID:       b4f86eda-af4d-405c-bbe1-395fd6f14ddf
:END:

#+BEGIN_SRC emacs-lisp
(package! (auto-tangle-mode
           :host github
           :repo "progfolio/auto-tangle-mode.el"))
#+END_SRC

*** TODO Org-Mode: electric-pair for equals-sign and tilde
*** Footer: Provide the =ceamx-init-org= feature

#+begin_src emacs-lisp :tangle lisp/ceamx-init-org.el :comments no
(provide 'ceamx-init-org)
;;; ceamx-init-org.el ends here
#+end_src

** TODO Printing
:PROPERTIES:
:VISIBILITY: folded
:ID:       22d5396b-cd38-47c0-b299-d7d560d052b7
:header-args:emacs-lisp: :tangle lisp/ceamx-init-printing.el
:END:

Printing is very broken right now and I haven’t tried in a while.

#+begin_src emacs-lisp :tangle lisp/ceamx-init-printing.el :comments no
;; -*- lexical-binding: t; -*-

(require 'ceamx-lib)

(use-feature! printing
  :defer 10
  :commands (pr-update-menus)
  :config
  ;; EPSON WF-3520
  (setopt printer-name "LABORTTY")
  ;; (setopt lpr-switches '())
  (pr-update-menus))

(provide 'ceamx-init-printing)
;;; ceamx-init-printing.el ends here
#+end_src

** Newsreader
:PROPERTIES:
:VISIBILITY: folded
:ID:       c2cb4b34-da9c-42d7-b603-92ef6a0121f7
:header-args:emacs-lisp: :tangle lisp/ceamx-init-news.el
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:ID:       f2baf249-16c1-408e-a07a-a6a1e7be7ece
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-news.el :comments no
;;  -*- lexical-binding: t; -*-

(require 'ceamx-paths)
#+end_src

*** =elfeed= :: an improved feed reader
:PROPERTIES:
:ID:       eb9bac6b-bcc1-4eba-a921-adaf4a93273b
:END:

Filter prefixes:

+ =+= :: AND Tag
+ =-= :: NOT Tag
+ =@= :: Age or date range.  Accepts plain English separated by dashes.
  Note that age filters improve performance of database lookups.
  + Examples
    + =@2-years-old= :: Filter items older than 2 years ago e.g. if 2025
      now, then items from 2023 or later.
    + =@2-weeks-ago= :: Filter items older than 2 weeks
    + =@2025-01-01= :: Filter items older than date
    + =@5-days-ago--1-day-ago= :: Filter items not in range, where range
      is indicated by double-dashes
+ =!= :: Filter out items matching regular expression.
+ === :: Include only items whose feed title or URL match regular
  expression.  Results will match =ANY= such component.
+ =~= :: Exclude items whose feed title or URL match regular expression
  (reverse of === prefix).  Results will match =ANY= such component.
+ =#= :: Limit to number of items following prefix
+ All other components are treated as a regular expression for feed
  title or URL.  Results will match =ALL= such components.

Examples:

+ =@6-months-ago +unread= :: Only show unread entries from the past six
  months.  This is the default filter.
+ =linu[xs] @1-year-old= :: Only show entries about Linux or some person
  whose name is Linus from the past year.
+ =-unread +video +music #10= :: Only show 10 of the most recent and
  previously-read entries tagged with =video= and =music=.
+ =+emacs =https://youtube.com= :: Only show entries from YouTube tagged as =emacs=

The feed list is set up with =elfeed-org= and should live at
=~/Documents/reading/feeds/index.org=.

#+begin_src emacs-lisp
(package! elfeed
  (keymap-set ceamx-launch-prefix "f" #'elfeed)

  (after! elfeed
    (require 'ceamx-news)

    (make-directory elfeed-db-directory t)

    (setopt elfeed-search-filter "@1-week-ago +unread")
    (setopt elfeed-show-entry-switch #'pop-to-buffer
            elfeed-show-entry-delete #'ceamx-news/delete-pane))

  (after! popper
    (add-to-list 'popper-reference-buffers "^\\*elfeed-entry")))

(package! elfeed-goodies
  (after! elfeed
    (require 'elfeed-goodies)
    (elfeed-goodies/setup))
  ;; (after! elfeed-goodies
  ;;   )
  )
#+end_src

*** =elfeed-org= :: organize =elfeed= subscriptions via Org-Mode
:PROPERTIES:
:ID:       5d6d2565-5591-40f9-bd2b-6d5493dae613
:END:

#+begin_src emacs-lisp
(package! elfeed-org
  ;; HACK: Must be set prior to feature load.
  ;; <https://github.com/doomemacs/doomemacs/blob/2bc052425ca45a41532be0648ebd976d1bd2e6c1/modules/app/rss/config.el#L74-L75>
  (setq rmh-elfeed-org-files
        (list (file-name-concat ceamx-reading-feed-dir "index.org")))

  (after! elfeed
    (require 'elfeed-org)
    (elfeed-org)))
#+end_src

*** =elfeed-tube= :: enhance the =elfeed= video experience
:PROPERTIES:
:ID:       d8d28c05-a2b3-42a0-96cd-84400584b4eb
:END:

#+begin_src emacs-lisp
(package! elfeed-tube
  (after! elfeed
    (require 'elfeed-tube)
    (keymap-set elfeed-show-mode-map "F" #'elfeed-tube-fetch)
    (keymap-set elfeed-show-mode-map "<remap> <save-buffer>" #'elfeed-tube-save)
    (keymap-set elfeed-search-mode-map "F" #'elfeed-tube-fetch)
    (keymap-set elfeed-search-mode-map "<remap> <save-buffer>" #'elfeed-tube-save))
  (after! elfeed-tube
    (setopt elfeed-tube-auto-save-p nil
            elfeed-tube-auto-fetch-p t)
    (elfeed-tube-setup)))

(package! elfeed-tube-mpv
  (after! elfeed
    (keymap-set elfeed-show-mode-map "C-c C-f" #'elfeed-tube-mpv-follow-mode)
    (keymap-set elfeed-show-mode-map "C-c C-w" #'elfeed-tube-mpv-where)))
#+end_src

*** =elfeed-score= :: provide Gnus-style scoring for =elfeed=
:PROPERTIES:
:ID:       f1a262e4-0274-4f5a-b8b5-f8952d7523ab
:END:

I wonder if there is a way to export NewsBlur scoring to this format…

#+begin_src emacs-lisp
(package! elfeed-score
  (after! elfeed
    (elfeed-score-enable))
  (after! elfeed-score
    ;; <https://www.unwoundstack.com/doc/elfeed-score/curr>
    (setopt elfeed-score-serde-score-file
            (file-name-concat ceamx-reading-feed-dir "elfeed-scores.eld")))
  (after! (elfeed elfeed-score)
    (keymap-set elfeed-search-mode-map "=" elfeed-score-map)))
#+end_src

*** Provide the ~ceamx-init-news~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-news.el :comments no
(provide 'ceamx-init-news)
;;; ceamx-init-news.el ends here
#+end_src

** TODO Mail
:PROPERTIES:
:ID:       393bf925-aa13-4076-a3e9-dff923664711
:END:

** Web Browsing :web:
:PROPERTIES:
:VISIBILITY: folded
:ID:       bbd80e03-694c-4f5b-ab31-336fd2afd963
:header-args:emacs-lisp: :tangle lisp/ceamx-init-eww.el
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:ID:       c5bfe32a-b89a-492a-bc83-e61f6cb6a23d
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-eww.el :comments no
;; -*- lexical-binding: t; -*-

(require 'ceamx-lib)
#+end_src

*** Tell Emacs we want its Web Wowser to handle URL browsing by default
:PROPERTIES:
:ID:       e9e1a28b-8fee-4dfd-83ad-52421155f652
:END:

#+begin_src emacs-lisp
(setopt browse-url-browser-function 'eww-browse-url)
#+end_src

*** TODO Use a different browser for some domains
*** Configure EWW
:PROPERTIES:
:ID:       15ef1788-7ded-42e9-8109-019b4e6bb03b
:END:

#+begin_src emacs-lisp
(setopt shr-use-colors t)
(setopt shr-folding-mode t)
(setopt shr-bullet "• ")

(setopt eww-search-prefix "https://duckduckgo.com/html?q=")

;; HTTP headers may contain user information, which we can limit as needed.
;; When providing a list of symbols, the symbols indicate what NOT to send.
;; TODO: Move this elsewhere, as it probably affects other HTTP requests.
(setopt url-privacy-level '(email lastloc))

(keymap-set ceamx-launch-prefix "b" #'eww)
(keymap-set ceamx-launch-prefix "W" #'ceamx/eww-wiki)

(after! eww
  (define-keymap :keymap eww-mode-map
    "," '("scroll down" . scroll-up-command)
    "." '("scroll up" . scroll-down-command)
    "o" '("open link" . link-hint-open-link)))
#+end_src

*** Cleanup the rendering of some pages
:PROPERTIES:
:ID:       2fa70c64-7584-4a88-8a74-b3345bb3de3d
:END:

#+begin_src emacs-lisp
(use-feature! ceamx-eww
  :after eww
  :functions (ceamx-eww-rerender)
  :init
  (add-hook 'eww-after-render-hook #'ceamx-eww-rerender))
#+end_src

*** Provide the ~ceamx-init-eww~ feature
:PROPERTIES:
:ID:       5632344a-8c09-47e7-960d-92fdf3bbd64b
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-eww.el :comments no
(provide 'ceamx-init-eww)
;;; ceamx-init-eww.el ends here
#+end_src

** Tools
:PROPERTIES:
:header-args: :tangle lisp/ceamx-init-tools.el
:VISIBILITY: folded
:ID:       4b709806-6aa9-4191-a7c7-db7fe79c2ed3
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:ID:       709b1092-1de6-43f6-bbb9-3aa15b496f49
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-tools.el :comments no
;; -*- lexical-binding: t;  -*-

(require 'ceamx-lib)
(require 'seq)
#+end_src

*** Set up ~eshell~, the Emacs-Lisp shell

#+begin_src emacs-lisp
(after! eshell
  (setopt eshell-scroll-to-bottom-on-input 'this))
#+end_src

*** =eat= :: [E]mulate [A] [T]erminal
:PROPERTIES:
:ID:       cafaa1b0-d633-4e7e-b470-6dbfd534c35f
:END:

+ Package :: <https://codeberg.org/akib/emacs-eat/>

  #+begin_src emacs-lisp
(package! eat
  (keymap-set ceamx-launch-prefix "t" #'eat)

  (after! eshell
    (add-hook 'eshell-load-hook #'eat-eshell-mode)
    (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode))
  (after! popper
    (setopt popper-reference-buffers
            (append popper-reference-buffers '("\\*eat\\*")))))
#+end_src

*** [[https://joostkremers.github.io/pandoc-mode/][Pandoc-mode]]: filetype conversion multitool

#+begin_src emacs-lisp
(package! pandoc-mode
  (add-hook 'markdown-mode-hook #'pandoc-mode)

  (add-hook 'pandoc-mode-hook #'pandoc-load-default-settings))
#+end_src

*** =verb= :: organize and send http requests

+ Package :: https://github.com/federicotdn/verb

#+begin_src emacs-lisp
(package! verb
  (after! org
    ;; FIXME: is there a better way to bind `verb-command-map', the
    ;; primary entrypoint?
    ;; (defer! 2
    ;;   (require 'verb))
    (keymap-set org-mode-map "C-c C-r" verb-command-map) ; orig. `org-fold-reveal'
    ))
#+end_src

*** [[https://github.com/hniksic/emacs-htmlize][hniksic/emacs-htmlize]]: Convert buffer text and decorations to HTML

#+begin_src emacs-lisp
(package! htmlize
  ;; FIXME: conflicts with `beframe'
  ;; (keymap-global-set "C-c b h" #'htmlize-buffer)
  )
#+end_src
*** [[https://github.com/alphapapa/unpackaged.el][alphapapa/unpackaged.el]]: a library of useful yet "unsubstantial" Emacs Lisp code

#+begin_src emacs-lisp
(package! (unpackaged :host github :repo "alphapapa/unpackaged.el"))
#+end_src

*** =mugur=: a configurator for QMK keyboards

#+begin_src emacs-lisp
(package! mugur)
#+end_src

*** =free-keys=: Show free keybindings for modkeys or prefixes

+ Package :: <https://github.com/Fuco1/free-keys>

#+begin_src emacs-lisp
(package! free-keys)
#+end_src

*** =help-find= :: introspect keybindings

#+begin_src emacs-lisp
(package! help-find
  (define-keymap :keymap help-map
    "K b" #'help-find-keybinding
    "K f" #'help-find-function))
#+end_src

*** =uuidgen=: Generate and insert UUIDs
:PROPERTIES:
:ID:       48fbfb99-55c9-44db-a342-2c9fe847e85e
:END:

#+begin_src emacs-lisp
(package! uuidgen
  (define-keymap :keymap ceamx-insert-prefix
    "U" (cons "uuid" (define-prefix-command 'ceamx-insert-uuid-prefix))
    "U 1" #'uuidgen-1
    "U 3" #'uuidgen-3
    "U 4" #'uuidgen-4
    "U 5" #'uuidgen-5))
#+end_src

*** Augementated Intelligentry (AI)

Providing integrations with LLMs and other simulation machines.

M is not eager to board the train bound for Hype City.

*** Personal Finance with =hledger=

- Website :: <https://hledger.org/>
- Docs :: <https://hledger.org/1.30/hledger.html#journal>
- Package :: <https://github.com/narendraj9/hledger-mode>

**** Define important feature paths :paths:
:PROPERTIES:
:ID:       6af77ff1-5d06-41c8-bedf-f123ae532989
:END:

#+begin_src emacs-lisp
(defconst ceamx-ledger-dir (expand-file-name "~/ledger"))
(defconst ceamx-ledger-main-journal-file (file-name-concat ceamx-ledger-dir "main.journal"))
#+end_src

**** Install ~hledger-mode~ :package:

#+begin_src emacs-lisp
(require 'ceamx-paths)

(package! hledger-mode
  (setopt hledger-jfile ceamx-ledger-main-journal-file))
#+end_src

**** Register ~hledger-mode~ buffers as popups :window:

#+begin_src emacs-lisp
(after! popper
  (add-to-list 'popper-reference-buffers "\\*Personal Finance\\*"))
#+end_src

**** Register the =hledger= checker for =Flycheck= :checkers:

#+begin_src emacs-lisp
(package! flycheck-hledger
  (when (fboundp 'flycheck-mode)
    (add-hook 'hledger-mode-hook #'flycheck-mode))

  (setopt flycheck-hledger-strict t))
#+end_src

*** PDF-Tools

- website :: <https://github.com/vedang/pdf-tools>
- ref :: <https://github.com/jwiegley/dot-emacs/blob/master/init.org>

~pdf-tools~ should be installed installed via Nixpkgs because it requires
some separate binaries.

#+begin_src emacs-lisp
(require 'ceamx-lib)

(defvar pdf-tools-handle-upgrades nil)

(after! pdf-tools
  (dolist
      (pkg
       '(pdf-annot pdf-cache pdf-dev pdf-history pdf-info pdf-isearch
         pdf-links pdf-misc pdf-occur pdf-outline pdf-sync
         pdf-util pdf-view pdf-virtual))
    (require pkg))
  (pdf-tools-install))
#+end_src

*** TODO <https://github.com/doomemacs/doomemacs/blob/master/modules/tools/pdf/config.el>
*** TODO =saveplace-pdf-view=
*** =ready-player= :: multimedia file previews :nixpkgs:

+ Package :: <https://github.com/xenodium/ready-player>
+ Dependencies :: =ffmpeg= =ffmpegthumbnailer= =mpv=

This should be installed via Nixpkgs due to external dependencies.

#+begin_src emacs-lisp
(use-feature! ready-player
  :mode
  ("\\.\\(aiff\\|flac\\|mp3\\|m4a\\|mp4\\|mkv\\|opus\\|wav\\|webm\\)\\'" . ready-player-major-mode)
  :config
  (setopt ready-player-autoplay nil
          ready-player-repeat nil
          ready-player-shuffle nil))
#+end_src
*** Yijing aka I Ching

Unfortunately, due to copyright restrictions, there are no modern translations
available for legal distribution.

**** DISABLED [[https://github.com/zzkt/i-ching][zzkt/i-ching]] (via MELPA)
:PROPERTIES:
:header-args: :tangle no
:ID:       42bd3676-6f96-499c-8d38-570833d5c365
:END:

Does not support changing line commentaries!

#+begin_src emacs-lisp
(package! i-ching
  (setopt i-ching-hexagram-size 18
          i-ching-hexagram-font "DejaVu Sans"
          i-ching-divination-method '3-coins
          i-ching-randomness-source 'pseudo)

  (keymap-set ceamx-insert-prefix "h" #'i-ching-insert-hexagram))
#+end_src

**** yijing.el
:PROPERTIES:
:ID:       c5573349-c13f-4702-8cf3-8f7cdb49add4
:END:

+ src :: https://www.emacswiki.org/emacs/i-ching.el

This package is generally more *interesting* than the simpler and
more-discoverable [[https://github.com/zzkt/i-ching][=i-ching= package on MELPA]].  It also, most
importantly, supports the display of commentaries on individual
changing lines.


#+begin_src emacs-lisp
(use-feature! yijing
  :commands (yijing/lookup
             yijing/cast))
#+end_src
*** Operate on buffers rectangularly with the ~rect~ feature
:PROPERTIES:
:ID:       8465808e-c79f-4e30-a88f-a9e64401ff95
:END:
:LOGBOOK:
- Refiled on [2025-01-27 Mon 09:34]
:END:

#+begin_src emacs-lisp
(use-feature! ceamx-tools
  :bind ( "C-x SPC" . #'ceamx/rectangle-dispatch/body))
#+end_src

*** Provide the ~ceamx-init-tools~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-tools.el :comments no
(provide 'ceamx-init-tools)
;;; ceamx-init-tools.el ends here
#+end_src

** “Fun” :fun:
:PROPERTIES:
:header-args:emacs-lisp: :tangle lisp/ceamx-init-fun.el
:VISIBILITY: folded
:END:

*** Requirements
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-fun.el :comments no
;; -*- lexical-binding: t; -*-

(require 'ceamx-lib)
#+end_src

*** Zone out in ~zone~
:PROPERTIES:
:ID:       0ffe546e-0213-4686-8dd2-2c0f20770c85
:END:

+ EmacsWiki :: <https://www.emacswiki.org/emacs/ZoneMode>

#+begin_src emacs-lisp
(use-feature! zone
  :defer 30
  :autoload (zone-when-idle)
  :defines (zone-timer)
  :init
  (def-hook! ceamx-zone-when-idle-h ()
    'ceamx-emacs-startup-hook
    "Zone out when idle.
Return the new `zone' timer."
    (zone-when-idle (* 60 10))))

;; FIXME: broken: wrong type argument arrayp (for pgm arg)
;;        (where did this even come from? emacswiki?)
;; (defun zone-choose (pgm)
;;   "Choose a PGM to run for `zone'."
;;   (interactive
;;     (list
;;       (completing-read
;;         "Program: "
;;         (mapcar 'symbol-name zone-programs))))
;;   (let ((zone-programs (list (intern pgm))))
;;     (zone)))
#+end_src

*** Provide the ~ceamx-init-fun~ feature
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp
(provide 'ceamx-init-fun)
;;; ceamx-init-fun.el ends here
#+end_src

* Flows
:PROPERTIES:
:ID:       2fe0f61e-e7f4-4d5a-9343-691d3782b19d
:header-args:emacs-lisp: :tangle lisp/ceamx-init-flows.el
:END:

** Requirements
:PROPERTIES:
:ID:       3056ce3e-7db7-4d73-86f6-a2cd55916cfc
:END:

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

** =elpaca-wait=
:PROPERTIES:
:ID:       962663f8-fe8f-4b78-88f6-a4817fdff001
:END:

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

** Thee Something-Doing Flows
:PROPERTIES:
:ID:       c6cbf999-36db-4d7f-b59d-63bb8da97215
:END:

*** Goals
:PROPERTIES:
:ID:       386d8261-6536-4938-a096-5cf3f215332b
:END:

Something-Doing is a body.

**** What are the composite flows of Something-Doing?
:PROPERTIES:
:ID:       0298d32f-2c00-47fc-9b8d-5e97cd5224a6
:END:

***** Chrismont: start workday with a statement of status and intent
:PROPERTIES:
:ID:       48166bdf-404a-49c4-8b30-76c7e68ef0f8
:END:

- What are you working on?
- Are you facing any impediments?
- Can anyone help out?

***** Cea: process inbox
:PROPERTIES:
:ID:       2df1da53-c491-4de6-98f5-abdb625c0ec6
:END:

- Set deadline, scheduled, tags before refile
- Target main todo file

***** Cea: weekly review
:PROPERTIES:
:ID:       c406ec7f-b589-49f2-8eb6-67a1af1dd29f
:END:

- Archive done tasks
- Set goals for week
  - What constitutes an achievable goal?
  - How many?

***** Cea: quick capture dialog
:PROPERTIES:
:ID:       75c83d17-0e6a-42dc-830b-ee1608a380f4
:END:

***** Cea: integrate with input from other devices
:PROPERTIES:
:ID:       16fdda1f-74b0-46d4-8fe7-d30b5da3c145
:END:

- Android: Orgzly Revived

***** Chrismont: meeting notes associated with calendar events
:PROPERTIES:
:ID:       b323f1fb-48e2-40c1-9c81-a3b0286eb8fc
:END:

+ Connect to Outlook calendar
+ Connect to Proton calendar

***** Cea: Bullet Journal flow
:PROPERTIES:
:ID:       b7f9cee6-eaea-4477-8d5b-f2be88a7dcac
:END:

This is a framework I know works alright for me.  It is lightweight
and encourages daily interaction and maintenance for the sake of awareness.

- types
  - todo items
  - events
  - notes
- requires daily refiling of incomplete tasks, scheduled events, scheduled tasks
- could be something like a daily inbox

***** Chrismont: record a work log to show thoughts
:PROPERTIES:
:ID:       44456f4a-4798-42c4-9bdc-fa32e1af55dc
:END:

- Resurface as external communications as needed
- Quick-as-possible capture into daily log
- Could leverage Denote journal functionality
- Clock-in/out with visible timer in modeline

***** Cea: record random thoughts as notes

***** Cea: write secret journal entries without fear

*****
:PROPERTIES:
:ID:       193b1aa9-0697-4b81-87fc-3ac9fc2f876b
:END:

**** Which flows connect to other flows?
:PROPERTIES:
:ID:       aaa47347-0aa9-42b3-8df0-41d3bc4a2676
:END:



*** Org-Capture templates
:PROPERTIES:
:ID:       d7334fe7-a7a2-423e-8e3b-fca7c45af07e
:BACKLINKS: [[id:c9f35626-6cec-46eb-a140-50be234d55da][Set up Org-Capture]]
:END:

#+begin_src emacs-lisp
(require 'org-capture)
(require 'doct)

(setopt doct-default-entry-type 'entry)
(setopt doct-warnings t)

(setopt org-capture-templates
        (doct
         '(("Inbox item" :keys "c"
            :file ceamx-default-todo-file
            :headline "Inbox"
            :template ("* TODO %?"
                       "%i %a")
            :icon ("checklist" :set "octicon" :color "green"))

           ("Note" :keys "n"
            :file denote-last-path
            :type plain
            :template denote-org-capture
            :no-save t
            :immediate-finish nil
            :kill-buffer t
            :jump-to-captured t)

           ("Journal entry" :keys "j"
            :file denote-journal-extras-path-to-new-or-existing-entry
            :template ("* %U %?"
                       "%i %a")
            :kill-buffer t
            :empty-lines 1)

           ;; ("Emacs" :keys "e"
           ;;  :file ceamx-literate-config-file
           ;;  :template "* TODO "
           ;;  )
           )))
#+end_src

*** Org-Agenda groups
:PROPERTIES:
:ID:       815ead58-41ac-406b-b1fe-4d6c4c838617
:BACKLINKS: [[id:6438e6e9-5052-403d-8c23-a1ee8daf0ec2][=org-super-agenda= :: enchanted groupings for Org-Agenda]]
:END:

Define agenda groups for display with the =org-super-agenda= extension:

#+begin_src emacs-lisp
(after! org-super-agenda
  ;; XXX: `setq' to avoid type error with `setopt'
  (setq org-super-agenda-groups
        '((:name "Today"
                 :time-grid t
                 :todo "TODAY")

          (:name "Important"
                 :tag "financial"
                 :priority "A")

          (:order-multi
           (2 (:name "Personal"
                     :habit t
                     :tag ("personal" "home"))
              (:name "Shopping"
                     :tag "shopping"
                     :tag "buy")))

          (:todo "WAITING" :order 8)
          (:todo ("SOMEDAY" "TO-READ" "TO-LISTEN" "TO-WATCH")
                 :order 9)
          (:priority<= "B" :order 1))))
#+end_src

** Provide the =ceamx-init-flows= feature
:PROPERTIES:
:ID:       4fb152c5-078d-4851-b518-55f85bbd6d22
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle lisp/ceamx-init-flows.el :comments no
(provide 'ceamx-init-flows)
;;; ceamx-init-flows.el ends here
#+end_src

* Load Features
:PROPERTIES:
:header-args: :tangle init.el
:VISIBILITY: folded
:ID:       4e93b7dc-8c0c-44b5-903b-f86ea342fd61
:END:

#+begin_src emacs-lisp
(require 'ceamx-init-ui)
(require 'ceamx-init-modeline)
(require 'ceamx-init-essentials)
(require 'ceamx-init-completion)
(require 'ceamx-init-search)
(require 'ceamx-init-dired)
(require 'ceamx-init-window)
(require 'ceamx-init-vcs)
(require 'ceamx-init-langs)
(require 'ceamx-init-notes)
(require 'ceamx-init-org)
(require 'ceamx-init-tools)
(require 'ceamx-init-news)
(require 'ceamx-init-eww)
(require 'ceamx-init-printing)
(require 'ceamx-init-fun)
(require 'ceamx-init-flows)
#+end_src

* Command Bindings
:PROPERTIES:
:header-args: :tangle init.el
:VISIBILITY: folded
:ID:       d39ff068-1ed1-4bc6-bc7e-f5aa50bb8edd
:END:

** [C-c o] :: Launch
:PROPERTIES:
:ID:       bb8d84ed-5854-4892-9b76-77e67063a71e
:END:

#+begin_src emacs-lisp
(define-keymap :keymap ceamx-launch-prefix
  "s" #'scratch-buffer)
#+end_src

** [C-c q] :: Session
:PROPERTIES:
:ID:       89f0be09-aa04-40cd-9365-f41a5fbf37c6
:END:

#+begin_src emacs-lisp
(define-keymap :keymap ceamx-session-prefix
  "a c" #'cursory-set-preset
  "a d" #'ceamx-ui/dark
  "a f" #'fontaine-set-preset
  "a l" #'ceamx-ui/light
  "a o" #'olivetti-mode

  "p f" #'elpaca-fetch-all
  "p m" #'elpaca-merge-all
  "p t" #'elpaca-try

  "q" #'save-buffers-kill-emacs
  "Q" #'kill-emacs
  "r" #'restart-emacs)

;; (use-feature! ceamx-ui
;;   :commands (ceamx-ui/dark ceamx-ui/light)
;;   :config
;;   (define-keymap :keymap ceamx-session-prefix
;;     "a d" #'ceamx-ui/dark
;;     "a l" #'ceamx-ui/light))
#+end_src

** [C-c t] :: Toggle

#+begin_src emacs-lisp
(define-keymap :keymap ceamx-toggle-prefix
  "f" #'flycheck-mode
  "k" #'keycast-mode-line-mode
  "l" #'display-line-numbers-mode
  "M" #'menu-bar-mode
  "o" #'outline-minor-mode
  "T" #'tab-bar-mode
  "w" #'window-toggle-side-windows
  "W" #'toggle-window-dedicated
  "z" #'logos-focus-mode)
#+end_src

** Window
:PROPERTIES:
:ID:       93d96a59-5e99-4939-8691-14aaaf942adb
:END:

#+begin_src emacs-lisp
(define-keymap :keymap ceamx-window-prefix
  "w" #'ceamx/window-dispatch)

(define-keymap :keymap window-prefix-map
  "w" #'ace-window

  "d" #'ace-delete-window
  "p" #'popper-toggle
  "P" #'popper-toggle-type
  "u" #'winner-undo
  "U" #'winner-redo

  "h" #'windmove-left
  "H" #'ceamx/window-move-left
  "j" #'windmove-down
  "J" #'ceamx/window-move-down
  "k" #'windmove-up
  "K" #'ceamx/window-move-up
  "l" #'windmove-right
  "L" #'ceamx/window-move-right

  "=" #'balance-windows
  "<" #'flip-frame
  ">" #'flop-frame
  "[" #'rotate-frame-clockwise
  "]" #'rotate-frame-anticlockwise
  "{" #'rotate-frame
  "}" #'rotate-frame)

(define-keymap :keymap resize-window-repeat-map
  "<up>" #'enlarge-window
  "<down>" #'shrink-window
  "<left>" #'shrink-window-horizontally
  "<right>" #'enlarge-window-horizontally)

(defvar-keymap ceamx-window-transposition-repeat-map
  :repeat t

  "SPC" #'transpose-frame
  "<" #'flip-frame
  ">" #'flop-frame
  "[" #'rotate-frame-clockwise
  "]" #'rotate-frame-anticlockwise)

(defvar-keymap ceamx-window-lifecycle-repeat-map
  :repeat t

  "2" #'split-window-below
  "3" #'split-window-right
  "o" #'ace-window)
#+end_src

* Finalize
:PROPERTIES:
:header-args: :tangle init.el
:VISIBILITY: folded
:END:

** Start the Emacs server process if not already running

#+begin_src emacs-lisp
(def-hook! ceamx-init-maybe-start-server-h ()
  'ceamx-emacs-startup-hook
  "Allow this Emacs process to act as server if a server is not already running."
  (require 'server)
  (unless (server-running-p)
    (server-start)))
#+end_src

** macOS: Restart Yabai after init

Otherwise, =yabai= will not "see" the Emacs GUI window.

#+begin_src emacs-lisp
(when (and (ceamx-host-macos-p) (display-graphic-p))
  (def-hook! ceamx-after-init-restart-yabai-h ()
    'ceamx-after-init-hook
    "Restart the yabai service after init."
    (after! exec-path-from-shell
      (async-shell-command "yabai --restart-service"))))
#+end_src

** Optionally load the ~custom-file~

#+begin_src emacs-lisp
(when ceamx-load-custom-file
  (load custom-file t))
#+end_src
* Maintenance
:PROPERTIES:
:VISIBILITY: folded
:ID:       2511f122-e694-4055-8177-e77b87952e7c
:END:

** Functions to clean and re-tangle Elisp files

#+begin_src emacs-lisp :noweb yes :results silent
<<ceamx-tangle-src>>
(ceamx/tangle-fresh)
#+end_src

#+name: ceamx-tangle-src
#+begin_src emacs-lisp
(require 'f)
(require 'llama)

(require 'ob-tangle)

(defun ceamx-list-tangled-init-files ()
  "List all tangled files in `user-emacs-directory'.
Note that this is a crude approximation reflective of our
expectations but not necessarily files that were truly tangled.

The assumptions are as follows:

-- All Emacs Lisp files within the \"lisp\" subdirectory
-- early-init.el
-- init.el

If there are any Emacs Lisp files within the \"lisp\"
subdirectory that have not been created as a result of tangling,
they will also be included in the result."
  (let ((dir user-emacs-directory))
    (append
     (mapcar (##f-join dir %) '("early-init.el" "init.el"))
     (f-files (f-join dir "lisp") (##f-ext-p % "el") t))))

(defun ceamx/purge-tangled-init-files ()
  "Delete all tangled init files according to `ceamx-list-tangled-init-files'."
  (interactive)
  (dolist (file (ceamx-list-tangled-init-files))
    (f-delete file)))

(defconst ceamx-literate-config-file (locate-user-emacs-file "config.org"))

(defun ceamx/tangle-fresh (&optional src-file)
  "Purge all existing tangled init files and re-tangle.
When SRC-FILE is non-nil, it will be used as the source file to
be tangled by `org-babel-tangle-file'.  Otherwise, if SRC-FILE is
nil, the value of `ceamx-literate-config-file' will be the
default source file."
  (interactive)
  (ceamx/purge-tangled-init-files)
  (org-babel-tangle-file
   (or src-file ceamx-literate-config-file)))
#+end_src


** Debugging

- Source :: [[https://github.com/progfolio/.emacs.d/blob/master/init.org?plain=1][.emacs.d/init.org at master · progfolio/.emacs.d]]
- Retrieved :: [2024-06-04 Tue 22:20]

Running this form will launch the debugger after loading a package.

This is useful for finding out when a dependency is requiring a package (perhaps
earlier than you want).

Use by tangling this block and launching Emacs with =emacs --debug-init=.

#+begin_src emacs-lisp :var file="" :results silent :tangle no
(unless (string-empty-p file)
  (eval-after-load file
    '(debug)))
#+end_src

Similarly, this variable will hit the debugger when a message matches its
regexp.

#+begin_src emacs-lisp :tangle no
(setq debug-on-message "")
#+end_src

Adding a variable watcher can be a useful way to track down initialization and
mutation of a variable.

#+begin_src emacs-lisp :tangle no
(add-variable-watcher 'org-capture-after-finalize-hook
                      (lambda (symbol newval operation where)
                        (debug)
                        (message "%s set to %s" symbol newval)))
#+end_src

#+begin_src emacs-lisp :tangle no
(setq debug-on-error t)
#+end_src

* Resources
:PROPERTIES:
:ID:       a097628e-0198-47b4-afbe-0b8cfc9ba6d7
:END:

- [[info:elisp#Tips][(elisp) Tips]]
- [[info:elisp#Minor Mode Conventions][(elisp) Minor Mode Conventions]]


** [[https://github.com/james-stoup/emacs-org-mode-tutorial][GitHub - james-stoup/emacs-org-mode-tutorial: A primer for users trying to make sense of Org Mode]]
:PROPERTIES:
:ID:       912620fa-b1ea-4a80-9958-3814ffbde545
:END:
* Styleguide
:PROPERTIES:
:VISIBILITY: folded
:ID:       53c7af29-f9bc-4e07-be6c-ccf2db415170
:END:

** Boolean Variables vs. Predicate Functions
:PROPERTIES:
:CUSTOM_ID: boolean-variables-vs.-predicate-functions
:END:
The naming for booleans and predicates is different.

*** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src elisp
(defvar ceamx-foo-flag t)
(defvar ceamx-is-foo-enabled t)
(defun ceamx-foo-p ()
  ;; sketchy logic (don't do this)
  (or ceamx-foo-flag ceamx-is-foo-enabled))
#+end_src

*** Explanation
:PROPERTIES:
:CUSTOM_ID: explanation
:END:
From
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][Coding
Conventions (GNU Emacs Lisp Reference Manual)]]:

#+begin_quote
If the purpose of a function is to tell you whether a certain condition
is true or false, give the function a name that ends in 'p' (which
stands for "predicate".  If the name is one word, add just 'p'; if the
name is multiple words, add '-p'.  Examples are =framep= and
=frame-live-p=.  We recommend to avoid using this =-p= suffix in boolean
variable names, unless the variable is bound to a predicate function;
instead, use a =-flag= suffix or names like =is-foo=.

#+end_quote

*** Org-Mode: When to wrap inline text in ~tildes~ vs. =equals=

[[info:(org) Emphasis and Monospace][info (org) Emphasis and Monospace]]

[[https://emacs.stackexchange.com/a/21870][What's the relationship between ~foo~ and =foo= in org-mode? - Emacs Stack Exchange]]

* End
:PROPERTIES:
:VISIBILITY: folded
:ID:       e253d887-e769-4aa1-9588-5ea2d771bab4
:END:

This is the section for file-local variables.  File-local variables must be on
the last "page" of a document, beginning no more than 3000 characters from EOF.
See [[info:emacs#Specifying File Variables]["(emacs) Specifying File Variables"]] for more information.

23 SKIDOO



# Local Variables:
# org-refile-targets: ((nil . (:maxlevel . 6)))
# End:
